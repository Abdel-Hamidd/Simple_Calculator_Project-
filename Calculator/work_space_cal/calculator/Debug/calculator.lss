
calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002dac  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000052  00800060  00002dac  00002e20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002334  00000000  00000000  00002e74  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000d86  00000000  00000000  000051a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  00005f2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  0000608e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  0000621d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  00008262  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  00009363  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  0000a2e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  0000a468  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  0000a72a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000afb8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ea       	ldi	r30, 0xAC	; 172
      68:	fd e2       	ldi	r31, 0x2D	; 45
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3b       	cpi	r26, 0xB2	; 178
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 4a 13 	call	0x2694	; 0x2694 <main>
      7a:	0c 94 d4 16 	jmp	0x2da8	; 0x2da8 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 9d 16 	jmp	0x2d3a	; 0x2d3a <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a9 e9       	ldi	r26, 0x99	; 153
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 b9 16 	jmp	0x2d72	; 0x2d72 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 a9 16 	jmp	0x2d52	; 0x2d52 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 c5 16 	jmp	0x2d8a	; 0x2d8a <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 a9 16 	jmp	0x2d52	; 0x2d52 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 c5 16 	jmp	0x2d8a	; 0x2d8a <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 9d 16 	jmp	0x2d3a	; 0x2d3a <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	89 e9       	ldi	r24, 0x99	; 153
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 b9 16 	jmp	0x2d72	; 0x2d72 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 a5 16 	jmp	0x2d4a	; 0x2d4a <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	69 e9       	ldi	r22, 0x99	; 153
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 c1 16 	jmp	0x2d82	; 0x2d82 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 a9 16 	jmp	0x2d52	; 0x2d52 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 c5 16 	jmp	0x2d8a	; 0x2d8a <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 a9 16 	jmp	0x2d52	; 0x2d52 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 c5 16 	jmp	0x2d8a	; 0x2d8a <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 a9 16 	jmp	0x2d52	; 0x2d52 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 c5 16 	jmp	0x2d8a	; 0x2d8a <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 ad 16 	jmp	0x2d5a	; 0x2d5a <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 c9 16 	jmp	0x2d92	; 0x2d92 <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <CLCD_voidInit>:

#define F_CPU 8000000UL
#include <util/delay.h>

void CLCD_voidInit(void)
{
     c8e:	0f 93       	push	r16
     c90:	1f 93       	push	r17
     c92:	df 93       	push	r29
     c94:	cf 93       	push	r28
     c96:	cd b7       	in	r28, 0x3d	; 61
     c98:	de b7       	in	r29, 0x3e	; 62
     c9a:	cc 54       	subi	r28, 0x4C	; 76
     c9c:	d0 40       	sbci	r29, 0x00	; 0
     c9e:	0f b6       	in	r0, 0x3f	; 63
     ca0:	f8 94       	cli
     ca2:	de bf       	out	0x3e, r29	; 62
     ca4:	0f be       	out	0x3f, r0	; 63
     ca6:	cd bf       	out	0x3d, r28	; 61
	// Data Port --> OUTPUT
	DIO_voidSetPortDirection(CLCD_DATA_PORT, DIO_OUTPUT);
     ca8:	80 e0       	ldi	r24, 0x00	; 0
     caa:	61 e0       	ldi	r22, 0x01	; 1
     cac:	0e 94 16 11 	call	0x222c	; 0x222c <DIO_voidSetPortDirection>
	// RS , RW , EN --> OUTPUT
	DIO_voidSetupPinDirection(CLCD_CTRL_PORT, CLCD_RS_PIN, DIO_OUTPUT);
     cb0:	82 e0       	ldi	r24, 0x02	; 2
     cb2:	67 e0       	ldi	r22, 0x07	; 7
     cb4:	41 e0       	ldi	r20, 0x01	; 1
     cb6:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <DIO_voidSetupPinDirection>
	DIO_voidSetupPinDirection(CLCD_CTRL_PORT, CLCD_RW_PIN, DIO_OUTPUT);
     cba:	82 e0       	ldi	r24, 0x02	; 2
     cbc:	66 e0       	ldi	r22, 0x06	; 6
     cbe:	41 e0       	ldi	r20, 0x01	; 1
     cc0:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <DIO_voidSetupPinDirection>
	DIO_voidSetupPinDirection(CLCD_CTRL_PORT, CLCD_EN_PIN, DIO_OUTPUT);
     cc4:	82 e0       	ldi	r24, 0x02	; 2
     cc6:	65 e0       	ldi	r22, 0x05	; 5
     cc8:	41 e0       	ldi	r20, 0x01	; 1
     cca:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <DIO_voidSetupPinDirection>
     cce:	fe 01       	movw	r30, r28
     cd0:	e7 5b       	subi	r30, 0xB7	; 183
     cd2:	ff 4f       	sbci	r31, 0xFF	; 255
     cd4:	80 e0       	ldi	r24, 0x00	; 0
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	a8 e4       	ldi	r26, 0x48	; 72
     cda:	b2 e4       	ldi	r27, 0x42	; 66
     cdc:	80 83       	st	Z, r24
     cde:	91 83       	std	Z+1, r25	; 0x01
     ce0:	a2 83       	std	Z+2, r26	; 0x02
     ce2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ce4:	8e 01       	movw	r16, r28
     ce6:	0b 5b       	subi	r16, 0xBB	; 187
     ce8:	1f 4f       	sbci	r17, 0xFF	; 255
     cea:	fe 01       	movw	r30, r28
     cec:	e7 5b       	subi	r30, 0xB7	; 183
     cee:	ff 4f       	sbci	r31, 0xFF	; 255
     cf0:	60 81       	ld	r22, Z
     cf2:	71 81       	ldd	r23, Z+1	; 0x01
     cf4:	82 81       	ldd	r24, Z+2	; 0x02
     cf6:	93 81       	ldd	r25, Z+3	; 0x03
     cf8:	20 e0       	ldi	r18, 0x00	; 0
     cfa:	30 e0       	ldi	r19, 0x00	; 0
     cfc:	4a ef       	ldi	r20, 0xFA	; 250
     cfe:	54 e4       	ldi	r21, 0x44	; 68
     d00:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d04:	dc 01       	movw	r26, r24
     d06:	cb 01       	movw	r24, r22
     d08:	f8 01       	movw	r30, r16
     d0a:	80 83       	st	Z, r24
     d0c:	91 83       	std	Z+1, r25	; 0x01
     d0e:	a2 83       	std	Z+2, r26	; 0x02
     d10:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d12:	fe 01       	movw	r30, r28
     d14:	eb 5b       	subi	r30, 0xBB	; 187
     d16:	ff 4f       	sbci	r31, 0xFF	; 255
     d18:	60 81       	ld	r22, Z
     d1a:	71 81       	ldd	r23, Z+1	; 0x01
     d1c:	82 81       	ldd	r24, Z+2	; 0x02
     d1e:	93 81       	ldd	r25, Z+3	; 0x03
     d20:	20 e0       	ldi	r18, 0x00	; 0
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	40 e8       	ldi	r20, 0x80	; 128
     d26:	5f e3       	ldi	r21, 0x3F	; 63
     d28:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     d2c:	88 23       	and	r24, r24
     d2e:	44 f4       	brge	.+16     	; 0xd40 <CLCD_voidInit+0xb2>
		__ticks = 1;
     d30:	fe 01       	movw	r30, r28
     d32:	ed 5b       	subi	r30, 0xBD	; 189
     d34:	ff 4f       	sbci	r31, 0xFF	; 255
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	91 83       	std	Z+1, r25	; 0x01
     d3c:	80 83       	st	Z, r24
     d3e:	64 c0       	rjmp	.+200    	; 0xe08 <CLCD_voidInit+0x17a>
	else if (__tmp > 65535)
     d40:	fe 01       	movw	r30, r28
     d42:	eb 5b       	subi	r30, 0xBB	; 187
     d44:	ff 4f       	sbci	r31, 0xFF	; 255
     d46:	60 81       	ld	r22, Z
     d48:	71 81       	ldd	r23, Z+1	; 0x01
     d4a:	82 81       	ldd	r24, Z+2	; 0x02
     d4c:	93 81       	ldd	r25, Z+3	; 0x03
     d4e:	20 e0       	ldi	r18, 0x00	; 0
     d50:	3f ef       	ldi	r19, 0xFF	; 255
     d52:	4f e7       	ldi	r20, 0x7F	; 127
     d54:	57 e4       	ldi	r21, 0x47	; 71
     d56:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     d5a:	18 16       	cp	r1, r24
     d5c:	0c f0       	brlt	.+2      	; 0xd60 <CLCD_voidInit+0xd2>
     d5e:	43 c0       	rjmp	.+134    	; 0xde6 <CLCD_voidInit+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d60:	fe 01       	movw	r30, r28
     d62:	e7 5b       	subi	r30, 0xB7	; 183
     d64:	ff 4f       	sbci	r31, 0xFF	; 255
     d66:	60 81       	ld	r22, Z
     d68:	71 81       	ldd	r23, Z+1	; 0x01
     d6a:	82 81       	ldd	r24, Z+2	; 0x02
     d6c:	93 81       	ldd	r25, Z+3	; 0x03
     d6e:	20 e0       	ldi	r18, 0x00	; 0
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	40 e2       	ldi	r20, 0x20	; 32
     d74:	51 e4       	ldi	r21, 0x41	; 65
     d76:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d7a:	dc 01       	movw	r26, r24
     d7c:	cb 01       	movw	r24, r22
     d7e:	8e 01       	movw	r16, r28
     d80:	0d 5b       	subi	r16, 0xBD	; 189
     d82:	1f 4f       	sbci	r17, 0xFF	; 255
     d84:	bc 01       	movw	r22, r24
     d86:	cd 01       	movw	r24, r26
     d88:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d8c:	dc 01       	movw	r26, r24
     d8e:	cb 01       	movw	r24, r22
     d90:	f8 01       	movw	r30, r16
     d92:	91 83       	std	Z+1, r25	; 0x01
     d94:	80 83       	st	Z, r24
     d96:	1f c0       	rjmp	.+62     	; 0xdd6 <CLCD_voidInit+0x148>
     d98:	fe 01       	movw	r30, r28
     d9a:	ef 5b       	subi	r30, 0xBF	; 191
     d9c:	ff 4f       	sbci	r31, 0xFF	; 255
     d9e:	88 ec       	ldi	r24, 0xC8	; 200
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	91 83       	std	Z+1, r25	; 0x01
     da4:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     da6:	fe 01       	movw	r30, r28
     da8:	ef 5b       	subi	r30, 0xBF	; 191
     daa:	ff 4f       	sbci	r31, 0xFF	; 255
     dac:	80 81       	ld	r24, Z
     dae:	91 81       	ldd	r25, Z+1	; 0x01
     db0:	01 97       	sbiw	r24, 0x01	; 1
     db2:	f1 f7       	brne	.-4      	; 0xdb0 <CLCD_voidInit+0x122>
     db4:	fe 01       	movw	r30, r28
     db6:	ef 5b       	subi	r30, 0xBF	; 191
     db8:	ff 4f       	sbci	r31, 0xFF	; 255
     dba:	91 83       	std	Z+1, r25	; 0x01
     dbc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dbe:	de 01       	movw	r26, r28
     dc0:	ad 5b       	subi	r26, 0xBD	; 189
     dc2:	bf 4f       	sbci	r27, 0xFF	; 255
     dc4:	fe 01       	movw	r30, r28
     dc6:	ed 5b       	subi	r30, 0xBD	; 189
     dc8:	ff 4f       	sbci	r31, 0xFF	; 255
     dca:	80 81       	ld	r24, Z
     dcc:	91 81       	ldd	r25, Z+1	; 0x01
     dce:	01 97       	sbiw	r24, 0x01	; 1
     dd0:	11 96       	adiw	r26, 0x01	; 1
     dd2:	9c 93       	st	X, r25
     dd4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dd6:	fe 01       	movw	r30, r28
     dd8:	ed 5b       	subi	r30, 0xBD	; 189
     dda:	ff 4f       	sbci	r31, 0xFF	; 255
     ddc:	80 81       	ld	r24, Z
     dde:	91 81       	ldd	r25, Z+1	; 0x01
     de0:	00 97       	sbiw	r24, 0x00	; 0
     de2:	d1 f6       	brne	.-76     	; 0xd98 <CLCD_voidInit+0x10a>
     de4:	24 c0       	rjmp	.+72     	; 0xe2e <CLCD_voidInit+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     de6:	8e 01       	movw	r16, r28
     de8:	0d 5b       	subi	r16, 0xBD	; 189
     dea:	1f 4f       	sbci	r17, 0xFF	; 255
     dec:	fe 01       	movw	r30, r28
     dee:	eb 5b       	subi	r30, 0xBB	; 187
     df0:	ff 4f       	sbci	r31, 0xFF	; 255
     df2:	60 81       	ld	r22, Z
     df4:	71 81       	ldd	r23, Z+1	; 0x01
     df6:	82 81       	ldd	r24, Z+2	; 0x02
     df8:	93 81       	ldd	r25, Z+3	; 0x03
     dfa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     dfe:	dc 01       	movw	r26, r24
     e00:	cb 01       	movw	r24, r22
     e02:	f8 01       	movw	r30, r16
     e04:	91 83       	std	Z+1, r25	; 0x01
     e06:	80 83       	st	Z, r24
     e08:	fe 01       	movw	r30, r28
     e0a:	ed 5b       	subi	r30, 0xBD	; 189
     e0c:	ff 4f       	sbci	r31, 0xFF	; 255
     e0e:	80 81       	ld	r24, Z
     e10:	91 81       	ldd	r25, Z+1	; 0x01
     e12:	fe 01       	movw	r30, r28
     e14:	ff 96       	adiw	r30, 0x3f	; 63
     e16:	91 83       	std	Z+1, r25	; 0x01
     e18:	80 83       	st	Z, r24
     e1a:	fe 01       	movw	r30, r28
     e1c:	ff 96       	adiw	r30, 0x3f	; 63
     e1e:	80 81       	ld	r24, Z
     e20:	91 81       	ldd	r25, Z+1	; 0x01
     e22:	01 97       	sbiw	r24, 0x01	; 1
     e24:	f1 f7       	brne	.-4      	; 0xe22 <CLCD_voidInit+0x194>
     e26:	fe 01       	movw	r30, r28
     e28:	ff 96       	adiw	r30, 0x3f	; 63
     e2a:	91 83       	std	Z+1, r25	; 0x01
     e2c:	80 83       	st	Z, r24

	/* Initialization Sequence */
	_delay_ms(50);
	/*Function Set */
	CLCD_voidSendCommand(CLCD_FUNCTIONSET8bit);
     e2e:	88 e3       	ldi	r24, 0x38	; 56
     e30:	0e 94 1d 09 	call	0x123a	; 0x123a <CLCD_voidSendCommand>
     e34:	80 e0       	ldi	r24, 0x00	; 0
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	a8 e4       	ldi	r26, 0x48	; 72
     e3a:	b2 e4       	ldi	r27, 0x42	; 66
     e3c:	8b af       	std	Y+59, r24	; 0x3b
     e3e:	9c af       	std	Y+60, r25	; 0x3c
     e40:	ad af       	std	Y+61, r26	; 0x3d
     e42:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     e44:	6b ad       	ldd	r22, Y+59	; 0x3b
     e46:	7c ad       	ldd	r23, Y+60	; 0x3c
     e48:	8d ad       	ldd	r24, Y+61	; 0x3d
     e4a:	9e ad       	ldd	r25, Y+62	; 0x3e
     e4c:	2b ea       	ldi	r18, 0xAB	; 171
     e4e:	3a ea       	ldi	r19, 0xAA	; 170
     e50:	4a e2       	ldi	r20, 0x2A	; 42
     e52:	50 e4       	ldi	r21, 0x40	; 64
     e54:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e58:	dc 01       	movw	r26, r24
     e5a:	cb 01       	movw	r24, r22
     e5c:	8f ab       	std	Y+55, r24	; 0x37
     e5e:	98 af       	std	Y+56, r25	; 0x38
     e60:	a9 af       	std	Y+57, r26	; 0x39
     e62:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
     e64:	6f a9       	ldd	r22, Y+55	; 0x37
     e66:	78 ad       	ldd	r23, Y+56	; 0x38
     e68:	89 ad       	ldd	r24, Y+57	; 0x39
     e6a:	9a ad       	ldd	r25, Y+58	; 0x3a
     e6c:	20 e0       	ldi	r18, 0x00	; 0
     e6e:	30 e0       	ldi	r19, 0x00	; 0
     e70:	40 e8       	ldi	r20, 0x80	; 128
     e72:	5f e3       	ldi	r21, 0x3F	; 63
     e74:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     e78:	88 23       	and	r24, r24
     e7a:	1c f4       	brge	.+6      	; 0xe82 <CLCD_voidInit+0x1f4>
		__ticks = 1;
     e7c:	81 e0       	ldi	r24, 0x01	; 1
     e7e:	8e ab       	std	Y+54, r24	; 0x36
     e80:	91 c0       	rjmp	.+290    	; 0xfa4 <CLCD_voidInit+0x316>
	else if (__tmp > 255)
     e82:	6f a9       	ldd	r22, Y+55	; 0x37
     e84:	78 ad       	ldd	r23, Y+56	; 0x38
     e86:	89 ad       	ldd	r24, Y+57	; 0x39
     e88:	9a ad       	ldd	r25, Y+58	; 0x3a
     e8a:	20 e0       	ldi	r18, 0x00	; 0
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	4f e7       	ldi	r20, 0x7F	; 127
     e90:	53 e4       	ldi	r21, 0x43	; 67
     e92:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     e96:	18 16       	cp	r1, r24
     e98:	0c f0       	brlt	.+2      	; 0xe9c <CLCD_voidInit+0x20e>
     e9a:	7b c0       	rjmp	.+246    	; 0xf92 <CLCD_voidInit+0x304>
	{
		_delay_ms(__us / 1000.0);
     e9c:	6b ad       	ldd	r22, Y+59	; 0x3b
     e9e:	7c ad       	ldd	r23, Y+60	; 0x3c
     ea0:	8d ad       	ldd	r24, Y+61	; 0x3d
     ea2:	9e ad       	ldd	r25, Y+62	; 0x3e
     ea4:	20 e0       	ldi	r18, 0x00	; 0
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	4a e7       	ldi	r20, 0x7A	; 122
     eaa:	54 e4       	ldi	r21, 0x44	; 68
     eac:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
     eb0:	dc 01       	movw	r26, r24
     eb2:	cb 01       	movw	r24, r22
     eb4:	8a ab       	std	Y+50, r24	; 0x32
     eb6:	9b ab       	std	Y+51, r25	; 0x33
     eb8:	ac ab       	std	Y+52, r26	; 0x34
     eba:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ebc:	6a a9       	ldd	r22, Y+50	; 0x32
     ebe:	7b a9       	ldd	r23, Y+51	; 0x33
     ec0:	8c a9       	ldd	r24, Y+52	; 0x34
     ec2:	9d a9       	ldd	r25, Y+53	; 0x35
     ec4:	20 e0       	ldi	r18, 0x00	; 0
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	4a ef       	ldi	r20, 0xFA	; 250
     eca:	54 e4       	ldi	r21, 0x44	; 68
     ecc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     ed0:	dc 01       	movw	r26, r24
     ed2:	cb 01       	movw	r24, r22
     ed4:	8e a7       	std	Y+46, r24	; 0x2e
     ed6:	9f a7       	std	Y+47, r25	; 0x2f
     ed8:	a8 ab       	std	Y+48, r26	; 0x30
     eda:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
     edc:	6e a5       	ldd	r22, Y+46	; 0x2e
     ede:	7f a5       	ldd	r23, Y+47	; 0x2f
     ee0:	88 a9       	ldd	r24, Y+48	; 0x30
     ee2:	99 a9       	ldd	r25, Y+49	; 0x31
     ee4:	20 e0       	ldi	r18, 0x00	; 0
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	40 e8       	ldi	r20, 0x80	; 128
     eea:	5f e3       	ldi	r21, 0x3F	; 63
     eec:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     ef0:	88 23       	and	r24, r24
     ef2:	2c f4       	brge	.+10     	; 0xefe <CLCD_voidInit+0x270>
		__ticks = 1;
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	9d a7       	std	Y+45, r25	; 0x2d
     efa:	8c a7       	std	Y+44, r24	; 0x2c
     efc:	3f c0       	rjmp	.+126    	; 0xf7c <CLCD_voidInit+0x2ee>
	else if (__tmp > 65535)
     efe:	6e a5       	ldd	r22, Y+46	; 0x2e
     f00:	7f a5       	ldd	r23, Y+47	; 0x2f
     f02:	88 a9       	ldd	r24, Y+48	; 0x30
     f04:	99 a9       	ldd	r25, Y+49	; 0x31
     f06:	20 e0       	ldi	r18, 0x00	; 0
     f08:	3f ef       	ldi	r19, 0xFF	; 255
     f0a:	4f e7       	ldi	r20, 0x7F	; 127
     f0c:	57 e4       	ldi	r21, 0x47	; 71
     f0e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     f12:	18 16       	cp	r1, r24
     f14:	4c f5       	brge	.+82     	; 0xf68 <CLCD_voidInit+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f16:	6a a9       	ldd	r22, Y+50	; 0x32
     f18:	7b a9       	ldd	r23, Y+51	; 0x33
     f1a:	8c a9       	ldd	r24, Y+52	; 0x34
     f1c:	9d a9       	ldd	r25, Y+53	; 0x35
     f1e:	20 e0       	ldi	r18, 0x00	; 0
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	40 e2       	ldi	r20, 0x20	; 32
     f24:	51 e4       	ldi	r21, 0x41	; 65
     f26:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f2a:	dc 01       	movw	r26, r24
     f2c:	cb 01       	movw	r24, r22
     f2e:	bc 01       	movw	r22, r24
     f30:	cd 01       	movw	r24, r26
     f32:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f36:	dc 01       	movw	r26, r24
     f38:	cb 01       	movw	r24, r22
     f3a:	9d a7       	std	Y+45, r25	; 0x2d
     f3c:	8c a7       	std	Y+44, r24	; 0x2c
     f3e:	0f c0       	rjmp	.+30     	; 0xf5e <CLCD_voidInit+0x2d0>
     f40:	88 ec       	ldi	r24, 0xC8	; 200
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	9b a7       	std	Y+43, r25	; 0x2b
     f46:	8a a7       	std	Y+42, r24	; 0x2a
     f48:	8a a5       	ldd	r24, Y+42	; 0x2a
     f4a:	9b a5       	ldd	r25, Y+43	; 0x2b
     f4c:	01 97       	sbiw	r24, 0x01	; 1
     f4e:	f1 f7       	brne	.-4      	; 0xf4c <CLCD_voidInit+0x2be>
     f50:	9b a7       	std	Y+43, r25	; 0x2b
     f52:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f54:	8c a5       	ldd	r24, Y+44	; 0x2c
     f56:	9d a5       	ldd	r25, Y+45	; 0x2d
     f58:	01 97       	sbiw	r24, 0x01	; 1
     f5a:	9d a7       	std	Y+45, r25	; 0x2d
     f5c:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f5e:	8c a5       	ldd	r24, Y+44	; 0x2c
     f60:	9d a5       	ldd	r25, Y+45	; 0x2d
     f62:	00 97       	sbiw	r24, 0x00	; 0
     f64:	69 f7       	brne	.-38     	; 0xf40 <CLCD_voidInit+0x2b2>
     f66:	24 c0       	rjmp	.+72     	; 0xfb0 <CLCD_voidInit+0x322>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f68:	6e a5       	ldd	r22, Y+46	; 0x2e
     f6a:	7f a5       	ldd	r23, Y+47	; 0x2f
     f6c:	88 a9       	ldd	r24, Y+48	; 0x30
     f6e:	99 a9       	ldd	r25, Y+49	; 0x31
     f70:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f74:	dc 01       	movw	r26, r24
     f76:	cb 01       	movw	r24, r22
     f78:	9d a7       	std	Y+45, r25	; 0x2d
     f7a:	8c a7       	std	Y+44, r24	; 0x2c
     f7c:	8c a5       	ldd	r24, Y+44	; 0x2c
     f7e:	9d a5       	ldd	r25, Y+45	; 0x2d
     f80:	99 a7       	std	Y+41, r25	; 0x29
     f82:	88 a7       	std	Y+40, r24	; 0x28
     f84:	88 a5       	ldd	r24, Y+40	; 0x28
     f86:	99 a5       	ldd	r25, Y+41	; 0x29
     f88:	01 97       	sbiw	r24, 0x01	; 1
     f8a:	f1 f7       	brne	.-4      	; 0xf88 <CLCD_voidInit+0x2fa>
     f8c:	99 a7       	std	Y+41, r25	; 0x29
     f8e:	88 a7       	std	Y+40, r24	; 0x28
     f90:	0f c0       	rjmp	.+30     	; 0xfb0 <CLCD_voidInit+0x322>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     f92:	6f a9       	ldd	r22, Y+55	; 0x37
     f94:	78 ad       	ldd	r23, Y+56	; 0x38
     f96:	89 ad       	ldd	r24, Y+57	; 0x39
     f98:	9a ad       	ldd	r25, Y+58	; 0x3a
     f9a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f9e:	dc 01       	movw	r26, r24
     fa0:	cb 01       	movw	r24, r22
     fa2:	8e ab       	std	Y+54, r24	; 0x36
     fa4:	8e a9       	ldd	r24, Y+54	; 0x36
     fa6:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     fa8:	8f a1       	ldd	r24, Y+39	; 0x27
     faa:	8a 95       	dec	r24
     fac:	f1 f7       	brne	.-4      	; 0xfaa <CLCD_voidInit+0x31c>
     fae:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(50);
	/*Display ON/OFF*/
	CLCD_voidSendCommand(CLCD_DISPLAYON_OFF);
     fb0:	8c e0       	ldi	r24, 0x0C	; 12
     fb2:	0e 94 1d 09 	call	0x123a	; 0x123a <CLCD_voidSendCommand>
     fb6:	80 e0       	ldi	r24, 0x00	; 0
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	a8 e4       	ldi	r26, 0x48	; 72
     fbc:	b2 e4       	ldi	r27, 0x42	; 66
     fbe:	8b a3       	std	Y+35, r24	; 0x23
     fc0:	9c a3       	std	Y+36, r25	; 0x24
     fc2:	ad a3       	std	Y+37, r26	; 0x25
     fc4:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     fc6:	6b a1       	ldd	r22, Y+35	; 0x23
     fc8:	7c a1       	ldd	r23, Y+36	; 0x24
     fca:	8d a1       	ldd	r24, Y+37	; 0x25
     fcc:	9e a1       	ldd	r25, Y+38	; 0x26
     fce:	2b ea       	ldi	r18, 0xAB	; 171
     fd0:	3a ea       	ldi	r19, 0xAA	; 170
     fd2:	4a e2       	ldi	r20, 0x2A	; 42
     fd4:	50 e4       	ldi	r21, 0x40	; 64
     fd6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     fda:	dc 01       	movw	r26, r24
     fdc:	cb 01       	movw	r24, r22
     fde:	8f 8f       	std	Y+31, r24	; 0x1f
     fe0:	98 a3       	std	Y+32, r25	; 0x20
     fe2:	a9 a3       	std	Y+33, r26	; 0x21
     fe4:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
     fe6:	6f 8d       	ldd	r22, Y+31	; 0x1f
     fe8:	78 a1       	ldd	r23, Y+32	; 0x20
     fea:	89 a1       	ldd	r24, Y+33	; 0x21
     fec:	9a a1       	ldd	r25, Y+34	; 0x22
     fee:	20 e0       	ldi	r18, 0x00	; 0
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	40 e8       	ldi	r20, 0x80	; 128
     ff4:	5f e3       	ldi	r21, 0x3F	; 63
     ff6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     ffa:	88 23       	and	r24, r24
     ffc:	1c f4       	brge	.+6      	; 0x1004 <CLCD_voidInit+0x376>
		__ticks = 1;
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	8e 8f       	std	Y+30, r24	; 0x1e
    1002:	91 c0       	rjmp	.+290    	; 0x1126 <CLCD_voidInit+0x498>
	else if (__tmp > 255)
    1004:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1006:	78 a1       	ldd	r23, Y+32	; 0x20
    1008:	89 a1       	ldd	r24, Y+33	; 0x21
    100a:	9a a1       	ldd	r25, Y+34	; 0x22
    100c:	20 e0       	ldi	r18, 0x00	; 0
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	4f e7       	ldi	r20, 0x7F	; 127
    1012:	53 e4       	ldi	r21, 0x43	; 67
    1014:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1018:	18 16       	cp	r1, r24
    101a:	0c f0       	brlt	.+2      	; 0x101e <CLCD_voidInit+0x390>
    101c:	7b c0       	rjmp	.+246    	; 0x1114 <CLCD_voidInit+0x486>
	{
		_delay_ms(__us / 1000.0);
    101e:	6b a1       	ldd	r22, Y+35	; 0x23
    1020:	7c a1       	ldd	r23, Y+36	; 0x24
    1022:	8d a1       	ldd	r24, Y+37	; 0x25
    1024:	9e a1       	ldd	r25, Y+38	; 0x26
    1026:	20 e0       	ldi	r18, 0x00	; 0
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	4a e7       	ldi	r20, 0x7A	; 122
    102c:	54 e4       	ldi	r21, 0x44	; 68
    102e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1032:	dc 01       	movw	r26, r24
    1034:	cb 01       	movw	r24, r22
    1036:	8a 8f       	std	Y+26, r24	; 0x1a
    1038:	9b 8f       	std	Y+27, r25	; 0x1b
    103a:	ac 8f       	std	Y+28, r26	; 0x1c
    103c:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    103e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1040:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1042:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1044:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1046:	20 e0       	ldi	r18, 0x00	; 0
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	4a ef       	ldi	r20, 0xFA	; 250
    104c:	54 e4       	ldi	r21, 0x44	; 68
    104e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1052:	dc 01       	movw	r26, r24
    1054:	cb 01       	movw	r24, r22
    1056:	8e 8b       	std	Y+22, r24	; 0x16
    1058:	9f 8b       	std	Y+23, r25	; 0x17
    105a:	a8 8f       	std	Y+24, r26	; 0x18
    105c:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    105e:	6e 89       	ldd	r22, Y+22	; 0x16
    1060:	7f 89       	ldd	r23, Y+23	; 0x17
    1062:	88 8d       	ldd	r24, Y+24	; 0x18
    1064:	99 8d       	ldd	r25, Y+25	; 0x19
    1066:	20 e0       	ldi	r18, 0x00	; 0
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	40 e8       	ldi	r20, 0x80	; 128
    106c:	5f e3       	ldi	r21, 0x3F	; 63
    106e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1072:	88 23       	and	r24, r24
    1074:	2c f4       	brge	.+10     	; 0x1080 <CLCD_voidInit+0x3f2>
		__ticks = 1;
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	9d 8b       	std	Y+21, r25	; 0x15
    107c:	8c 8b       	std	Y+20, r24	; 0x14
    107e:	3f c0       	rjmp	.+126    	; 0x10fe <CLCD_voidInit+0x470>
	else if (__tmp > 65535)
    1080:	6e 89       	ldd	r22, Y+22	; 0x16
    1082:	7f 89       	ldd	r23, Y+23	; 0x17
    1084:	88 8d       	ldd	r24, Y+24	; 0x18
    1086:	99 8d       	ldd	r25, Y+25	; 0x19
    1088:	20 e0       	ldi	r18, 0x00	; 0
    108a:	3f ef       	ldi	r19, 0xFF	; 255
    108c:	4f e7       	ldi	r20, 0x7F	; 127
    108e:	57 e4       	ldi	r21, 0x47	; 71
    1090:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1094:	18 16       	cp	r1, r24
    1096:	4c f5       	brge	.+82     	; 0x10ea <CLCD_voidInit+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1098:	6a 8d       	ldd	r22, Y+26	; 0x1a
    109a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    109c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    109e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    10a0:	20 e0       	ldi	r18, 0x00	; 0
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	40 e2       	ldi	r20, 0x20	; 32
    10a6:	51 e4       	ldi	r21, 0x41	; 65
    10a8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10ac:	dc 01       	movw	r26, r24
    10ae:	cb 01       	movw	r24, r22
    10b0:	bc 01       	movw	r22, r24
    10b2:	cd 01       	movw	r24, r26
    10b4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    10b8:	dc 01       	movw	r26, r24
    10ba:	cb 01       	movw	r24, r22
    10bc:	9d 8b       	std	Y+21, r25	; 0x15
    10be:	8c 8b       	std	Y+20, r24	; 0x14
    10c0:	0f c0       	rjmp	.+30     	; 0x10e0 <CLCD_voidInit+0x452>
    10c2:	88 ec       	ldi	r24, 0xC8	; 200
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	9b 8b       	std	Y+19, r25	; 0x13
    10c8:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    10ca:	8a 89       	ldd	r24, Y+18	; 0x12
    10cc:	9b 89       	ldd	r25, Y+19	; 0x13
    10ce:	01 97       	sbiw	r24, 0x01	; 1
    10d0:	f1 f7       	brne	.-4      	; 0x10ce <CLCD_voidInit+0x440>
    10d2:	9b 8b       	std	Y+19, r25	; 0x13
    10d4:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10d6:	8c 89       	ldd	r24, Y+20	; 0x14
    10d8:	9d 89       	ldd	r25, Y+21	; 0x15
    10da:	01 97       	sbiw	r24, 0x01	; 1
    10dc:	9d 8b       	std	Y+21, r25	; 0x15
    10de:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10e0:	8c 89       	ldd	r24, Y+20	; 0x14
    10e2:	9d 89       	ldd	r25, Y+21	; 0x15
    10e4:	00 97       	sbiw	r24, 0x00	; 0
    10e6:	69 f7       	brne	.-38     	; 0x10c2 <CLCD_voidInit+0x434>
    10e8:	24 c0       	rjmp	.+72     	; 0x1132 <CLCD_voidInit+0x4a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10ea:	6e 89       	ldd	r22, Y+22	; 0x16
    10ec:	7f 89       	ldd	r23, Y+23	; 0x17
    10ee:	88 8d       	ldd	r24, Y+24	; 0x18
    10f0:	99 8d       	ldd	r25, Y+25	; 0x19
    10f2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    10f6:	dc 01       	movw	r26, r24
    10f8:	cb 01       	movw	r24, r22
    10fa:	9d 8b       	std	Y+21, r25	; 0x15
    10fc:	8c 8b       	std	Y+20, r24	; 0x14
    10fe:	8c 89       	ldd	r24, Y+20	; 0x14
    1100:	9d 89       	ldd	r25, Y+21	; 0x15
    1102:	99 8b       	std	Y+17, r25	; 0x11
    1104:	88 8b       	std	Y+16, r24	; 0x10
    1106:	88 89       	ldd	r24, Y+16	; 0x10
    1108:	99 89       	ldd	r25, Y+17	; 0x11
    110a:	01 97       	sbiw	r24, 0x01	; 1
    110c:	f1 f7       	brne	.-4      	; 0x110a <CLCD_voidInit+0x47c>
    110e:	99 8b       	std	Y+17, r25	; 0x11
    1110:	88 8b       	std	Y+16, r24	; 0x10
    1112:	0f c0       	rjmp	.+30     	; 0x1132 <CLCD_voidInit+0x4a4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1114:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1116:	78 a1       	ldd	r23, Y+32	; 0x20
    1118:	89 a1       	ldd	r24, Y+33	; 0x21
    111a:	9a a1       	ldd	r25, Y+34	; 0x22
    111c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1120:	dc 01       	movw	r26, r24
    1122:	cb 01       	movw	r24, r22
    1124:	8e 8f       	std	Y+30, r24	; 0x1e
    1126:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1128:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    112a:	8f 85       	ldd	r24, Y+15	; 0x0f
    112c:	8a 95       	dec	r24
    112e:	f1 f7       	brne	.-4      	; 0x112c <CLCD_voidInit+0x49e>
    1130:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(50);
	/*Display Clear */
	CLCD_voidSendCommand(CLCD_CLR_DISPLAY);
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	0e 94 1d 09 	call	0x123a	; 0x123a <CLCD_voidSendCommand>
    1138:	80 e0       	ldi	r24, 0x00	; 0
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	a0 e0       	ldi	r26, 0x00	; 0
    113e:	b0 e4       	ldi	r27, 0x40	; 64
    1140:	8b 87       	std	Y+11, r24	; 0x0b
    1142:	9c 87       	std	Y+12, r25	; 0x0c
    1144:	ad 87       	std	Y+13, r26	; 0x0d
    1146:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1148:	6b 85       	ldd	r22, Y+11	; 0x0b
    114a:	7c 85       	ldd	r23, Y+12	; 0x0c
    114c:	8d 85       	ldd	r24, Y+13	; 0x0d
    114e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1150:	20 e0       	ldi	r18, 0x00	; 0
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	4a ef       	ldi	r20, 0xFA	; 250
    1156:	54 e4       	ldi	r21, 0x44	; 68
    1158:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    115c:	dc 01       	movw	r26, r24
    115e:	cb 01       	movw	r24, r22
    1160:	8f 83       	std	Y+7, r24	; 0x07
    1162:	98 87       	std	Y+8, r25	; 0x08
    1164:	a9 87       	std	Y+9, r26	; 0x09
    1166:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1168:	6f 81       	ldd	r22, Y+7	; 0x07
    116a:	78 85       	ldd	r23, Y+8	; 0x08
    116c:	89 85       	ldd	r24, Y+9	; 0x09
    116e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1170:	20 e0       	ldi	r18, 0x00	; 0
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	40 e8       	ldi	r20, 0x80	; 128
    1176:	5f e3       	ldi	r21, 0x3F	; 63
    1178:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    117c:	88 23       	and	r24, r24
    117e:	2c f4       	brge	.+10     	; 0x118a <CLCD_voidInit+0x4fc>
		__ticks = 1;
    1180:	81 e0       	ldi	r24, 0x01	; 1
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	9e 83       	std	Y+6, r25	; 0x06
    1186:	8d 83       	std	Y+5, r24	; 0x05
    1188:	3f c0       	rjmp	.+126    	; 0x1208 <CLCD_voidInit+0x57a>
	else if (__tmp > 65535)
    118a:	6f 81       	ldd	r22, Y+7	; 0x07
    118c:	78 85       	ldd	r23, Y+8	; 0x08
    118e:	89 85       	ldd	r24, Y+9	; 0x09
    1190:	9a 85       	ldd	r25, Y+10	; 0x0a
    1192:	20 e0       	ldi	r18, 0x00	; 0
    1194:	3f ef       	ldi	r19, 0xFF	; 255
    1196:	4f e7       	ldi	r20, 0x7F	; 127
    1198:	57 e4       	ldi	r21, 0x47	; 71
    119a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    119e:	18 16       	cp	r1, r24
    11a0:	4c f5       	brge	.+82     	; 0x11f4 <CLCD_voidInit+0x566>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    11a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    11a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    11a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    11aa:	20 e0       	ldi	r18, 0x00	; 0
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	40 e2       	ldi	r20, 0x20	; 32
    11b0:	51 e4       	ldi	r21, 0x41	; 65
    11b2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11b6:	dc 01       	movw	r26, r24
    11b8:	cb 01       	movw	r24, r22
    11ba:	bc 01       	movw	r22, r24
    11bc:	cd 01       	movw	r24, r26
    11be:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11c2:	dc 01       	movw	r26, r24
    11c4:	cb 01       	movw	r24, r22
    11c6:	9e 83       	std	Y+6, r25	; 0x06
    11c8:	8d 83       	std	Y+5, r24	; 0x05
    11ca:	0f c0       	rjmp	.+30     	; 0x11ea <CLCD_voidInit+0x55c>
    11cc:	88 ec       	ldi	r24, 0xC8	; 200
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	9c 83       	std	Y+4, r25	; 0x04
    11d2:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    11d4:	8b 81       	ldd	r24, Y+3	; 0x03
    11d6:	9c 81       	ldd	r25, Y+4	; 0x04
    11d8:	01 97       	sbiw	r24, 0x01	; 1
    11da:	f1 f7       	brne	.-4      	; 0x11d8 <CLCD_voidInit+0x54a>
    11dc:	9c 83       	std	Y+4, r25	; 0x04
    11de:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11e0:	8d 81       	ldd	r24, Y+5	; 0x05
    11e2:	9e 81       	ldd	r25, Y+6	; 0x06
    11e4:	01 97       	sbiw	r24, 0x01	; 1
    11e6:	9e 83       	std	Y+6, r25	; 0x06
    11e8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11ea:	8d 81       	ldd	r24, Y+5	; 0x05
    11ec:	9e 81       	ldd	r25, Y+6	; 0x06
    11ee:	00 97       	sbiw	r24, 0x00	; 0
    11f0:	69 f7       	brne	.-38     	; 0x11cc <CLCD_voidInit+0x53e>
    11f2:	14 c0       	rjmp	.+40     	; 0x121c <CLCD_voidInit+0x58e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11f4:	6f 81       	ldd	r22, Y+7	; 0x07
    11f6:	78 85       	ldd	r23, Y+8	; 0x08
    11f8:	89 85       	ldd	r24, Y+9	; 0x09
    11fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    11fc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1200:	dc 01       	movw	r26, r24
    1202:	cb 01       	movw	r24, r22
    1204:	9e 83       	std	Y+6, r25	; 0x06
    1206:	8d 83       	std	Y+5, r24	; 0x05
    1208:	8d 81       	ldd	r24, Y+5	; 0x05
    120a:	9e 81       	ldd	r25, Y+6	; 0x06
    120c:	9a 83       	std	Y+2, r25	; 0x02
    120e:	89 83       	std	Y+1, r24	; 0x01
    1210:	89 81       	ldd	r24, Y+1	; 0x01
    1212:	9a 81       	ldd	r25, Y+2	; 0x02
    1214:	01 97       	sbiw	r24, 0x01	; 1
    1216:	f1 f7       	brne	.-4      	; 0x1214 <CLCD_voidInit+0x586>
    1218:	9a 83       	std	Y+2, r25	; 0x02
    121a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	/*Entry Mode Set */
	CLCD_voidSendCommand(CLCD_ENTRYMODE);
    121c:	86 e0       	ldi	r24, 0x06	; 6
    121e:	0e 94 1d 09 	call	0x123a	; 0x123a <CLCD_voidSendCommand>
}
    1222:	c4 5b       	subi	r28, 0xB4	; 180
    1224:	df 4f       	sbci	r29, 0xFF	; 255
    1226:	0f b6       	in	r0, 0x3f	; 63
    1228:	f8 94       	cli
    122a:	de bf       	out	0x3e, r29	; 62
    122c:	0f be       	out	0x3f, r0	; 63
    122e:	cd bf       	out	0x3d, r28	; 61
    1230:	cf 91       	pop	r28
    1232:	df 91       	pop	r29
    1234:	1f 91       	pop	r17
    1236:	0f 91       	pop	r16
    1238:	08 95       	ret

0000123a <CLCD_voidSendCommand>:

void CLCD_voidSendCommand(u8 Copy_u8Command)
{
    123a:	df 93       	push	r29
    123c:	cf 93       	push	r28
    123e:	cd b7       	in	r28, 0x3d	; 61
    1240:	de b7       	in	r29, 0x3e	; 62
    1242:	e1 97       	sbiw	r28, 0x31	; 49
    1244:	0f b6       	in	r0, 0x3f	; 63
    1246:	f8 94       	cli
    1248:	de bf       	out	0x3e, r29	; 62
    124a:	0f be       	out	0x3f, r0	; 63
    124c:	cd bf       	out	0x3d, r28	; 61
    124e:	89 ab       	std	Y+49, r24	; 0x31
	/*RS -> Low (To Send Command )*/
	DIO_voidSetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN, DIO_LOW);
    1250:	82 e0       	ldi	r24, 0x02	; 2
    1252:	67 e0       	ldi	r22, 0x07	; 7
    1254:	40 e0       	ldi	r20, 0x00	; 0
    1256:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <DIO_voidSetPinValue>
	/*RW -> Low	(To Write)*/
	DIO_voidSetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN, DIO_LOW);
    125a:	82 e0       	ldi	r24, 0x02	; 2
    125c:	66 e0       	ldi	r22, 0x06	; 6
    125e:	40 e0       	ldi	r20, 0x00	; 0
    1260:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <DIO_voidSetPinValue>
	/*	Send Command */
	DIO_voidSetPortValue(CLCD_DATA_PORT, Copy_u8Command);
    1264:	80 e0       	ldi	r24, 0x00	; 0
    1266:	69 a9       	ldd	r22, Y+49	; 0x31
    1268:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_voidSetPortValue>
	/*Enable Sequence */
	DIO_voidSetPinValue(CLCD_CTRL_PORT, CLCD_EN_PIN, DIO_HIGH);
    126c:	82 e0       	ldi	r24, 0x02	; 2
    126e:	65 e0       	ldi	r22, 0x05	; 5
    1270:	41 e0       	ldi	r20, 0x01	; 1
    1272:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <DIO_voidSetPinValue>
    1276:	80 e0       	ldi	r24, 0x00	; 0
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	a0 e8       	ldi	r26, 0x80	; 128
    127c:	bf e3       	ldi	r27, 0x3F	; 63
    127e:	8d a7       	std	Y+45, r24	; 0x2d
    1280:	9e a7       	std	Y+46, r25	; 0x2e
    1282:	af a7       	std	Y+47, r26	; 0x2f
    1284:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1286:	6d a5       	ldd	r22, Y+45	; 0x2d
    1288:	7e a5       	ldd	r23, Y+46	; 0x2e
    128a:	8f a5       	ldd	r24, Y+47	; 0x2f
    128c:	98 a9       	ldd	r25, Y+48	; 0x30
    128e:	2b ea       	ldi	r18, 0xAB	; 171
    1290:	3a ea       	ldi	r19, 0xAA	; 170
    1292:	4a e2       	ldi	r20, 0x2A	; 42
    1294:	50 e4       	ldi	r21, 0x40	; 64
    1296:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    129a:	dc 01       	movw	r26, r24
    129c:	cb 01       	movw	r24, r22
    129e:	89 a7       	std	Y+41, r24	; 0x29
    12a0:	9a a7       	std	Y+42, r25	; 0x2a
    12a2:	ab a7       	std	Y+43, r26	; 0x2b
    12a4:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    12a6:	69 a5       	ldd	r22, Y+41	; 0x29
    12a8:	7a a5       	ldd	r23, Y+42	; 0x2a
    12aa:	8b a5       	ldd	r24, Y+43	; 0x2b
    12ac:	9c a5       	ldd	r25, Y+44	; 0x2c
    12ae:	20 e0       	ldi	r18, 0x00	; 0
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	40 e8       	ldi	r20, 0x80	; 128
    12b4:	5f e3       	ldi	r21, 0x3F	; 63
    12b6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    12ba:	88 23       	and	r24, r24
    12bc:	1c f4       	brge	.+6      	; 0x12c4 <CLCD_voidSendCommand+0x8a>
		__ticks = 1;
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	88 a7       	std	Y+40, r24	; 0x28
    12c2:	91 c0       	rjmp	.+290    	; 0x13e6 <CLCD_voidSendCommand+0x1ac>
	else if (__tmp > 255)
    12c4:	69 a5       	ldd	r22, Y+41	; 0x29
    12c6:	7a a5       	ldd	r23, Y+42	; 0x2a
    12c8:	8b a5       	ldd	r24, Y+43	; 0x2b
    12ca:	9c a5       	ldd	r25, Y+44	; 0x2c
    12cc:	20 e0       	ldi	r18, 0x00	; 0
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	4f e7       	ldi	r20, 0x7F	; 127
    12d2:	53 e4       	ldi	r21, 0x43	; 67
    12d4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    12d8:	18 16       	cp	r1, r24
    12da:	0c f0       	brlt	.+2      	; 0x12de <CLCD_voidSendCommand+0xa4>
    12dc:	7b c0       	rjmp	.+246    	; 0x13d4 <CLCD_voidSendCommand+0x19a>
	{
		_delay_ms(__us / 1000.0);
    12de:	6d a5       	ldd	r22, Y+45	; 0x2d
    12e0:	7e a5       	ldd	r23, Y+46	; 0x2e
    12e2:	8f a5       	ldd	r24, Y+47	; 0x2f
    12e4:	98 a9       	ldd	r25, Y+48	; 0x30
    12e6:	20 e0       	ldi	r18, 0x00	; 0
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	4a e7       	ldi	r20, 0x7A	; 122
    12ec:	54 e4       	ldi	r21, 0x44	; 68
    12ee:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    12f2:	dc 01       	movw	r26, r24
    12f4:	cb 01       	movw	r24, r22
    12f6:	8c a3       	std	Y+36, r24	; 0x24
    12f8:	9d a3       	std	Y+37, r25	; 0x25
    12fa:	ae a3       	std	Y+38, r26	; 0x26
    12fc:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12fe:	6c a1       	ldd	r22, Y+36	; 0x24
    1300:	7d a1       	ldd	r23, Y+37	; 0x25
    1302:	8e a1       	ldd	r24, Y+38	; 0x26
    1304:	9f a1       	ldd	r25, Y+39	; 0x27
    1306:	20 e0       	ldi	r18, 0x00	; 0
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	4a ef       	ldi	r20, 0xFA	; 250
    130c:	54 e4       	ldi	r21, 0x44	; 68
    130e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1312:	dc 01       	movw	r26, r24
    1314:	cb 01       	movw	r24, r22
    1316:	88 a3       	std	Y+32, r24	; 0x20
    1318:	99 a3       	std	Y+33, r25	; 0x21
    131a:	aa a3       	std	Y+34, r26	; 0x22
    131c:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    131e:	68 a1       	ldd	r22, Y+32	; 0x20
    1320:	79 a1       	ldd	r23, Y+33	; 0x21
    1322:	8a a1       	ldd	r24, Y+34	; 0x22
    1324:	9b a1       	ldd	r25, Y+35	; 0x23
    1326:	20 e0       	ldi	r18, 0x00	; 0
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	40 e8       	ldi	r20, 0x80	; 128
    132c:	5f e3       	ldi	r21, 0x3F	; 63
    132e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1332:	88 23       	and	r24, r24
    1334:	2c f4       	brge	.+10     	; 0x1340 <CLCD_voidSendCommand+0x106>
		__ticks = 1;
    1336:	81 e0       	ldi	r24, 0x01	; 1
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	9f 8f       	std	Y+31, r25	; 0x1f
    133c:	8e 8f       	std	Y+30, r24	; 0x1e
    133e:	3f c0       	rjmp	.+126    	; 0x13be <CLCD_voidSendCommand+0x184>
	else if (__tmp > 65535)
    1340:	68 a1       	ldd	r22, Y+32	; 0x20
    1342:	79 a1       	ldd	r23, Y+33	; 0x21
    1344:	8a a1       	ldd	r24, Y+34	; 0x22
    1346:	9b a1       	ldd	r25, Y+35	; 0x23
    1348:	20 e0       	ldi	r18, 0x00	; 0
    134a:	3f ef       	ldi	r19, 0xFF	; 255
    134c:	4f e7       	ldi	r20, 0x7F	; 127
    134e:	57 e4       	ldi	r21, 0x47	; 71
    1350:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1354:	18 16       	cp	r1, r24
    1356:	4c f5       	brge	.+82     	; 0x13aa <CLCD_voidSendCommand+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1358:	6c a1       	ldd	r22, Y+36	; 0x24
    135a:	7d a1       	ldd	r23, Y+37	; 0x25
    135c:	8e a1       	ldd	r24, Y+38	; 0x26
    135e:	9f a1       	ldd	r25, Y+39	; 0x27
    1360:	20 e0       	ldi	r18, 0x00	; 0
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	40 e2       	ldi	r20, 0x20	; 32
    1366:	51 e4       	ldi	r21, 0x41	; 65
    1368:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    136c:	dc 01       	movw	r26, r24
    136e:	cb 01       	movw	r24, r22
    1370:	bc 01       	movw	r22, r24
    1372:	cd 01       	movw	r24, r26
    1374:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1378:	dc 01       	movw	r26, r24
    137a:	cb 01       	movw	r24, r22
    137c:	9f 8f       	std	Y+31, r25	; 0x1f
    137e:	8e 8f       	std	Y+30, r24	; 0x1e
    1380:	0f c0       	rjmp	.+30     	; 0x13a0 <CLCD_voidSendCommand+0x166>
    1382:	88 ec       	ldi	r24, 0xC8	; 200
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	9d 8f       	std	Y+29, r25	; 0x1d
    1388:	8c 8f       	std	Y+28, r24	; 0x1c
    138a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    138c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    138e:	01 97       	sbiw	r24, 0x01	; 1
    1390:	f1 f7       	brne	.-4      	; 0x138e <CLCD_voidSendCommand+0x154>
    1392:	9d 8f       	std	Y+29, r25	; 0x1d
    1394:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1396:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1398:	9f 8d       	ldd	r25, Y+31	; 0x1f
    139a:	01 97       	sbiw	r24, 0x01	; 1
    139c:	9f 8f       	std	Y+31, r25	; 0x1f
    139e:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13a0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    13a2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    13a4:	00 97       	sbiw	r24, 0x00	; 0
    13a6:	69 f7       	brne	.-38     	; 0x1382 <CLCD_voidSendCommand+0x148>
    13a8:	24 c0       	rjmp	.+72     	; 0x13f2 <CLCD_voidSendCommand+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13aa:	68 a1       	ldd	r22, Y+32	; 0x20
    13ac:	79 a1       	ldd	r23, Y+33	; 0x21
    13ae:	8a a1       	ldd	r24, Y+34	; 0x22
    13b0:	9b a1       	ldd	r25, Y+35	; 0x23
    13b2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13b6:	dc 01       	movw	r26, r24
    13b8:	cb 01       	movw	r24, r22
    13ba:	9f 8f       	std	Y+31, r25	; 0x1f
    13bc:	8e 8f       	std	Y+30, r24	; 0x1e
    13be:	8e 8d       	ldd	r24, Y+30	; 0x1e
    13c0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    13c2:	9b 8f       	std	Y+27, r25	; 0x1b
    13c4:	8a 8f       	std	Y+26, r24	; 0x1a
    13c6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    13c8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    13ca:	01 97       	sbiw	r24, 0x01	; 1
    13cc:	f1 f7       	brne	.-4      	; 0x13ca <CLCD_voidSendCommand+0x190>
    13ce:	9b 8f       	std	Y+27, r25	; 0x1b
    13d0:	8a 8f       	std	Y+26, r24	; 0x1a
    13d2:	0f c0       	rjmp	.+30     	; 0x13f2 <CLCD_voidSendCommand+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    13d4:	69 a5       	ldd	r22, Y+41	; 0x29
    13d6:	7a a5       	ldd	r23, Y+42	; 0x2a
    13d8:	8b a5       	ldd	r24, Y+43	; 0x2b
    13da:	9c a5       	ldd	r25, Y+44	; 0x2c
    13dc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13e0:	dc 01       	movw	r26, r24
    13e2:	cb 01       	movw	r24, r22
    13e4:	88 a7       	std	Y+40, r24	; 0x28
    13e6:	88 a5       	ldd	r24, Y+40	; 0x28
    13e8:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    13ea:	89 8d       	ldd	r24, Y+25	; 0x19
    13ec:	8a 95       	dec	r24
    13ee:	f1 f7       	brne	.-4      	; 0x13ec <CLCD_voidSendCommand+0x1b2>
    13f0:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	DIO_voidSetPinValue(CLCD_CTRL_PORT, CLCD_EN_PIN, DIO_LOW);
    13f2:	82 e0       	ldi	r24, 0x02	; 2
    13f4:	65 e0       	ldi	r22, 0x05	; 5
    13f6:	40 e0       	ldi	r20, 0x00	; 0
    13f8:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <DIO_voidSetPinValue>
    13fc:	80 e0       	ldi	r24, 0x00	; 0
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	a8 e4       	ldi	r26, 0x48	; 72
    1402:	b2 e4       	ldi	r27, 0x42	; 66
    1404:	8d 8b       	std	Y+21, r24	; 0x15
    1406:	9e 8b       	std	Y+22, r25	; 0x16
    1408:	af 8b       	std	Y+23, r26	; 0x17
    140a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    140c:	6d 89       	ldd	r22, Y+21	; 0x15
    140e:	7e 89       	ldd	r23, Y+22	; 0x16
    1410:	8f 89       	ldd	r24, Y+23	; 0x17
    1412:	98 8d       	ldd	r25, Y+24	; 0x18
    1414:	2b ea       	ldi	r18, 0xAB	; 171
    1416:	3a ea       	ldi	r19, 0xAA	; 170
    1418:	4a e2       	ldi	r20, 0x2A	; 42
    141a:	50 e4       	ldi	r21, 0x40	; 64
    141c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1420:	dc 01       	movw	r26, r24
    1422:	cb 01       	movw	r24, r22
    1424:	89 8b       	std	Y+17, r24	; 0x11
    1426:	9a 8b       	std	Y+18, r25	; 0x12
    1428:	ab 8b       	std	Y+19, r26	; 0x13
    142a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    142c:	69 89       	ldd	r22, Y+17	; 0x11
    142e:	7a 89       	ldd	r23, Y+18	; 0x12
    1430:	8b 89       	ldd	r24, Y+19	; 0x13
    1432:	9c 89       	ldd	r25, Y+20	; 0x14
    1434:	20 e0       	ldi	r18, 0x00	; 0
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	40 e8       	ldi	r20, 0x80	; 128
    143a:	5f e3       	ldi	r21, 0x3F	; 63
    143c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1440:	88 23       	and	r24, r24
    1442:	1c f4       	brge	.+6      	; 0x144a <CLCD_voidSendCommand+0x210>
		__ticks = 1;
    1444:	81 e0       	ldi	r24, 0x01	; 1
    1446:	88 8b       	std	Y+16, r24	; 0x10
    1448:	91 c0       	rjmp	.+290    	; 0x156c <CLCD_voidSendCommand+0x332>
	else if (__tmp > 255)
    144a:	69 89       	ldd	r22, Y+17	; 0x11
    144c:	7a 89       	ldd	r23, Y+18	; 0x12
    144e:	8b 89       	ldd	r24, Y+19	; 0x13
    1450:	9c 89       	ldd	r25, Y+20	; 0x14
    1452:	20 e0       	ldi	r18, 0x00	; 0
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	4f e7       	ldi	r20, 0x7F	; 127
    1458:	53 e4       	ldi	r21, 0x43	; 67
    145a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    145e:	18 16       	cp	r1, r24
    1460:	0c f0       	brlt	.+2      	; 0x1464 <CLCD_voidSendCommand+0x22a>
    1462:	7b c0       	rjmp	.+246    	; 0x155a <CLCD_voidSendCommand+0x320>
	{
		_delay_ms(__us / 1000.0);
    1464:	6d 89       	ldd	r22, Y+21	; 0x15
    1466:	7e 89       	ldd	r23, Y+22	; 0x16
    1468:	8f 89       	ldd	r24, Y+23	; 0x17
    146a:	98 8d       	ldd	r25, Y+24	; 0x18
    146c:	20 e0       	ldi	r18, 0x00	; 0
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	4a e7       	ldi	r20, 0x7A	; 122
    1472:	54 e4       	ldi	r21, 0x44	; 68
    1474:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1478:	dc 01       	movw	r26, r24
    147a:	cb 01       	movw	r24, r22
    147c:	8c 87       	std	Y+12, r24	; 0x0c
    147e:	9d 87       	std	Y+13, r25	; 0x0d
    1480:	ae 87       	std	Y+14, r26	; 0x0e
    1482:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1484:	6c 85       	ldd	r22, Y+12	; 0x0c
    1486:	7d 85       	ldd	r23, Y+13	; 0x0d
    1488:	8e 85       	ldd	r24, Y+14	; 0x0e
    148a:	9f 85       	ldd	r25, Y+15	; 0x0f
    148c:	20 e0       	ldi	r18, 0x00	; 0
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	4a ef       	ldi	r20, 0xFA	; 250
    1492:	54 e4       	ldi	r21, 0x44	; 68
    1494:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1498:	dc 01       	movw	r26, r24
    149a:	cb 01       	movw	r24, r22
    149c:	88 87       	std	Y+8, r24	; 0x08
    149e:	99 87       	std	Y+9, r25	; 0x09
    14a0:	aa 87       	std	Y+10, r26	; 0x0a
    14a2:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    14a4:	68 85       	ldd	r22, Y+8	; 0x08
    14a6:	79 85       	ldd	r23, Y+9	; 0x09
    14a8:	8a 85       	ldd	r24, Y+10	; 0x0a
    14aa:	9b 85       	ldd	r25, Y+11	; 0x0b
    14ac:	20 e0       	ldi	r18, 0x00	; 0
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	40 e8       	ldi	r20, 0x80	; 128
    14b2:	5f e3       	ldi	r21, 0x3F	; 63
    14b4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    14b8:	88 23       	and	r24, r24
    14ba:	2c f4       	brge	.+10     	; 0x14c6 <CLCD_voidSendCommand+0x28c>
		__ticks = 1;
    14bc:	81 e0       	ldi	r24, 0x01	; 1
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	9f 83       	std	Y+7, r25	; 0x07
    14c2:	8e 83       	std	Y+6, r24	; 0x06
    14c4:	3f c0       	rjmp	.+126    	; 0x1544 <CLCD_voidSendCommand+0x30a>
	else if (__tmp > 65535)
    14c6:	68 85       	ldd	r22, Y+8	; 0x08
    14c8:	79 85       	ldd	r23, Y+9	; 0x09
    14ca:	8a 85       	ldd	r24, Y+10	; 0x0a
    14cc:	9b 85       	ldd	r25, Y+11	; 0x0b
    14ce:	20 e0       	ldi	r18, 0x00	; 0
    14d0:	3f ef       	ldi	r19, 0xFF	; 255
    14d2:	4f e7       	ldi	r20, 0x7F	; 127
    14d4:	57 e4       	ldi	r21, 0x47	; 71
    14d6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    14da:	18 16       	cp	r1, r24
    14dc:	4c f5       	brge	.+82     	; 0x1530 <CLCD_voidSendCommand+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14de:	6c 85       	ldd	r22, Y+12	; 0x0c
    14e0:	7d 85       	ldd	r23, Y+13	; 0x0d
    14e2:	8e 85       	ldd	r24, Y+14	; 0x0e
    14e4:	9f 85       	ldd	r25, Y+15	; 0x0f
    14e6:	20 e0       	ldi	r18, 0x00	; 0
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	40 e2       	ldi	r20, 0x20	; 32
    14ec:	51 e4       	ldi	r21, 0x41	; 65
    14ee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14f2:	dc 01       	movw	r26, r24
    14f4:	cb 01       	movw	r24, r22
    14f6:	bc 01       	movw	r22, r24
    14f8:	cd 01       	movw	r24, r26
    14fa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14fe:	dc 01       	movw	r26, r24
    1500:	cb 01       	movw	r24, r22
    1502:	9f 83       	std	Y+7, r25	; 0x07
    1504:	8e 83       	std	Y+6, r24	; 0x06
    1506:	0f c0       	rjmp	.+30     	; 0x1526 <CLCD_voidSendCommand+0x2ec>
    1508:	88 ec       	ldi	r24, 0xC8	; 200
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	9d 83       	std	Y+5, r25	; 0x05
    150e:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1510:	8c 81       	ldd	r24, Y+4	; 0x04
    1512:	9d 81       	ldd	r25, Y+5	; 0x05
    1514:	01 97       	sbiw	r24, 0x01	; 1
    1516:	f1 f7       	brne	.-4      	; 0x1514 <CLCD_voidSendCommand+0x2da>
    1518:	9d 83       	std	Y+5, r25	; 0x05
    151a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    151c:	8e 81       	ldd	r24, Y+6	; 0x06
    151e:	9f 81       	ldd	r25, Y+7	; 0x07
    1520:	01 97       	sbiw	r24, 0x01	; 1
    1522:	9f 83       	std	Y+7, r25	; 0x07
    1524:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1526:	8e 81       	ldd	r24, Y+6	; 0x06
    1528:	9f 81       	ldd	r25, Y+7	; 0x07
    152a:	00 97       	sbiw	r24, 0x00	; 0
    152c:	69 f7       	brne	.-38     	; 0x1508 <CLCD_voidSendCommand+0x2ce>
    152e:	24 c0       	rjmp	.+72     	; 0x1578 <CLCD_voidSendCommand+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1530:	68 85       	ldd	r22, Y+8	; 0x08
    1532:	79 85       	ldd	r23, Y+9	; 0x09
    1534:	8a 85       	ldd	r24, Y+10	; 0x0a
    1536:	9b 85       	ldd	r25, Y+11	; 0x0b
    1538:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    153c:	dc 01       	movw	r26, r24
    153e:	cb 01       	movw	r24, r22
    1540:	9f 83       	std	Y+7, r25	; 0x07
    1542:	8e 83       	std	Y+6, r24	; 0x06
    1544:	8e 81       	ldd	r24, Y+6	; 0x06
    1546:	9f 81       	ldd	r25, Y+7	; 0x07
    1548:	9b 83       	std	Y+3, r25	; 0x03
    154a:	8a 83       	std	Y+2, r24	; 0x02
    154c:	8a 81       	ldd	r24, Y+2	; 0x02
    154e:	9b 81       	ldd	r25, Y+3	; 0x03
    1550:	01 97       	sbiw	r24, 0x01	; 1
    1552:	f1 f7       	brne	.-4      	; 0x1550 <CLCD_voidSendCommand+0x316>
    1554:	9b 83       	std	Y+3, r25	; 0x03
    1556:	8a 83       	std	Y+2, r24	; 0x02
    1558:	0f c0       	rjmp	.+30     	; 0x1578 <CLCD_voidSendCommand+0x33e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    155a:	69 89       	ldd	r22, Y+17	; 0x11
    155c:	7a 89       	ldd	r23, Y+18	; 0x12
    155e:	8b 89       	ldd	r24, Y+19	; 0x13
    1560:	9c 89       	ldd	r25, Y+20	; 0x14
    1562:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1566:	dc 01       	movw	r26, r24
    1568:	cb 01       	movw	r24, r22
    156a:	88 8b       	std	Y+16, r24	; 0x10
    156c:	88 89       	ldd	r24, Y+16	; 0x10
    156e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1570:	89 81       	ldd	r24, Y+1	; 0x01
    1572:	8a 95       	dec	r24
    1574:	f1 f7       	brne	.-4      	; 0x1572 <CLCD_voidSendCommand+0x338>
    1576:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(50);
}
    1578:	e1 96       	adiw	r28, 0x31	; 49
    157a:	0f b6       	in	r0, 0x3f	; 63
    157c:	f8 94       	cli
    157e:	de bf       	out	0x3e, r29	; 62
    1580:	0f be       	out	0x3f, r0	; 63
    1582:	cd bf       	out	0x3d, r28	; 61
    1584:	cf 91       	pop	r28
    1586:	df 91       	pop	r29
    1588:	08 95       	ret

0000158a <CLCD_voidSendData>:
void CLCD_voidSendData(u8 Copy_u8Data)
{
    158a:	df 93       	push	r29
    158c:	cf 93       	push	r28
    158e:	cd b7       	in	r28, 0x3d	; 61
    1590:	de b7       	in	r29, 0x3e	; 62
    1592:	e1 97       	sbiw	r28, 0x31	; 49
    1594:	0f b6       	in	r0, 0x3f	; 63
    1596:	f8 94       	cli
    1598:	de bf       	out	0x3e, r29	; 62
    159a:	0f be       	out	0x3f, r0	; 63
    159c:	cd bf       	out	0x3d, r28	; 61
    159e:	89 ab       	std	Y+49, r24	; 0x31
	/*RS -> High (To Send Data )*/
		DIO_voidSetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN, DIO_HIGH);
    15a0:	82 e0       	ldi	r24, 0x02	; 2
    15a2:	67 e0       	ldi	r22, 0x07	; 7
    15a4:	41 e0       	ldi	r20, 0x01	; 1
    15a6:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <DIO_voidSetPinValue>
		/*RW -> Low	(To Write)*/
		DIO_voidSetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN, DIO_LOW);
    15aa:	82 e0       	ldi	r24, 0x02	; 2
    15ac:	66 e0       	ldi	r22, 0x06	; 6
    15ae:	40 e0       	ldi	r20, 0x00	; 0
    15b0:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <DIO_voidSetPinValue>
		/*	Send Command */
		DIO_voidSetPortValue(CLCD_DATA_PORT, Copy_u8Data);
    15b4:	80 e0       	ldi	r24, 0x00	; 0
    15b6:	69 a9       	ldd	r22, Y+49	; 0x31
    15b8:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_voidSetPortValue>
		/*Enable Sequence */
		DIO_voidSetPinValue(CLCD_CTRL_PORT, CLCD_EN_PIN, DIO_HIGH);
    15bc:	82 e0       	ldi	r24, 0x02	; 2
    15be:	65 e0       	ldi	r22, 0x05	; 5
    15c0:	41 e0       	ldi	r20, 0x01	; 1
    15c2:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <DIO_voidSetPinValue>
    15c6:	80 e0       	ldi	r24, 0x00	; 0
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	a0 e8       	ldi	r26, 0x80	; 128
    15cc:	bf e3       	ldi	r27, 0x3F	; 63
    15ce:	8d a7       	std	Y+45, r24	; 0x2d
    15d0:	9e a7       	std	Y+46, r25	; 0x2e
    15d2:	af a7       	std	Y+47, r26	; 0x2f
    15d4:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    15d6:	6d a5       	ldd	r22, Y+45	; 0x2d
    15d8:	7e a5       	ldd	r23, Y+46	; 0x2e
    15da:	8f a5       	ldd	r24, Y+47	; 0x2f
    15dc:	98 a9       	ldd	r25, Y+48	; 0x30
    15de:	2b ea       	ldi	r18, 0xAB	; 171
    15e0:	3a ea       	ldi	r19, 0xAA	; 170
    15e2:	4a e2       	ldi	r20, 0x2A	; 42
    15e4:	50 e4       	ldi	r21, 0x40	; 64
    15e6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15ea:	dc 01       	movw	r26, r24
    15ec:	cb 01       	movw	r24, r22
    15ee:	89 a7       	std	Y+41, r24	; 0x29
    15f0:	9a a7       	std	Y+42, r25	; 0x2a
    15f2:	ab a7       	std	Y+43, r26	; 0x2b
    15f4:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    15f6:	69 a5       	ldd	r22, Y+41	; 0x29
    15f8:	7a a5       	ldd	r23, Y+42	; 0x2a
    15fa:	8b a5       	ldd	r24, Y+43	; 0x2b
    15fc:	9c a5       	ldd	r25, Y+44	; 0x2c
    15fe:	20 e0       	ldi	r18, 0x00	; 0
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	40 e8       	ldi	r20, 0x80	; 128
    1604:	5f e3       	ldi	r21, 0x3F	; 63
    1606:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    160a:	88 23       	and	r24, r24
    160c:	1c f4       	brge	.+6      	; 0x1614 <CLCD_voidSendData+0x8a>
		__ticks = 1;
    160e:	81 e0       	ldi	r24, 0x01	; 1
    1610:	88 a7       	std	Y+40, r24	; 0x28
    1612:	91 c0       	rjmp	.+290    	; 0x1736 <CLCD_voidSendData+0x1ac>
	else if (__tmp > 255)
    1614:	69 a5       	ldd	r22, Y+41	; 0x29
    1616:	7a a5       	ldd	r23, Y+42	; 0x2a
    1618:	8b a5       	ldd	r24, Y+43	; 0x2b
    161a:	9c a5       	ldd	r25, Y+44	; 0x2c
    161c:	20 e0       	ldi	r18, 0x00	; 0
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	4f e7       	ldi	r20, 0x7F	; 127
    1622:	53 e4       	ldi	r21, 0x43	; 67
    1624:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1628:	18 16       	cp	r1, r24
    162a:	0c f0       	brlt	.+2      	; 0x162e <CLCD_voidSendData+0xa4>
    162c:	7b c0       	rjmp	.+246    	; 0x1724 <CLCD_voidSendData+0x19a>
	{
		_delay_ms(__us / 1000.0);
    162e:	6d a5       	ldd	r22, Y+45	; 0x2d
    1630:	7e a5       	ldd	r23, Y+46	; 0x2e
    1632:	8f a5       	ldd	r24, Y+47	; 0x2f
    1634:	98 a9       	ldd	r25, Y+48	; 0x30
    1636:	20 e0       	ldi	r18, 0x00	; 0
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	4a e7       	ldi	r20, 0x7A	; 122
    163c:	54 e4       	ldi	r21, 0x44	; 68
    163e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1642:	dc 01       	movw	r26, r24
    1644:	cb 01       	movw	r24, r22
    1646:	8c a3       	std	Y+36, r24	; 0x24
    1648:	9d a3       	std	Y+37, r25	; 0x25
    164a:	ae a3       	std	Y+38, r26	; 0x26
    164c:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    164e:	6c a1       	ldd	r22, Y+36	; 0x24
    1650:	7d a1       	ldd	r23, Y+37	; 0x25
    1652:	8e a1       	ldd	r24, Y+38	; 0x26
    1654:	9f a1       	ldd	r25, Y+39	; 0x27
    1656:	20 e0       	ldi	r18, 0x00	; 0
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	4a ef       	ldi	r20, 0xFA	; 250
    165c:	54 e4       	ldi	r21, 0x44	; 68
    165e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1662:	dc 01       	movw	r26, r24
    1664:	cb 01       	movw	r24, r22
    1666:	88 a3       	std	Y+32, r24	; 0x20
    1668:	99 a3       	std	Y+33, r25	; 0x21
    166a:	aa a3       	std	Y+34, r26	; 0x22
    166c:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    166e:	68 a1       	ldd	r22, Y+32	; 0x20
    1670:	79 a1       	ldd	r23, Y+33	; 0x21
    1672:	8a a1       	ldd	r24, Y+34	; 0x22
    1674:	9b a1       	ldd	r25, Y+35	; 0x23
    1676:	20 e0       	ldi	r18, 0x00	; 0
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	40 e8       	ldi	r20, 0x80	; 128
    167c:	5f e3       	ldi	r21, 0x3F	; 63
    167e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1682:	88 23       	and	r24, r24
    1684:	2c f4       	brge	.+10     	; 0x1690 <CLCD_voidSendData+0x106>
		__ticks = 1;
    1686:	81 e0       	ldi	r24, 0x01	; 1
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	9f 8f       	std	Y+31, r25	; 0x1f
    168c:	8e 8f       	std	Y+30, r24	; 0x1e
    168e:	3f c0       	rjmp	.+126    	; 0x170e <CLCD_voidSendData+0x184>
	else if (__tmp > 65535)
    1690:	68 a1       	ldd	r22, Y+32	; 0x20
    1692:	79 a1       	ldd	r23, Y+33	; 0x21
    1694:	8a a1       	ldd	r24, Y+34	; 0x22
    1696:	9b a1       	ldd	r25, Y+35	; 0x23
    1698:	20 e0       	ldi	r18, 0x00	; 0
    169a:	3f ef       	ldi	r19, 0xFF	; 255
    169c:	4f e7       	ldi	r20, 0x7F	; 127
    169e:	57 e4       	ldi	r21, 0x47	; 71
    16a0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    16a4:	18 16       	cp	r1, r24
    16a6:	4c f5       	brge	.+82     	; 0x16fa <CLCD_voidSendData+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16a8:	6c a1       	ldd	r22, Y+36	; 0x24
    16aa:	7d a1       	ldd	r23, Y+37	; 0x25
    16ac:	8e a1       	ldd	r24, Y+38	; 0x26
    16ae:	9f a1       	ldd	r25, Y+39	; 0x27
    16b0:	20 e0       	ldi	r18, 0x00	; 0
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	40 e2       	ldi	r20, 0x20	; 32
    16b6:	51 e4       	ldi	r21, 0x41	; 65
    16b8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16bc:	dc 01       	movw	r26, r24
    16be:	cb 01       	movw	r24, r22
    16c0:	bc 01       	movw	r22, r24
    16c2:	cd 01       	movw	r24, r26
    16c4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16c8:	dc 01       	movw	r26, r24
    16ca:	cb 01       	movw	r24, r22
    16cc:	9f 8f       	std	Y+31, r25	; 0x1f
    16ce:	8e 8f       	std	Y+30, r24	; 0x1e
    16d0:	0f c0       	rjmp	.+30     	; 0x16f0 <CLCD_voidSendData+0x166>
    16d2:	88 ec       	ldi	r24, 0xC8	; 200
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	9d 8f       	std	Y+29, r25	; 0x1d
    16d8:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    16da:	8c 8d       	ldd	r24, Y+28	; 0x1c
    16dc:	9d 8d       	ldd	r25, Y+29	; 0x1d
    16de:	01 97       	sbiw	r24, 0x01	; 1
    16e0:	f1 f7       	brne	.-4      	; 0x16de <CLCD_voidSendData+0x154>
    16e2:	9d 8f       	std	Y+29, r25	; 0x1d
    16e4:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16e6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    16e8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    16ea:	01 97       	sbiw	r24, 0x01	; 1
    16ec:	9f 8f       	std	Y+31, r25	; 0x1f
    16ee:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16f0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    16f2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    16f4:	00 97       	sbiw	r24, 0x00	; 0
    16f6:	69 f7       	brne	.-38     	; 0x16d2 <CLCD_voidSendData+0x148>
    16f8:	24 c0       	rjmp	.+72     	; 0x1742 <CLCD_voidSendData+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16fa:	68 a1       	ldd	r22, Y+32	; 0x20
    16fc:	79 a1       	ldd	r23, Y+33	; 0x21
    16fe:	8a a1       	ldd	r24, Y+34	; 0x22
    1700:	9b a1       	ldd	r25, Y+35	; 0x23
    1702:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1706:	dc 01       	movw	r26, r24
    1708:	cb 01       	movw	r24, r22
    170a:	9f 8f       	std	Y+31, r25	; 0x1f
    170c:	8e 8f       	std	Y+30, r24	; 0x1e
    170e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1710:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1712:	9b 8f       	std	Y+27, r25	; 0x1b
    1714:	8a 8f       	std	Y+26, r24	; 0x1a
    1716:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1718:	9b 8d       	ldd	r25, Y+27	; 0x1b
    171a:	01 97       	sbiw	r24, 0x01	; 1
    171c:	f1 f7       	brne	.-4      	; 0x171a <CLCD_voidSendData+0x190>
    171e:	9b 8f       	std	Y+27, r25	; 0x1b
    1720:	8a 8f       	std	Y+26, r24	; 0x1a
    1722:	0f c0       	rjmp	.+30     	; 0x1742 <CLCD_voidSendData+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1724:	69 a5       	ldd	r22, Y+41	; 0x29
    1726:	7a a5       	ldd	r23, Y+42	; 0x2a
    1728:	8b a5       	ldd	r24, Y+43	; 0x2b
    172a:	9c a5       	ldd	r25, Y+44	; 0x2c
    172c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1730:	dc 01       	movw	r26, r24
    1732:	cb 01       	movw	r24, r22
    1734:	88 a7       	std	Y+40, r24	; 0x28
    1736:	88 a5       	ldd	r24, Y+40	; 0x28
    1738:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    173a:	89 8d       	ldd	r24, Y+25	; 0x19
    173c:	8a 95       	dec	r24
    173e:	f1 f7       	brne	.-4      	; 0x173c <CLCD_voidSendData+0x1b2>
    1740:	89 8f       	std	Y+25, r24	; 0x19
		_delay_us(1);
		DIO_voidSetPinValue(CLCD_CTRL_PORT, CLCD_EN_PIN, DIO_LOW);
    1742:	82 e0       	ldi	r24, 0x02	; 2
    1744:	65 e0       	ldi	r22, 0x05	; 5
    1746:	40 e0       	ldi	r20, 0x00	; 0
    1748:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <DIO_voidSetPinValue>
    174c:	80 e0       	ldi	r24, 0x00	; 0
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	a8 e4       	ldi	r26, 0x48	; 72
    1752:	b2 e4       	ldi	r27, 0x42	; 66
    1754:	8d 8b       	std	Y+21, r24	; 0x15
    1756:	9e 8b       	std	Y+22, r25	; 0x16
    1758:	af 8b       	std	Y+23, r26	; 0x17
    175a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    175c:	6d 89       	ldd	r22, Y+21	; 0x15
    175e:	7e 89       	ldd	r23, Y+22	; 0x16
    1760:	8f 89       	ldd	r24, Y+23	; 0x17
    1762:	98 8d       	ldd	r25, Y+24	; 0x18
    1764:	2b ea       	ldi	r18, 0xAB	; 171
    1766:	3a ea       	ldi	r19, 0xAA	; 170
    1768:	4a e2       	ldi	r20, 0x2A	; 42
    176a:	50 e4       	ldi	r21, 0x40	; 64
    176c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1770:	dc 01       	movw	r26, r24
    1772:	cb 01       	movw	r24, r22
    1774:	89 8b       	std	Y+17, r24	; 0x11
    1776:	9a 8b       	std	Y+18, r25	; 0x12
    1778:	ab 8b       	std	Y+19, r26	; 0x13
    177a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    177c:	69 89       	ldd	r22, Y+17	; 0x11
    177e:	7a 89       	ldd	r23, Y+18	; 0x12
    1780:	8b 89       	ldd	r24, Y+19	; 0x13
    1782:	9c 89       	ldd	r25, Y+20	; 0x14
    1784:	20 e0       	ldi	r18, 0x00	; 0
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	40 e8       	ldi	r20, 0x80	; 128
    178a:	5f e3       	ldi	r21, 0x3F	; 63
    178c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1790:	88 23       	and	r24, r24
    1792:	1c f4       	brge	.+6      	; 0x179a <CLCD_voidSendData+0x210>
		__ticks = 1;
    1794:	81 e0       	ldi	r24, 0x01	; 1
    1796:	88 8b       	std	Y+16, r24	; 0x10
    1798:	91 c0       	rjmp	.+290    	; 0x18bc <CLCD_voidSendData+0x332>
	else if (__tmp > 255)
    179a:	69 89       	ldd	r22, Y+17	; 0x11
    179c:	7a 89       	ldd	r23, Y+18	; 0x12
    179e:	8b 89       	ldd	r24, Y+19	; 0x13
    17a0:	9c 89       	ldd	r25, Y+20	; 0x14
    17a2:	20 e0       	ldi	r18, 0x00	; 0
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	4f e7       	ldi	r20, 0x7F	; 127
    17a8:	53 e4       	ldi	r21, 0x43	; 67
    17aa:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    17ae:	18 16       	cp	r1, r24
    17b0:	0c f0       	brlt	.+2      	; 0x17b4 <CLCD_voidSendData+0x22a>
    17b2:	7b c0       	rjmp	.+246    	; 0x18aa <CLCD_voidSendData+0x320>
	{
		_delay_ms(__us / 1000.0);
    17b4:	6d 89       	ldd	r22, Y+21	; 0x15
    17b6:	7e 89       	ldd	r23, Y+22	; 0x16
    17b8:	8f 89       	ldd	r24, Y+23	; 0x17
    17ba:	98 8d       	ldd	r25, Y+24	; 0x18
    17bc:	20 e0       	ldi	r18, 0x00	; 0
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	4a e7       	ldi	r20, 0x7A	; 122
    17c2:	54 e4       	ldi	r21, 0x44	; 68
    17c4:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    17c8:	dc 01       	movw	r26, r24
    17ca:	cb 01       	movw	r24, r22
    17cc:	8c 87       	std	Y+12, r24	; 0x0c
    17ce:	9d 87       	std	Y+13, r25	; 0x0d
    17d0:	ae 87       	std	Y+14, r26	; 0x0e
    17d2:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17d4:	6c 85       	ldd	r22, Y+12	; 0x0c
    17d6:	7d 85       	ldd	r23, Y+13	; 0x0d
    17d8:	8e 85       	ldd	r24, Y+14	; 0x0e
    17da:	9f 85       	ldd	r25, Y+15	; 0x0f
    17dc:	20 e0       	ldi	r18, 0x00	; 0
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	4a ef       	ldi	r20, 0xFA	; 250
    17e2:	54 e4       	ldi	r21, 0x44	; 68
    17e4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17e8:	dc 01       	movw	r26, r24
    17ea:	cb 01       	movw	r24, r22
    17ec:	88 87       	std	Y+8, r24	; 0x08
    17ee:	99 87       	std	Y+9, r25	; 0x09
    17f0:	aa 87       	std	Y+10, r26	; 0x0a
    17f2:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    17f4:	68 85       	ldd	r22, Y+8	; 0x08
    17f6:	79 85       	ldd	r23, Y+9	; 0x09
    17f8:	8a 85       	ldd	r24, Y+10	; 0x0a
    17fa:	9b 85       	ldd	r25, Y+11	; 0x0b
    17fc:	20 e0       	ldi	r18, 0x00	; 0
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	40 e8       	ldi	r20, 0x80	; 128
    1802:	5f e3       	ldi	r21, 0x3F	; 63
    1804:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1808:	88 23       	and	r24, r24
    180a:	2c f4       	brge	.+10     	; 0x1816 <CLCD_voidSendData+0x28c>
		__ticks = 1;
    180c:	81 e0       	ldi	r24, 0x01	; 1
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	9f 83       	std	Y+7, r25	; 0x07
    1812:	8e 83       	std	Y+6, r24	; 0x06
    1814:	3f c0       	rjmp	.+126    	; 0x1894 <CLCD_voidSendData+0x30a>
	else if (__tmp > 65535)
    1816:	68 85       	ldd	r22, Y+8	; 0x08
    1818:	79 85       	ldd	r23, Y+9	; 0x09
    181a:	8a 85       	ldd	r24, Y+10	; 0x0a
    181c:	9b 85       	ldd	r25, Y+11	; 0x0b
    181e:	20 e0       	ldi	r18, 0x00	; 0
    1820:	3f ef       	ldi	r19, 0xFF	; 255
    1822:	4f e7       	ldi	r20, 0x7F	; 127
    1824:	57 e4       	ldi	r21, 0x47	; 71
    1826:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    182a:	18 16       	cp	r1, r24
    182c:	4c f5       	brge	.+82     	; 0x1880 <CLCD_voidSendData+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    182e:	6c 85       	ldd	r22, Y+12	; 0x0c
    1830:	7d 85       	ldd	r23, Y+13	; 0x0d
    1832:	8e 85       	ldd	r24, Y+14	; 0x0e
    1834:	9f 85       	ldd	r25, Y+15	; 0x0f
    1836:	20 e0       	ldi	r18, 0x00	; 0
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	40 e2       	ldi	r20, 0x20	; 32
    183c:	51 e4       	ldi	r21, 0x41	; 65
    183e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1842:	dc 01       	movw	r26, r24
    1844:	cb 01       	movw	r24, r22
    1846:	bc 01       	movw	r22, r24
    1848:	cd 01       	movw	r24, r26
    184a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    184e:	dc 01       	movw	r26, r24
    1850:	cb 01       	movw	r24, r22
    1852:	9f 83       	std	Y+7, r25	; 0x07
    1854:	8e 83       	std	Y+6, r24	; 0x06
    1856:	0f c0       	rjmp	.+30     	; 0x1876 <CLCD_voidSendData+0x2ec>
    1858:	88 ec       	ldi	r24, 0xC8	; 200
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	9d 83       	std	Y+5, r25	; 0x05
    185e:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1860:	8c 81       	ldd	r24, Y+4	; 0x04
    1862:	9d 81       	ldd	r25, Y+5	; 0x05
    1864:	01 97       	sbiw	r24, 0x01	; 1
    1866:	f1 f7       	brne	.-4      	; 0x1864 <CLCD_voidSendData+0x2da>
    1868:	9d 83       	std	Y+5, r25	; 0x05
    186a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    186c:	8e 81       	ldd	r24, Y+6	; 0x06
    186e:	9f 81       	ldd	r25, Y+7	; 0x07
    1870:	01 97       	sbiw	r24, 0x01	; 1
    1872:	9f 83       	std	Y+7, r25	; 0x07
    1874:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1876:	8e 81       	ldd	r24, Y+6	; 0x06
    1878:	9f 81       	ldd	r25, Y+7	; 0x07
    187a:	00 97       	sbiw	r24, 0x00	; 0
    187c:	69 f7       	brne	.-38     	; 0x1858 <CLCD_voidSendData+0x2ce>
    187e:	24 c0       	rjmp	.+72     	; 0x18c8 <CLCD_voidSendData+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1880:	68 85       	ldd	r22, Y+8	; 0x08
    1882:	79 85       	ldd	r23, Y+9	; 0x09
    1884:	8a 85       	ldd	r24, Y+10	; 0x0a
    1886:	9b 85       	ldd	r25, Y+11	; 0x0b
    1888:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    188c:	dc 01       	movw	r26, r24
    188e:	cb 01       	movw	r24, r22
    1890:	9f 83       	std	Y+7, r25	; 0x07
    1892:	8e 83       	std	Y+6, r24	; 0x06
    1894:	8e 81       	ldd	r24, Y+6	; 0x06
    1896:	9f 81       	ldd	r25, Y+7	; 0x07
    1898:	9b 83       	std	Y+3, r25	; 0x03
    189a:	8a 83       	std	Y+2, r24	; 0x02
    189c:	8a 81       	ldd	r24, Y+2	; 0x02
    189e:	9b 81       	ldd	r25, Y+3	; 0x03
    18a0:	01 97       	sbiw	r24, 0x01	; 1
    18a2:	f1 f7       	brne	.-4      	; 0x18a0 <CLCD_voidSendData+0x316>
    18a4:	9b 83       	std	Y+3, r25	; 0x03
    18a6:	8a 83       	std	Y+2, r24	; 0x02
    18a8:	0f c0       	rjmp	.+30     	; 0x18c8 <CLCD_voidSendData+0x33e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    18aa:	69 89       	ldd	r22, Y+17	; 0x11
    18ac:	7a 89       	ldd	r23, Y+18	; 0x12
    18ae:	8b 89       	ldd	r24, Y+19	; 0x13
    18b0:	9c 89       	ldd	r25, Y+20	; 0x14
    18b2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18b6:	dc 01       	movw	r26, r24
    18b8:	cb 01       	movw	r24, r22
    18ba:	88 8b       	std	Y+16, r24	; 0x10
    18bc:	88 89       	ldd	r24, Y+16	; 0x10
    18be:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    18c0:	89 81       	ldd	r24, Y+1	; 0x01
    18c2:	8a 95       	dec	r24
    18c4:	f1 f7       	brne	.-4      	; 0x18c2 <CLCD_voidSendData+0x338>
    18c6:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(50);
}
    18c8:	e1 96       	adiw	r28, 0x31	; 49
    18ca:	0f b6       	in	r0, 0x3f	; 63
    18cc:	f8 94       	cli
    18ce:	de bf       	out	0x3e, r29	; 62
    18d0:	0f be       	out	0x3f, r0	; 63
    18d2:	cd bf       	out	0x3d, r28	; 61
    18d4:	cf 91       	pop	r28
    18d6:	df 91       	pop	r29
    18d8:	08 95       	ret

000018da <CLCD_voidSetPosition>:

void CLCD_voidSetPosition(u8 Copy_u8Row, u8 Copy_u8Col)
{
    18da:	df 93       	push	r29
    18dc:	cf 93       	push	r28
    18de:	00 d0       	rcall	.+0      	; 0x18e0 <CLCD_voidSetPosition+0x6>
    18e0:	00 d0       	rcall	.+0      	; 0x18e2 <CLCD_voidSetPosition+0x8>
    18e2:	cd b7       	in	r28, 0x3d	; 61
    18e4:	de b7       	in	r29, 0x3e	; 62
    18e6:	89 83       	std	Y+1, r24	; 0x01
    18e8:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Row)
    18ea:	89 81       	ldd	r24, Y+1	; 0x01
    18ec:	28 2f       	mov	r18, r24
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	3c 83       	std	Y+4, r19	; 0x04
    18f2:	2b 83       	std	Y+3, r18	; 0x03
    18f4:	8b 81       	ldd	r24, Y+3	; 0x03
    18f6:	9c 81       	ldd	r25, Y+4	; 0x04
    18f8:	81 30       	cpi	r24, 0x01	; 1
    18fa:	91 05       	cpc	r25, r1
    18fc:	31 f0       	breq	.+12     	; 0x190a <CLCD_voidSetPosition+0x30>
    18fe:	2b 81       	ldd	r18, Y+3	; 0x03
    1900:	3c 81       	ldd	r19, Y+4	; 0x04
    1902:	22 30       	cpi	r18, 0x02	; 2
    1904:	31 05       	cpc	r19, r1
    1906:	31 f0       	breq	.+12     	; 0x1914 <CLCD_voidSetPosition+0x3a>
    1908:	09 c0       	rjmp	.+18     	; 0x191c <CLCD_voidSetPosition+0x42>
	{
	case CLCD_ROW_1: CLCD_voidSendCommand(FIRST_PLACE_IN_ROW1 + Copy_u8Col - 1);
    190a:	8a 81       	ldd	r24, Y+2	; 0x02
    190c:	81 58       	subi	r24, 0x81	; 129
    190e:	0e 94 1d 09 	call	0x123a	; 0x123a <CLCD_voidSendCommand>
    1912:	04 c0       	rjmp	.+8      	; 0x191c <CLCD_voidSetPosition+0x42>
		break;
	case CLCD_ROW_2: CLCD_voidSendCommand(FIRST_PLACE_IN_ROW2 + Copy_u8Col - 1);
    1914:	8a 81       	ldd	r24, Y+2	; 0x02
    1916:	81 54       	subi	r24, 0x41	; 65
    1918:	0e 94 1d 09 	call	0x123a	; 0x123a <CLCD_voidSendCommand>
		break ;
	default :
		break;
	}
}
    191c:	0f 90       	pop	r0
    191e:	0f 90       	pop	r0
    1920:	0f 90       	pop	r0
    1922:	0f 90       	pop	r0
    1924:	cf 91       	pop	r28
    1926:	df 91       	pop	r29
    1928:	08 95       	ret

0000192a <CLCD_voidSendExtraChar>:

void CLCD_voidSendExtraChar(u8 Copy_u8PatternLocation, u8 * Copy_pu8ExtraChar , u8 Copy_u8Row , u8 Copy_u8Col )
{
    192a:	df 93       	push	r29
    192c:	cf 93       	push	r28
    192e:	cd b7       	in	r28, 0x3d	; 61
    1930:	de b7       	in	r29, 0x3e	; 62
    1932:	27 97       	sbiw	r28, 0x07	; 7
    1934:	0f b6       	in	r0, 0x3f	; 63
    1936:	f8 94       	cli
    1938:	de bf       	out	0x3e, r29	; 62
    193a:	0f be       	out	0x3f, r0	; 63
    193c:	cd bf       	out	0x3d, r28	; 61
    193e:	8b 83       	std	Y+3, r24	; 0x03
    1940:	7d 83       	std	Y+5, r23	; 0x05
    1942:	6c 83       	std	Y+4, r22	; 0x04
    1944:	4e 83       	std	Y+6, r20	; 0x06
    1946:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8Address_INCREMENT = 0 ;
    1948:	1a 82       	std	Y+2, r1	; 0x02
	Local_u8Address_INCREMENT = Copy_u8PatternLocation * PATTERNS_NUM; // Loc * 8 ;
    194a:	8b 81       	ldd	r24, Y+3	; 0x03
    194c:	88 2f       	mov	r24, r24
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	88 0f       	add	r24, r24
    1952:	99 1f       	adc	r25, r25
    1954:	88 0f       	add	r24, r24
    1956:	99 1f       	adc	r25, r25
    1958:	88 0f       	add	r24, r24
    195a:	99 1f       	adc	r25, r25
    195c:	8a 83       	std	Y+2, r24	; 0x02
	/*Go To CGRAM*/
	CLCD_voidSendCommand(FIRST_PLACE_IN_CGRAM + Local_u8Address_INCREMENT );
    195e:	8a 81       	ldd	r24, Y+2	; 0x02
    1960:	80 5c       	subi	r24, 0xC0	; 192
    1962:	0e 94 1d 09 	call	0x123a	; 0x123a <CLCD_voidSendCommand>
	/*Generate Character  inside CGRAM*/
	for(u8 i = 0 ; i < PATTERNS_NUM ; i++)
    1966:	19 82       	std	Y+1, r1	; 0x01
    1968:	0e c0       	rjmp	.+28     	; 0x1986 <CLCD_voidSendExtraChar+0x5c>
	{
		CLCD_voidSendData(Copy_pu8ExtraChar[i]);
    196a:	89 81       	ldd	r24, Y+1	; 0x01
    196c:	28 2f       	mov	r18, r24
    196e:	30 e0       	ldi	r19, 0x00	; 0
    1970:	8c 81       	ldd	r24, Y+4	; 0x04
    1972:	9d 81       	ldd	r25, Y+5	; 0x05
    1974:	fc 01       	movw	r30, r24
    1976:	e2 0f       	add	r30, r18
    1978:	f3 1f       	adc	r31, r19
    197a:	80 81       	ld	r24, Z
    197c:	0e 94 c5 0a 	call	0x158a	; 0x158a <CLCD_voidSendData>
	u8 Local_u8Address_INCREMENT = 0 ;
	Local_u8Address_INCREMENT = Copy_u8PatternLocation * PATTERNS_NUM; // Loc * 8 ;
	/*Go To CGRAM*/
	CLCD_voidSendCommand(FIRST_PLACE_IN_CGRAM + Local_u8Address_INCREMENT );
	/*Generate Character  inside CGRAM*/
	for(u8 i = 0 ; i < PATTERNS_NUM ; i++)
    1980:	89 81       	ldd	r24, Y+1	; 0x01
    1982:	8f 5f       	subi	r24, 0xFF	; 255
    1984:	89 83       	std	Y+1, r24	; 0x01
    1986:	89 81       	ldd	r24, Y+1	; 0x01
    1988:	88 30       	cpi	r24, 0x08	; 8
    198a:	78 f3       	brcs	.-34     	; 0x196a <CLCD_voidSendExtraChar+0x40>
	{
		CLCD_voidSendData(Copy_pu8ExtraChar[i]);
	}
	/*Back to DDRAM */
	CLCD_voidSetPosition(Copy_u8Row , Copy_u8Col);
    198c:	8e 81       	ldd	r24, Y+6	; 0x06
    198e:	6f 81       	ldd	r22, Y+7	; 0x07
    1990:	0e 94 6d 0c 	call	0x18da	; 0x18da <CLCD_voidSetPosition>
	/*Draw Character on display */
	CLCD_voidSendData(Copy_u8PatternLocation);
    1994:	8b 81       	ldd	r24, Y+3	; 0x03
    1996:	0e 94 c5 0a 	call	0x158a	; 0x158a <CLCD_voidSendData>
}
    199a:	27 96       	adiw	r28, 0x07	; 7
    199c:	0f b6       	in	r0, 0x3f	; 63
    199e:	f8 94       	cli
    19a0:	de bf       	out	0x3e, r29	; 62
    19a2:	0f be       	out	0x3f, r0	; 63
    19a4:	cd bf       	out	0x3d, r28	; 61
    19a6:	cf 91       	pop	r28
    19a8:	df 91       	pop	r29
    19aa:	08 95       	ret

000019ac <CLCD_voidStoreExtraChar>:
void CLCD_voidStoreExtraChar(u8 Copy_u8PatternLocation, u8 * Copy_pu8ExtraChar )
{
    19ac:	df 93       	push	r29
    19ae:	cf 93       	push	r28
    19b0:	00 d0       	rcall	.+0      	; 0x19b2 <CLCD_voidStoreExtraChar+0x6>
    19b2:	00 d0       	rcall	.+0      	; 0x19b4 <CLCD_voidStoreExtraChar+0x8>
    19b4:	0f 92       	push	r0
    19b6:	cd b7       	in	r28, 0x3d	; 61
    19b8:	de b7       	in	r29, 0x3e	; 62
    19ba:	8b 83       	std	Y+3, r24	; 0x03
    19bc:	7d 83       	std	Y+5, r23	; 0x05
    19be:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8Address_INCREMENT = 0 ;
    19c0:	1a 82       	std	Y+2, r1	; 0x02
	Local_u8Address_INCREMENT = Copy_u8PatternLocation * PATTERNS_NUM; // Loc * 8 ;
    19c2:	8b 81       	ldd	r24, Y+3	; 0x03
    19c4:	88 2f       	mov	r24, r24
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	88 0f       	add	r24, r24
    19ca:	99 1f       	adc	r25, r25
    19cc:	88 0f       	add	r24, r24
    19ce:	99 1f       	adc	r25, r25
    19d0:	88 0f       	add	r24, r24
    19d2:	99 1f       	adc	r25, r25
    19d4:	8a 83       	std	Y+2, r24	; 0x02
	/*Go To CGRAM*/
	CLCD_voidSendCommand( FIRST_PLACE_IN_CGRAM + Local_u8Address_INCREMENT );
    19d6:	8a 81       	ldd	r24, Y+2	; 0x02
    19d8:	80 5c       	subi	r24, 0xC0	; 192
    19da:	0e 94 1d 09 	call	0x123a	; 0x123a <CLCD_voidSendCommand>
	/*Generate Character  inside CGRAM*/
	for(u8 i = 0 ; i < PATTERNS_NUM ; i++){
    19de:	19 82       	std	Y+1, r1	; 0x01
    19e0:	0e c0       	rjmp	.+28     	; 0x19fe <CLCD_voidStoreExtraChar+0x52>
		CLCD_voidSendData(Copy_pu8ExtraChar[i]);
    19e2:	89 81       	ldd	r24, Y+1	; 0x01
    19e4:	28 2f       	mov	r18, r24
    19e6:	30 e0       	ldi	r19, 0x00	; 0
    19e8:	8c 81       	ldd	r24, Y+4	; 0x04
    19ea:	9d 81       	ldd	r25, Y+5	; 0x05
    19ec:	fc 01       	movw	r30, r24
    19ee:	e2 0f       	add	r30, r18
    19f0:	f3 1f       	adc	r31, r19
    19f2:	80 81       	ld	r24, Z
    19f4:	0e 94 c5 0a 	call	0x158a	; 0x158a <CLCD_voidSendData>
	u8 Local_u8Address_INCREMENT = 0 ;
	Local_u8Address_INCREMENT = Copy_u8PatternLocation * PATTERNS_NUM; // Loc * 8 ;
	/*Go To CGRAM*/
	CLCD_voidSendCommand( FIRST_PLACE_IN_CGRAM + Local_u8Address_INCREMENT );
	/*Generate Character  inside CGRAM*/
	for(u8 i = 0 ; i < PATTERNS_NUM ; i++){
    19f8:	89 81       	ldd	r24, Y+1	; 0x01
    19fa:	8f 5f       	subi	r24, 0xFF	; 255
    19fc:	89 83       	std	Y+1, r24	; 0x01
    19fe:	89 81       	ldd	r24, Y+1	; 0x01
    1a00:	88 30       	cpi	r24, 0x08	; 8
    1a02:	78 f3       	brcs	.-34     	; 0x19e2 <CLCD_voidStoreExtraChar+0x36>
		CLCD_voidSendData(Copy_pu8ExtraChar[i]);
	}
}
    1a04:	0f 90       	pop	r0
    1a06:	0f 90       	pop	r0
    1a08:	0f 90       	pop	r0
    1a0a:	0f 90       	pop	r0
    1a0c:	0f 90       	pop	r0
    1a0e:	cf 91       	pop	r28
    1a10:	df 91       	pop	r29
    1a12:	08 95       	ret

00001a14 <CLCD_voidSendString>:
void CLCD_voidSendString(u8 *Copy_pu8String )
{
    1a14:	df 93       	push	r29
    1a16:	cf 93       	push	r28
    1a18:	cd b7       	in	r28, 0x3d	; 61
    1a1a:	de b7       	in	r29, 0x3e	; 62
    1a1c:	61 97       	sbiw	r28, 0x11	; 17
    1a1e:	0f b6       	in	r0, 0x3f	; 63
    1a20:	f8 94       	cli
    1a22:	de bf       	out	0x3e, r29	; 62
    1a24:	0f be       	out	0x3f, r0	; 63
    1a26:	cd bf       	out	0x3d, r28	; 61
    1a28:	99 8b       	std	Y+17, r25	; 0x11
    1a2a:	88 8b       	std	Y+16, r24	; 0x10
	u8 Local_u8Iterator = 0 ;
    1a2c:	1f 86       	std	Y+15, r1	; 0x0f
    1a2e:	80 c0       	rjmp	.+256    	; 0x1b30 <CLCD_voidSendString+0x11c>
	while(Copy_pu8String[Local_u8Iterator] != '\0')
	{
		CLCD_voidSendData(Copy_pu8String[Local_u8Iterator]);
    1a30:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a32:	28 2f       	mov	r18, r24
    1a34:	30 e0       	ldi	r19, 0x00	; 0
    1a36:	88 89       	ldd	r24, Y+16	; 0x10
    1a38:	99 89       	ldd	r25, Y+17	; 0x11
    1a3a:	fc 01       	movw	r30, r24
    1a3c:	e2 0f       	add	r30, r18
    1a3e:	f3 1f       	adc	r31, r19
    1a40:	80 81       	ld	r24, Z
    1a42:	0e 94 c5 0a 	call	0x158a	; 0x158a <CLCD_voidSendData>
		Local_u8Iterator ++ ;
    1a46:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a48:	8f 5f       	subi	r24, 0xFF	; 255
    1a4a:	8f 87       	std	Y+15, r24	; 0x0f
    1a4c:	80 e0       	ldi	r24, 0x00	; 0
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	a0 e0       	ldi	r26, 0x00	; 0
    1a52:	b0 e4       	ldi	r27, 0x40	; 64
    1a54:	8b 87       	std	Y+11, r24	; 0x0b
    1a56:	9c 87       	std	Y+12, r25	; 0x0c
    1a58:	ad 87       	std	Y+13, r26	; 0x0d
    1a5a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a5c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a5e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a60:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a62:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a64:	20 e0       	ldi	r18, 0x00	; 0
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	4a ef       	ldi	r20, 0xFA	; 250
    1a6a:	54 e4       	ldi	r21, 0x44	; 68
    1a6c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a70:	dc 01       	movw	r26, r24
    1a72:	cb 01       	movw	r24, r22
    1a74:	8f 83       	std	Y+7, r24	; 0x07
    1a76:	98 87       	std	Y+8, r25	; 0x08
    1a78:	a9 87       	std	Y+9, r26	; 0x09
    1a7a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a7c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a7e:	78 85       	ldd	r23, Y+8	; 0x08
    1a80:	89 85       	ldd	r24, Y+9	; 0x09
    1a82:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a84:	20 e0       	ldi	r18, 0x00	; 0
    1a86:	30 e0       	ldi	r19, 0x00	; 0
    1a88:	40 e8       	ldi	r20, 0x80	; 128
    1a8a:	5f e3       	ldi	r21, 0x3F	; 63
    1a8c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1a90:	88 23       	and	r24, r24
    1a92:	2c f4       	brge	.+10     	; 0x1a9e <CLCD_voidSendString+0x8a>
		__ticks = 1;
    1a94:	81 e0       	ldi	r24, 0x01	; 1
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	9e 83       	std	Y+6, r25	; 0x06
    1a9a:	8d 83       	std	Y+5, r24	; 0x05
    1a9c:	3f c0       	rjmp	.+126    	; 0x1b1c <CLCD_voidSendString+0x108>
	else if (__tmp > 65535)
    1a9e:	6f 81       	ldd	r22, Y+7	; 0x07
    1aa0:	78 85       	ldd	r23, Y+8	; 0x08
    1aa2:	89 85       	ldd	r24, Y+9	; 0x09
    1aa4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aa6:	20 e0       	ldi	r18, 0x00	; 0
    1aa8:	3f ef       	ldi	r19, 0xFF	; 255
    1aaa:	4f e7       	ldi	r20, 0x7F	; 127
    1aac:	57 e4       	ldi	r21, 0x47	; 71
    1aae:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1ab2:	18 16       	cp	r1, r24
    1ab4:	4c f5       	brge	.+82     	; 0x1b08 <CLCD_voidSendString+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ab6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ab8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aba:	8d 85       	ldd	r24, Y+13	; 0x0d
    1abc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1abe:	20 e0       	ldi	r18, 0x00	; 0
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	40 e2       	ldi	r20, 0x20	; 32
    1ac4:	51 e4       	ldi	r21, 0x41	; 65
    1ac6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1aca:	dc 01       	movw	r26, r24
    1acc:	cb 01       	movw	r24, r22
    1ace:	bc 01       	movw	r22, r24
    1ad0:	cd 01       	movw	r24, r26
    1ad2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ad6:	dc 01       	movw	r26, r24
    1ad8:	cb 01       	movw	r24, r22
    1ada:	9e 83       	std	Y+6, r25	; 0x06
    1adc:	8d 83       	std	Y+5, r24	; 0x05
    1ade:	0f c0       	rjmp	.+30     	; 0x1afe <CLCD_voidSendString+0xea>
    1ae0:	88 ec       	ldi	r24, 0xC8	; 200
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	9c 83       	std	Y+4, r25	; 0x04
    1ae6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ae8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aea:	9c 81       	ldd	r25, Y+4	; 0x04
    1aec:	01 97       	sbiw	r24, 0x01	; 1
    1aee:	f1 f7       	brne	.-4      	; 0x1aec <CLCD_voidSendString+0xd8>
    1af0:	9c 83       	std	Y+4, r25	; 0x04
    1af2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1af4:	8d 81       	ldd	r24, Y+5	; 0x05
    1af6:	9e 81       	ldd	r25, Y+6	; 0x06
    1af8:	01 97       	sbiw	r24, 0x01	; 1
    1afa:	9e 83       	std	Y+6, r25	; 0x06
    1afc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1afe:	8d 81       	ldd	r24, Y+5	; 0x05
    1b00:	9e 81       	ldd	r25, Y+6	; 0x06
    1b02:	00 97       	sbiw	r24, 0x00	; 0
    1b04:	69 f7       	brne	.-38     	; 0x1ae0 <CLCD_voidSendString+0xcc>
    1b06:	14 c0       	rjmp	.+40     	; 0x1b30 <CLCD_voidSendString+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b08:	6f 81       	ldd	r22, Y+7	; 0x07
    1b0a:	78 85       	ldd	r23, Y+8	; 0x08
    1b0c:	89 85       	ldd	r24, Y+9	; 0x09
    1b0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b10:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b14:	dc 01       	movw	r26, r24
    1b16:	cb 01       	movw	r24, r22
    1b18:	9e 83       	std	Y+6, r25	; 0x06
    1b1a:	8d 83       	std	Y+5, r24	; 0x05
    1b1c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b1e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b20:	9a 83       	std	Y+2, r25	; 0x02
    1b22:	89 83       	std	Y+1, r24	; 0x01
    1b24:	89 81       	ldd	r24, Y+1	; 0x01
    1b26:	9a 81       	ldd	r25, Y+2	; 0x02
    1b28:	01 97       	sbiw	r24, 0x01	; 1
    1b2a:	f1 f7       	brne	.-4      	; 0x1b28 <CLCD_voidSendString+0x114>
    1b2c:	9a 83       	std	Y+2, r25	; 0x02
    1b2e:	89 83       	std	Y+1, r24	; 0x01
	}
}
void CLCD_voidSendString(u8 *Copy_pu8String )
{
	u8 Local_u8Iterator = 0 ;
	while(Copy_pu8String[Local_u8Iterator] != '\0')
    1b30:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b32:	28 2f       	mov	r18, r24
    1b34:	30 e0       	ldi	r19, 0x00	; 0
    1b36:	88 89       	ldd	r24, Y+16	; 0x10
    1b38:	99 89       	ldd	r25, Y+17	; 0x11
    1b3a:	fc 01       	movw	r30, r24
    1b3c:	e2 0f       	add	r30, r18
    1b3e:	f3 1f       	adc	r31, r19
    1b40:	80 81       	ld	r24, Z
    1b42:	88 23       	and	r24, r24
    1b44:	09 f0       	breq	.+2      	; 0x1b48 <CLCD_voidSendString+0x134>
    1b46:	74 cf       	rjmp	.-280    	; 0x1a30 <CLCD_voidSendString+0x1c>
	{
		CLCD_voidSendData(Copy_pu8String[Local_u8Iterator]);
		Local_u8Iterator ++ ;
		_delay_ms(2);
	}
}
    1b48:	61 96       	adiw	r28, 0x11	; 17
    1b4a:	0f b6       	in	r0, 0x3f	; 63
    1b4c:	f8 94       	cli
    1b4e:	de bf       	out	0x3e, r29	; 62
    1b50:	0f be       	out	0x3f, r0	; 63
    1b52:	cd bf       	out	0x3d, r28	; 61
    1b54:	cf 91       	pop	r28
    1b56:	df 91       	pop	r29
    1b58:	08 95       	ret

00001b5a <CLCD_voidSendu32Number>:

void CLCD_voidSendu32Number(u32 Copy_u32Number){
    1b5a:	df 93       	push	r29
    1b5c:	cf 93       	push	r28
    1b5e:	cd b7       	in	r28, 0x3d	; 61
    1b60:	de b7       	in	r29, 0x3e	; 62
    1b62:	62 97       	sbiw	r28, 0x12	; 18
    1b64:	0f b6       	in	r0, 0x3f	; 63
    1b66:	f8 94       	cli
    1b68:	de bf       	out	0x3e, r29	; 62
    1b6a:	0f be       	out	0x3f, r0	; 63
    1b6c:	cd bf       	out	0x3d, r28	; 61
    1b6e:	9a 8b       	std	Y+18, r25	; 0x12
    1b70:	89 8b       	std	Y+17, r24	; 0x11
	if(Copy_u32Number!=0)
    1b72:	89 89       	ldd	r24, Y+17	; 0x11
    1b74:	9a 89       	ldd	r25, Y+18	; 0x12
    1b76:	00 97       	sbiw	r24, 0x00	; 0
    1b78:	09 f4       	brne	.+2      	; 0x1b7c <CLCD_voidSendu32Number+0x22>
    1b7a:	85 c0       	rjmp	.+266    	; 0x1c86 <CLCD_voidSendu32Number+0x12c>
	{
		u8 arr[11];
		u32 temp;
		u8 Local_u8Iterator=0,Itr1=0,Itr2=0;
    1b7c:	1b 82       	std	Y+3, r1	; 0x03
    1b7e:	1a 82       	std	Y+2, r1	; 0x02
    1b80:	19 82       	std	Y+1, r1	; 0x01
    1b82:	20 c0       	rjmp	.+64     	; 0x1bc4 <CLCD_voidSendu32Number+0x6a>
		while(Copy_u32Number!=0)
		{
			temp=Copy_u32Number%10;
    1b84:	89 89       	ldd	r24, Y+17	; 0x11
    1b86:	9a 89       	ldd	r25, Y+18	; 0x12
    1b88:	2a e0       	ldi	r18, 0x0A	; 10
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	b9 01       	movw	r22, r18
    1b8e:	0e 94 89 16 	call	0x2d12	; 0x2d12 <__udivmodhi4>
    1b92:	9d 83       	std	Y+5, r25	; 0x05
    1b94:	8c 83       	std	Y+4, r24	; 0x04
			arr[Local_u8Iterator]=temp;
    1b96:	8b 81       	ldd	r24, Y+3	; 0x03
    1b98:	28 2f       	mov	r18, r24
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	4c 81       	ldd	r20, Y+4	; 0x04
    1b9e:	ce 01       	movw	r24, r28
    1ba0:	06 96       	adiw	r24, 0x06	; 6
    1ba2:	fc 01       	movw	r30, r24
    1ba4:	e2 0f       	add	r30, r18
    1ba6:	f3 1f       	adc	r31, r19
    1ba8:	40 83       	st	Z, r20
			Local_u8Iterator++;
    1baa:	8b 81       	ldd	r24, Y+3	; 0x03
    1bac:	8f 5f       	subi	r24, 0xFF	; 255
    1bae:	8b 83       	std	Y+3, r24	; 0x03
			Copy_u32Number/=10;
    1bb0:	89 89       	ldd	r24, Y+17	; 0x11
    1bb2:	9a 89       	ldd	r25, Y+18	; 0x12
    1bb4:	2a e0       	ldi	r18, 0x0A	; 10
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	b9 01       	movw	r22, r18
    1bba:	0e 94 89 16 	call	0x2d12	; 0x2d12 <__udivmodhi4>
    1bbe:	cb 01       	movw	r24, r22
    1bc0:	9a 8b       	std	Y+18, r25	; 0x12
    1bc2:	89 8b       	std	Y+17, r24	; 0x11
	if(Copy_u32Number!=0)
	{
		u8 arr[11];
		u32 temp;
		u8 Local_u8Iterator=0,Itr1=0,Itr2=0;
		while(Copy_u32Number!=0)
    1bc4:	89 89       	ldd	r24, Y+17	; 0x11
    1bc6:	9a 89       	ldd	r25, Y+18	; 0x12
    1bc8:	00 97       	sbiw	r24, 0x00	; 0
    1bca:	e1 f6       	brne	.-72     	; 0x1b84 <CLCD_voidSendu32Number+0x2a>
			temp=Copy_u32Number%10;
			arr[Local_u8Iterator]=temp;
			Local_u8Iterator++;
			Copy_u32Number/=10;
		}
		arr[Local_u8Iterator]='x';
    1bcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bce:	28 2f       	mov	r18, r24
    1bd0:	30 e0       	ldi	r19, 0x00	; 0
    1bd2:	ce 01       	movw	r24, r28
    1bd4:	06 96       	adiw	r24, 0x06	; 6
    1bd6:	fc 01       	movw	r30, r24
    1bd8:	e2 0f       	add	r30, r18
    1bda:	f3 1f       	adc	r31, r19
    1bdc:	88 e7       	ldi	r24, 0x78	; 120
    1bde:	80 83       	st	Z, r24
		Local_u8Iterator--;
    1be0:	8b 81       	ldd	r24, Y+3	; 0x03
    1be2:	81 50       	subi	r24, 0x01	; 1
    1be4:	8b 83       	std	Y+3, r24	; 0x03
    1be6:	2f c0       	rjmp	.+94     	; 0x1c46 <CLCD_voidSendu32Number+0xec>
		while(Itr1<Local_u8Iterator)
		{
			temp=arr[Itr1];
    1be8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bea:	28 2f       	mov	r18, r24
    1bec:	30 e0       	ldi	r19, 0x00	; 0
    1bee:	ce 01       	movw	r24, r28
    1bf0:	06 96       	adiw	r24, 0x06	; 6
    1bf2:	fc 01       	movw	r30, r24
    1bf4:	e2 0f       	add	r30, r18
    1bf6:	f3 1f       	adc	r31, r19
    1bf8:	80 81       	ld	r24, Z
    1bfa:	88 2f       	mov	r24, r24
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	9d 83       	std	Y+5, r25	; 0x05
    1c00:	8c 83       	std	Y+4, r24	; 0x04
			arr[Itr1]=arr[Local_u8Iterator];
    1c02:	8a 81       	ldd	r24, Y+2	; 0x02
    1c04:	48 2f       	mov	r20, r24
    1c06:	50 e0       	ldi	r21, 0x00	; 0
    1c08:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0a:	28 2f       	mov	r18, r24
    1c0c:	30 e0       	ldi	r19, 0x00	; 0
    1c0e:	ce 01       	movw	r24, r28
    1c10:	06 96       	adiw	r24, 0x06	; 6
    1c12:	fc 01       	movw	r30, r24
    1c14:	e2 0f       	add	r30, r18
    1c16:	f3 1f       	adc	r31, r19
    1c18:	20 81       	ld	r18, Z
    1c1a:	ce 01       	movw	r24, r28
    1c1c:	06 96       	adiw	r24, 0x06	; 6
    1c1e:	fc 01       	movw	r30, r24
    1c20:	e4 0f       	add	r30, r20
    1c22:	f5 1f       	adc	r31, r21
    1c24:	20 83       	st	Z, r18
			arr[Local_u8Iterator]=temp;
    1c26:	8b 81       	ldd	r24, Y+3	; 0x03
    1c28:	28 2f       	mov	r18, r24
    1c2a:	30 e0       	ldi	r19, 0x00	; 0
    1c2c:	4c 81       	ldd	r20, Y+4	; 0x04
    1c2e:	ce 01       	movw	r24, r28
    1c30:	06 96       	adiw	r24, 0x06	; 6
    1c32:	fc 01       	movw	r30, r24
    1c34:	e2 0f       	add	r30, r18
    1c36:	f3 1f       	adc	r31, r19
    1c38:	40 83       	st	Z, r20
			Itr1++;
    1c3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3c:	8f 5f       	subi	r24, 0xFF	; 255
    1c3e:	8a 83       	std	Y+2, r24	; 0x02
			Local_u8Iterator--;
    1c40:	8b 81       	ldd	r24, Y+3	; 0x03
    1c42:	81 50       	subi	r24, 0x01	; 1
    1c44:	8b 83       	std	Y+3, r24	; 0x03
			Local_u8Iterator++;
			Copy_u32Number/=10;
		}
		arr[Local_u8Iterator]='x';
		Local_u8Iterator--;
		while(Itr1<Local_u8Iterator)
    1c46:	9a 81       	ldd	r25, Y+2	; 0x02
    1c48:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4a:	98 17       	cp	r25, r24
    1c4c:	68 f2       	brcs	.-102    	; 0x1be8 <CLCD_voidSendu32Number+0x8e>
    1c4e:	0f c0       	rjmp	.+30     	; 0x1c6e <CLCD_voidSendu32Number+0x114>
			Itr1++;
			Local_u8Iterator--;
		}
		while(arr[Itr2]!='x')
		{
			CLCD_voidSendData(arr[Itr2]+'0');
    1c50:	89 81       	ldd	r24, Y+1	; 0x01
    1c52:	28 2f       	mov	r18, r24
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	ce 01       	movw	r24, r28
    1c58:	06 96       	adiw	r24, 0x06	; 6
    1c5a:	fc 01       	movw	r30, r24
    1c5c:	e2 0f       	add	r30, r18
    1c5e:	f3 1f       	adc	r31, r19
    1c60:	80 81       	ld	r24, Z
    1c62:	80 5d       	subi	r24, 0xD0	; 208
    1c64:	0e 94 c5 0a 	call	0x158a	; 0x158a <CLCD_voidSendData>
			Itr2++;
    1c68:	89 81       	ldd	r24, Y+1	; 0x01
    1c6a:	8f 5f       	subi	r24, 0xFF	; 255
    1c6c:	89 83       	std	Y+1, r24	; 0x01
			arr[Itr1]=arr[Local_u8Iterator];
			arr[Local_u8Iterator]=temp;
			Itr1++;
			Local_u8Iterator--;
		}
		while(arr[Itr2]!='x')
    1c6e:	89 81       	ldd	r24, Y+1	; 0x01
    1c70:	28 2f       	mov	r18, r24
    1c72:	30 e0       	ldi	r19, 0x00	; 0
    1c74:	ce 01       	movw	r24, r28
    1c76:	06 96       	adiw	r24, 0x06	; 6
    1c78:	fc 01       	movw	r30, r24
    1c7a:	e2 0f       	add	r30, r18
    1c7c:	f3 1f       	adc	r31, r19
    1c7e:	80 81       	ld	r24, Z
    1c80:	88 37       	cpi	r24, 0x78	; 120
    1c82:	31 f7       	brne	.-52     	; 0x1c50 <CLCD_voidSendu32Number+0xf6>
    1c84:	03 c0       	rjmp	.+6      	; 0x1c8c <CLCD_voidSendu32Number+0x132>
			CLCD_voidSendData(arr[Itr2]+'0');
			Itr2++;
		}
	}
	else{
		CLCD_voidSendData('0');
    1c86:	80 e3       	ldi	r24, 0x30	; 48
    1c88:	0e 94 c5 0a 	call	0x158a	; 0x158a <CLCD_voidSendData>
	}
}
    1c8c:	62 96       	adiw	r28, 0x12	; 18
    1c8e:	0f b6       	in	r0, 0x3f	; 63
    1c90:	f8 94       	cli
    1c92:	de bf       	out	0x3e, r29	; 62
    1c94:	0f be       	out	0x3f, r0	; 63
    1c96:	cd bf       	out	0x3d, r28	; 61
    1c98:	cf 91       	pop	r28
    1c9a:	df 91       	pop	r29
    1c9c:	08 95       	ret

00001c9e <CLCD_voidCLearDisplay>:
void CLCD_voidCLearDisplay(void){
    1c9e:	df 93       	push	r29
    1ca0:	cf 93       	push	r28
    1ca2:	cd b7       	in	r28, 0x3d	; 61
    1ca4:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidSendCommand(CLCD_CLR_DISPLAY);
    1ca6:	81 e0       	ldi	r24, 0x01	; 1
    1ca8:	0e 94 1d 09 	call	0x123a	; 0x123a <CLCD_voidSendCommand>
}
    1cac:	cf 91       	pop	r28
    1cae:	df 91       	pop	r29
    1cb0:	08 95       	ret

00001cb2 <DIO_voidSetupPinDirection>:
#include "DIO_register.h"
#include "DIO_private.h"
#include "DIO_config.h"


void DIO_voidSetupPinDirection(u8 copy_u8PortID,u8 copy_u8PinID,u8 copy_u8Directoin){
    1cb2:	df 93       	push	r29
    1cb4:	cf 93       	push	r28
    1cb6:	cd b7       	in	r28, 0x3d	; 61
    1cb8:	de b7       	in	r29, 0x3e	; 62
    1cba:	29 97       	sbiw	r28, 0x09	; 9
    1cbc:	0f b6       	in	r0, 0x3f	; 63
    1cbe:	f8 94       	cli
    1cc0:	de bf       	out	0x3e, r29	; 62
    1cc2:	0f be       	out	0x3f, r0	; 63
    1cc4:	cd bf       	out	0x3d, r28	; 61
    1cc6:	89 83       	std	Y+1, r24	; 0x01
    1cc8:	6a 83       	std	Y+2, r22	; 0x02
    1cca:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8Directoin > 2){
		/* Do Nothing */
	}
	switch (copy_u8Directoin){
    1ccc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cce:	28 2f       	mov	r18, r24
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	39 87       	std	Y+9, r19	; 0x09
    1cd4:	28 87       	std	Y+8, r18	; 0x08
    1cd6:	88 85       	ldd	r24, Y+8	; 0x08
    1cd8:	99 85       	ldd	r25, Y+9	; 0x09
    1cda:	00 97       	sbiw	r24, 0x00	; 0
    1cdc:	09 f4       	brne	.+2      	; 0x1ce0 <DIO_voidSetupPinDirection+0x2e>
    1cde:	75 c0       	rjmp	.+234    	; 0x1dca <DIO_voidSetupPinDirection+0x118>
    1ce0:	28 85       	ldd	r18, Y+8	; 0x08
    1ce2:	39 85       	ldd	r19, Y+9	; 0x09
    1ce4:	21 30       	cpi	r18, 0x01	; 1
    1ce6:	31 05       	cpc	r19, r1
    1ce8:	09 f0       	breq	.+2      	; 0x1cec <DIO_voidSetupPinDirection+0x3a>
    1cea:	e2 c0       	rjmp	.+452    	; 0x1eb0 <DIO_voidSetupPinDirection+0x1fe>
	case DIO_OUTPUT :
		switch(copy_u8PortID)
    1cec:	89 81       	ldd	r24, Y+1	; 0x01
    1cee:	28 2f       	mov	r18, r24
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	3f 83       	std	Y+7, r19	; 0x07
    1cf4:	2e 83       	std	Y+6, r18	; 0x06
    1cf6:	8e 81       	ldd	r24, Y+6	; 0x06
    1cf8:	9f 81       	ldd	r25, Y+7	; 0x07
    1cfa:	81 30       	cpi	r24, 0x01	; 1
    1cfc:	91 05       	cpc	r25, r1
    1cfe:	49 f1       	breq	.+82     	; 0x1d52 <DIO_voidSetupPinDirection+0xa0>
    1d00:	2e 81       	ldd	r18, Y+6	; 0x06
    1d02:	3f 81       	ldd	r19, Y+7	; 0x07
    1d04:	22 30       	cpi	r18, 0x02	; 2
    1d06:	31 05       	cpc	r19, r1
    1d08:	2c f4       	brge	.+10     	; 0x1d14 <DIO_voidSetupPinDirection+0x62>
    1d0a:	8e 81       	ldd	r24, Y+6	; 0x06
    1d0c:	9f 81       	ldd	r25, Y+7	; 0x07
    1d0e:	00 97       	sbiw	r24, 0x00	; 0
    1d10:	61 f0       	breq	.+24     	; 0x1d2a <DIO_voidSetupPinDirection+0x78>
    1d12:	ce c0       	rjmp	.+412    	; 0x1eb0 <DIO_voidSetupPinDirection+0x1fe>
    1d14:	2e 81       	ldd	r18, Y+6	; 0x06
    1d16:	3f 81       	ldd	r19, Y+7	; 0x07
    1d18:	22 30       	cpi	r18, 0x02	; 2
    1d1a:	31 05       	cpc	r19, r1
    1d1c:	71 f1       	breq	.+92     	; 0x1d7a <DIO_voidSetupPinDirection+0xc8>
    1d1e:	8e 81       	ldd	r24, Y+6	; 0x06
    1d20:	9f 81       	ldd	r25, Y+7	; 0x07
    1d22:	83 30       	cpi	r24, 0x03	; 3
    1d24:	91 05       	cpc	r25, r1
    1d26:	e9 f1       	breq	.+122    	; 0x1da2 <DIO_voidSetupPinDirection+0xf0>
    1d28:	c3 c0       	rjmp	.+390    	; 0x1eb0 <DIO_voidSetupPinDirection+0x1fe>
		{
		case DIO_PORTA :
			SET_BIT(DDRA_REG,copy_u8PinID);
    1d2a:	aa e3       	ldi	r26, 0x3A	; 58
    1d2c:	b0 e0       	ldi	r27, 0x00	; 0
    1d2e:	ea e3       	ldi	r30, 0x3A	; 58
    1d30:	f0 e0       	ldi	r31, 0x00	; 0
    1d32:	80 81       	ld	r24, Z
    1d34:	48 2f       	mov	r20, r24
    1d36:	8a 81       	ldd	r24, Y+2	; 0x02
    1d38:	28 2f       	mov	r18, r24
    1d3a:	30 e0       	ldi	r19, 0x00	; 0
    1d3c:	81 e0       	ldi	r24, 0x01	; 1
    1d3e:	90 e0       	ldi	r25, 0x00	; 0
    1d40:	02 2e       	mov	r0, r18
    1d42:	02 c0       	rjmp	.+4      	; 0x1d48 <DIO_voidSetupPinDirection+0x96>
    1d44:	88 0f       	add	r24, r24
    1d46:	99 1f       	adc	r25, r25
    1d48:	0a 94       	dec	r0
    1d4a:	e2 f7       	brpl	.-8      	; 0x1d44 <DIO_voidSetupPinDirection+0x92>
    1d4c:	84 2b       	or	r24, r20
    1d4e:	8c 93       	st	X, r24
    1d50:	af c0       	rjmp	.+350    	; 0x1eb0 <DIO_voidSetupPinDirection+0x1fe>
			break;
		case DIO_PORTB :
			SET_BIT(DDRB_REG,copy_u8PinID);
    1d52:	a7 e3       	ldi	r26, 0x37	; 55
    1d54:	b0 e0       	ldi	r27, 0x00	; 0
    1d56:	e7 e3       	ldi	r30, 0x37	; 55
    1d58:	f0 e0       	ldi	r31, 0x00	; 0
    1d5a:	80 81       	ld	r24, Z
    1d5c:	48 2f       	mov	r20, r24
    1d5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d60:	28 2f       	mov	r18, r24
    1d62:	30 e0       	ldi	r19, 0x00	; 0
    1d64:	81 e0       	ldi	r24, 0x01	; 1
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	02 2e       	mov	r0, r18
    1d6a:	02 c0       	rjmp	.+4      	; 0x1d70 <DIO_voidSetupPinDirection+0xbe>
    1d6c:	88 0f       	add	r24, r24
    1d6e:	99 1f       	adc	r25, r25
    1d70:	0a 94       	dec	r0
    1d72:	e2 f7       	brpl	.-8      	; 0x1d6c <DIO_voidSetupPinDirection+0xba>
    1d74:	84 2b       	or	r24, r20
    1d76:	8c 93       	st	X, r24
    1d78:	9b c0       	rjmp	.+310    	; 0x1eb0 <DIO_voidSetupPinDirection+0x1fe>
			break;
		case DIO_PORTC :
			SET_BIT(DDRC_REG,copy_u8PinID);
    1d7a:	a4 e3       	ldi	r26, 0x34	; 52
    1d7c:	b0 e0       	ldi	r27, 0x00	; 0
    1d7e:	e4 e3       	ldi	r30, 0x34	; 52
    1d80:	f0 e0       	ldi	r31, 0x00	; 0
    1d82:	80 81       	ld	r24, Z
    1d84:	48 2f       	mov	r20, r24
    1d86:	8a 81       	ldd	r24, Y+2	; 0x02
    1d88:	28 2f       	mov	r18, r24
    1d8a:	30 e0       	ldi	r19, 0x00	; 0
    1d8c:	81 e0       	ldi	r24, 0x01	; 1
    1d8e:	90 e0       	ldi	r25, 0x00	; 0
    1d90:	02 2e       	mov	r0, r18
    1d92:	02 c0       	rjmp	.+4      	; 0x1d98 <DIO_voidSetupPinDirection+0xe6>
    1d94:	88 0f       	add	r24, r24
    1d96:	99 1f       	adc	r25, r25
    1d98:	0a 94       	dec	r0
    1d9a:	e2 f7       	brpl	.-8      	; 0x1d94 <DIO_voidSetupPinDirection+0xe2>
    1d9c:	84 2b       	or	r24, r20
    1d9e:	8c 93       	st	X, r24
    1da0:	87 c0       	rjmp	.+270    	; 0x1eb0 <DIO_voidSetupPinDirection+0x1fe>
			break;
		case DIO_PORTD :
			SET_BIT(DDRD_REG,copy_u8PinID);
    1da2:	a1 e3       	ldi	r26, 0x31	; 49
    1da4:	b0 e0       	ldi	r27, 0x00	; 0
    1da6:	e1 e3       	ldi	r30, 0x31	; 49
    1da8:	f0 e0       	ldi	r31, 0x00	; 0
    1daa:	80 81       	ld	r24, Z
    1dac:	48 2f       	mov	r20, r24
    1dae:	8a 81       	ldd	r24, Y+2	; 0x02
    1db0:	28 2f       	mov	r18, r24
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	81 e0       	ldi	r24, 0x01	; 1
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	02 2e       	mov	r0, r18
    1dba:	02 c0       	rjmp	.+4      	; 0x1dc0 <DIO_voidSetupPinDirection+0x10e>
    1dbc:	88 0f       	add	r24, r24
    1dbe:	99 1f       	adc	r25, r25
    1dc0:	0a 94       	dec	r0
    1dc2:	e2 f7       	brpl	.-8      	; 0x1dbc <DIO_voidSetupPinDirection+0x10a>
    1dc4:	84 2b       	or	r24, r20
    1dc6:	8c 93       	st	X, r24
    1dc8:	73 c0       	rjmp	.+230    	; 0x1eb0 <DIO_voidSetupPinDirection+0x1fe>
		}
		break;


		case DIO_INPUT :
			switch(copy_u8PortID){
    1dca:	89 81       	ldd	r24, Y+1	; 0x01
    1dcc:	28 2f       	mov	r18, r24
    1dce:	30 e0       	ldi	r19, 0x00	; 0
    1dd0:	3d 83       	std	Y+5, r19	; 0x05
    1dd2:	2c 83       	std	Y+4, r18	; 0x04
    1dd4:	8c 81       	ldd	r24, Y+4	; 0x04
    1dd6:	9d 81       	ldd	r25, Y+5	; 0x05
    1dd8:	81 30       	cpi	r24, 0x01	; 1
    1dda:	91 05       	cpc	r25, r1
    1ddc:	59 f1       	breq	.+86     	; 0x1e34 <DIO_voidSetupPinDirection+0x182>
    1dde:	2c 81       	ldd	r18, Y+4	; 0x04
    1de0:	3d 81       	ldd	r19, Y+5	; 0x05
    1de2:	22 30       	cpi	r18, 0x02	; 2
    1de4:	31 05       	cpc	r19, r1
    1de6:	2c f4       	brge	.+10     	; 0x1df2 <DIO_voidSetupPinDirection+0x140>
    1de8:	8c 81       	ldd	r24, Y+4	; 0x04
    1dea:	9d 81       	ldd	r25, Y+5	; 0x05
    1dec:	00 97       	sbiw	r24, 0x00	; 0
    1dee:	69 f0       	breq	.+26     	; 0x1e0a <DIO_voidSetupPinDirection+0x158>
    1df0:	5f c0       	rjmp	.+190    	; 0x1eb0 <DIO_voidSetupPinDirection+0x1fe>
    1df2:	2c 81       	ldd	r18, Y+4	; 0x04
    1df4:	3d 81       	ldd	r19, Y+5	; 0x05
    1df6:	22 30       	cpi	r18, 0x02	; 2
    1df8:	31 05       	cpc	r19, r1
    1dfa:	89 f1       	breq	.+98     	; 0x1e5e <DIO_voidSetupPinDirection+0x1ac>
    1dfc:	8c 81       	ldd	r24, Y+4	; 0x04
    1dfe:	9d 81       	ldd	r25, Y+5	; 0x05
    1e00:	83 30       	cpi	r24, 0x03	; 3
    1e02:	91 05       	cpc	r25, r1
    1e04:	09 f4       	brne	.+2      	; 0x1e08 <DIO_voidSetupPinDirection+0x156>
    1e06:	40 c0       	rjmp	.+128    	; 0x1e88 <DIO_voidSetupPinDirection+0x1d6>
    1e08:	53 c0       	rjmp	.+166    	; 0x1eb0 <DIO_voidSetupPinDirection+0x1fe>
			case DIO_PORTA :
				CLR_BIT(DDRA_REG,copy_u8PinID);
    1e0a:	aa e3       	ldi	r26, 0x3A	; 58
    1e0c:	b0 e0       	ldi	r27, 0x00	; 0
    1e0e:	ea e3       	ldi	r30, 0x3A	; 58
    1e10:	f0 e0       	ldi	r31, 0x00	; 0
    1e12:	80 81       	ld	r24, Z
    1e14:	48 2f       	mov	r20, r24
    1e16:	8a 81       	ldd	r24, Y+2	; 0x02
    1e18:	28 2f       	mov	r18, r24
    1e1a:	30 e0       	ldi	r19, 0x00	; 0
    1e1c:	81 e0       	ldi	r24, 0x01	; 1
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	02 2e       	mov	r0, r18
    1e22:	02 c0       	rjmp	.+4      	; 0x1e28 <DIO_voidSetupPinDirection+0x176>
    1e24:	88 0f       	add	r24, r24
    1e26:	99 1f       	adc	r25, r25
    1e28:	0a 94       	dec	r0
    1e2a:	e2 f7       	brpl	.-8      	; 0x1e24 <DIO_voidSetupPinDirection+0x172>
    1e2c:	80 95       	com	r24
    1e2e:	84 23       	and	r24, r20
    1e30:	8c 93       	st	X, r24
    1e32:	3e c0       	rjmp	.+124    	; 0x1eb0 <DIO_voidSetupPinDirection+0x1fe>
				break;
			case DIO_PORTB :
				CLR_BIT(DDRB_REG,copy_u8PinID);
    1e34:	a7 e3       	ldi	r26, 0x37	; 55
    1e36:	b0 e0       	ldi	r27, 0x00	; 0
    1e38:	e7 e3       	ldi	r30, 0x37	; 55
    1e3a:	f0 e0       	ldi	r31, 0x00	; 0
    1e3c:	80 81       	ld	r24, Z
    1e3e:	48 2f       	mov	r20, r24
    1e40:	8a 81       	ldd	r24, Y+2	; 0x02
    1e42:	28 2f       	mov	r18, r24
    1e44:	30 e0       	ldi	r19, 0x00	; 0
    1e46:	81 e0       	ldi	r24, 0x01	; 1
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	02 2e       	mov	r0, r18
    1e4c:	02 c0       	rjmp	.+4      	; 0x1e52 <DIO_voidSetupPinDirection+0x1a0>
    1e4e:	88 0f       	add	r24, r24
    1e50:	99 1f       	adc	r25, r25
    1e52:	0a 94       	dec	r0
    1e54:	e2 f7       	brpl	.-8      	; 0x1e4e <DIO_voidSetupPinDirection+0x19c>
    1e56:	80 95       	com	r24
    1e58:	84 23       	and	r24, r20
    1e5a:	8c 93       	st	X, r24
    1e5c:	29 c0       	rjmp	.+82     	; 0x1eb0 <DIO_voidSetupPinDirection+0x1fe>
				break;
			case DIO_PORTC :
				CLR_BIT(DDRC_REG,copy_u8PinID);
    1e5e:	a4 e3       	ldi	r26, 0x34	; 52
    1e60:	b0 e0       	ldi	r27, 0x00	; 0
    1e62:	e4 e3       	ldi	r30, 0x34	; 52
    1e64:	f0 e0       	ldi	r31, 0x00	; 0
    1e66:	80 81       	ld	r24, Z
    1e68:	48 2f       	mov	r20, r24
    1e6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e6c:	28 2f       	mov	r18, r24
    1e6e:	30 e0       	ldi	r19, 0x00	; 0
    1e70:	81 e0       	ldi	r24, 0x01	; 1
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	02 2e       	mov	r0, r18
    1e76:	02 c0       	rjmp	.+4      	; 0x1e7c <DIO_voidSetupPinDirection+0x1ca>
    1e78:	88 0f       	add	r24, r24
    1e7a:	99 1f       	adc	r25, r25
    1e7c:	0a 94       	dec	r0
    1e7e:	e2 f7       	brpl	.-8      	; 0x1e78 <DIO_voidSetupPinDirection+0x1c6>
    1e80:	80 95       	com	r24
    1e82:	84 23       	and	r24, r20
    1e84:	8c 93       	st	X, r24
    1e86:	14 c0       	rjmp	.+40     	; 0x1eb0 <DIO_voidSetupPinDirection+0x1fe>
				break;
			case DIO_PORTD :
				CLR_BIT(DDRD_REG,copy_u8PinID);
    1e88:	a1 e3       	ldi	r26, 0x31	; 49
    1e8a:	b0 e0       	ldi	r27, 0x00	; 0
    1e8c:	e1 e3       	ldi	r30, 0x31	; 49
    1e8e:	f0 e0       	ldi	r31, 0x00	; 0
    1e90:	80 81       	ld	r24, Z
    1e92:	48 2f       	mov	r20, r24
    1e94:	8a 81       	ldd	r24, Y+2	; 0x02
    1e96:	28 2f       	mov	r18, r24
    1e98:	30 e0       	ldi	r19, 0x00	; 0
    1e9a:	81 e0       	ldi	r24, 0x01	; 1
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	02 2e       	mov	r0, r18
    1ea0:	02 c0       	rjmp	.+4      	; 0x1ea6 <DIO_voidSetupPinDirection+0x1f4>
    1ea2:	88 0f       	add	r24, r24
    1ea4:	99 1f       	adc	r25, r25
    1ea6:	0a 94       	dec	r0
    1ea8:	e2 f7       	brpl	.-8      	; 0x1ea2 <DIO_voidSetupPinDirection+0x1f0>
    1eaa:	80 95       	com	r24
    1eac:	84 23       	and	r24, r20
    1eae:	8c 93       	st	X, r24
				break;
			}
			break;
	}
}
    1eb0:	29 96       	adiw	r28, 0x09	; 9
    1eb2:	0f b6       	in	r0, 0x3f	; 63
    1eb4:	f8 94       	cli
    1eb6:	de bf       	out	0x3e, r29	; 62
    1eb8:	0f be       	out	0x3f, r0	; 63
    1eba:	cd bf       	out	0x3d, r28	; 61
    1ebc:	cf 91       	pop	r28
    1ebe:	df 91       	pop	r29
    1ec0:	08 95       	ret

00001ec2 <DIO_voidSetPinValue>:

void DIO_voidSetPinValue(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8Value){
    1ec2:	df 93       	push	r29
    1ec4:	cf 93       	push	r28
    1ec6:	cd b7       	in	r28, 0x3d	; 61
    1ec8:	de b7       	in	r29, 0x3e	; 62
    1eca:	29 97       	sbiw	r28, 0x09	; 9
    1ecc:	0f b6       	in	r0, 0x3f	; 63
    1ece:	f8 94       	cli
    1ed0:	de bf       	out	0x3e, r29	; 62
    1ed2:	0f be       	out	0x3f, r0	; 63
    1ed4:	cd bf       	out	0x3d, r28	; 61
    1ed6:	89 83       	std	Y+1, r24	; 0x01
    1ed8:	6a 83       	std	Y+2, r22	; 0x02
    1eda:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_u8Value)
    1edc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ede:	28 2f       	mov	r18, r24
    1ee0:	30 e0       	ldi	r19, 0x00	; 0
    1ee2:	39 87       	std	Y+9, r19	; 0x09
    1ee4:	28 87       	std	Y+8, r18	; 0x08
    1ee6:	88 85       	ldd	r24, Y+8	; 0x08
    1ee8:	99 85       	ldd	r25, Y+9	; 0x09
    1eea:	00 97       	sbiw	r24, 0x00	; 0
    1eec:	09 f4       	brne	.+2      	; 0x1ef0 <DIO_voidSetPinValue+0x2e>
    1eee:	75 c0       	rjmp	.+234    	; 0x1fda <DIO_voidSetPinValue+0x118>
    1ef0:	28 85       	ldd	r18, Y+8	; 0x08
    1ef2:	39 85       	ldd	r19, Y+9	; 0x09
    1ef4:	21 30       	cpi	r18, 0x01	; 1
    1ef6:	31 05       	cpc	r19, r1
    1ef8:	09 f0       	breq	.+2      	; 0x1efc <DIO_voidSetPinValue+0x3a>
    1efa:	e2 c0       	rjmp	.+452    	; 0x20c0 <DIO_voidSetPinValue+0x1fe>
	{
	case DIO_HIGH :
		switch(Copy_u8PortID)
    1efc:	89 81       	ldd	r24, Y+1	; 0x01
    1efe:	28 2f       	mov	r18, r24
    1f00:	30 e0       	ldi	r19, 0x00	; 0
    1f02:	3f 83       	std	Y+7, r19	; 0x07
    1f04:	2e 83       	std	Y+6, r18	; 0x06
    1f06:	8e 81       	ldd	r24, Y+6	; 0x06
    1f08:	9f 81       	ldd	r25, Y+7	; 0x07
    1f0a:	81 30       	cpi	r24, 0x01	; 1
    1f0c:	91 05       	cpc	r25, r1
    1f0e:	49 f1       	breq	.+82     	; 0x1f62 <DIO_voidSetPinValue+0xa0>
    1f10:	2e 81       	ldd	r18, Y+6	; 0x06
    1f12:	3f 81       	ldd	r19, Y+7	; 0x07
    1f14:	22 30       	cpi	r18, 0x02	; 2
    1f16:	31 05       	cpc	r19, r1
    1f18:	2c f4       	brge	.+10     	; 0x1f24 <DIO_voidSetPinValue+0x62>
    1f1a:	8e 81       	ldd	r24, Y+6	; 0x06
    1f1c:	9f 81       	ldd	r25, Y+7	; 0x07
    1f1e:	00 97       	sbiw	r24, 0x00	; 0
    1f20:	61 f0       	breq	.+24     	; 0x1f3a <DIO_voidSetPinValue+0x78>
    1f22:	ce c0       	rjmp	.+412    	; 0x20c0 <DIO_voidSetPinValue+0x1fe>
    1f24:	2e 81       	ldd	r18, Y+6	; 0x06
    1f26:	3f 81       	ldd	r19, Y+7	; 0x07
    1f28:	22 30       	cpi	r18, 0x02	; 2
    1f2a:	31 05       	cpc	r19, r1
    1f2c:	71 f1       	breq	.+92     	; 0x1f8a <DIO_voidSetPinValue+0xc8>
    1f2e:	8e 81       	ldd	r24, Y+6	; 0x06
    1f30:	9f 81       	ldd	r25, Y+7	; 0x07
    1f32:	83 30       	cpi	r24, 0x03	; 3
    1f34:	91 05       	cpc	r25, r1
    1f36:	e9 f1       	breq	.+122    	; 0x1fb2 <DIO_voidSetPinValue+0xf0>
    1f38:	c3 c0       	rjmp	.+390    	; 0x20c0 <DIO_voidSetPinValue+0x1fe>
		{
		case DIO_PORTA :
			SET_BIT(PORTA_REG, Copy_u8PinID);
    1f3a:	ab e3       	ldi	r26, 0x3B	; 59
    1f3c:	b0 e0       	ldi	r27, 0x00	; 0
    1f3e:	eb e3       	ldi	r30, 0x3B	; 59
    1f40:	f0 e0       	ldi	r31, 0x00	; 0
    1f42:	80 81       	ld	r24, Z
    1f44:	48 2f       	mov	r20, r24
    1f46:	8a 81       	ldd	r24, Y+2	; 0x02
    1f48:	28 2f       	mov	r18, r24
    1f4a:	30 e0       	ldi	r19, 0x00	; 0
    1f4c:	81 e0       	ldi	r24, 0x01	; 1
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	02 2e       	mov	r0, r18
    1f52:	02 c0       	rjmp	.+4      	; 0x1f58 <DIO_voidSetPinValue+0x96>
    1f54:	88 0f       	add	r24, r24
    1f56:	99 1f       	adc	r25, r25
    1f58:	0a 94       	dec	r0
    1f5a:	e2 f7       	brpl	.-8      	; 0x1f54 <DIO_voidSetPinValue+0x92>
    1f5c:	84 2b       	or	r24, r20
    1f5e:	8c 93       	st	X, r24
    1f60:	af c0       	rjmp	.+350    	; 0x20c0 <DIO_voidSetPinValue+0x1fe>
			break ;
		case DIO_PORTB :
			SET_BIT(PORTB_REG, Copy_u8PinID);
    1f62:	a8 e3       	ldi	r26, 0x38	; 56
    1f64:	b0 e0       	ldi	r27, 0x00	; 0
    1f66:	e8 e3       	ldi	r30, 0x38	; 56
    1f68:	f0 e0       	ldi	r31, 0x00	; 0
    1f6a:	80 81       	ld	r24, Z
    1f6c:	48 2f       	mov	r20, r24
    1f6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f70:	28 2f       	mov	r18, r24
    1f72:	30 e0       	ldi	r19, 0x00	; 0
    1f74:	81 e0       	ldi	r24, 0x01	; 1
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	02 2e       	mov	r0, r18
    1f7a:	02 c0       	rjmp	.+4      	; 0x1f80 <DIO_voidSetPinValue+0xbe>
    1f7c:	88 0f       	add	r24, r24
    1f7e:	99 1f       	adc	r25, r25
    1f80:	0a 94       	dec	r0
    1f82:	e2 f7       	brpl	.-8      	; 0x1f7c <DIO_voidSetPinValue+0xba>
    1f84:	84 2b       	or	r24, r20
    1f86:	8c 93       	st	X, r24
    1f88:	9b c0       	rjmp	.+310    	; 0x20c0 <DIO_voidSetPinValue+0x1fe>
			break;
		case DIO_PORTC :
			SET_BIT(PORTC_REG, Copy_u8PinID);
    1f8a:	a5 e3       	ldi	r26, 0x35	; 53
    1f8c:	b0 e0       	ldi	r27, 0x00	; 0
    1f8e:	e5 e3       	ldi	r30, 0x35	; 53
    1f90:	f0 e0       	ldi	r31, 0x00	; 0
    1f92:	80 81       	ld	r24, Z
    1f94:	48 2f       	mov	r20, r24
    1f96:	8a 81       	ldd	r24, Y+2	; 0x02
    1f98:	28 2f       	mov	r18, r24
    1f9a:	30 e0       	ldi	r19, 0x00	; 0
    1f9c:	81 e0       	ldi	r24, 0x01	; 1
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	02 2e       	mov	r0, r18
    1fa2:	02 c0       	rjmp	.+4      	; 0x1fa8 <DIO_voidSetPinValue+0xe6>
    1fa4:	88 0f       	add	r24, r24
    1fa6:	99 1f       	adc	r25, r25
    1fa8:	0a 94       	dec	r0
    1faa:	e2 f7       	brpl	.-8      	; 0x1fa4 <DIO_voidSetPinValue+0xe2>
    1fac:	84 2b       	or	r24, r20
    1fae:	8c 93       	st	X, r24
    1fb0:	87 c0       	rjmp	.+270    	; 0x20c0 <DIO_voidSetPinValue+0x1fe>
			break ;
		case DIO_PORTD :
			SET_BIT(PORTD_REG, Copy_u8PinID);
    1fb2:	a2 e3       	ldi	r26, 0x32	; 50
    1fb4:	b0 e0       	ldi	r27, 0x00	; 0
    1fb6:	e2 e3       	ldi	r30, 0x32	; 50
    1fb8:	f0 e0       	ldi	r31, 0x00	; 0
    1fba:	80 81       	ld	r24, Z
    1fbc:	48 2f       	mov	r20, r24
    1fbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc0:	28 2f       	mov	r18, r24
    1fc2:	30 e0       	ldi	r19, 0x00	; 0
    1fc4:	81 e0       	ldi	r24, 0x01	; 1
    1fc6:	90 e0       	ldi	r25, 0x00	; 0
    1fc8:	02 2e       	mov	r0, r18
    1fca:	02 c0       	rjmp	.+4      	; 0x1fd0 <DIO_voidSetPinValue+0x10e>
    1fcc:	88 0f       	add	r24, r24
    1fce:	99 1f       	adc	r25, r25
    1fd0:	0a 94       	dec	r0
    1fd2:	e2 f7       	brpl	.-8      	; 0x1fcc <DIO_voidSetPinValue+0x10a>
    1fd4:	84 2b       	or	r24, r20
    1fd6:	8c 93       	st	X, r24
    1fd8:	73 c0       	rjmp	.+230    	; 0x20c0 <DIO_voidSetPinValue+0x1fe>
			break;
		}
		break;
		case DIO_LOW :
			switch(Copy_u8PortID)
    1fda:	89 81       	ldd	r24, Y+1	; 0x01
    1fdc:	28 2f       	mov	r18, r24
    1fde:	30 e0       	ldi	r19, 0x00	; 0
    1fe0:	3d 83       	std	Y+5, r19	; 0x05
    1fe2:	2c 83       	std	Y+4, r18	; 0x04
    1fe4:	8c 81       	ldd	r24, Y+4	; 0x04
    1fe6:	9d 81       	ldd	r25, Y+5	; 0x05
    1fe8:	81 30       	cpi	r24, 0x01	; 1
    1fea:	91 05       	cpc	r25, r1
    1fec:	59 f1       	breq	.+86     	; 0x2044 <DIO_voidSetPinValue+0x182>
    1fee:	2c 81       	ldd	r18, Y+4	; 0x04
    1ff0:	3d 81       	ldd	r19, Y+5	; 0x05
    1ff2:	22 30       	cpi	r18, 0x02	; 2
    1ff4:	31 05       	cpc	r19, r1
    1ff6:	2c f4       	brge	.+10     	; 0x2002 <DIO_voidSetPinValue+0x140>
    1ff8:	8c 81       	ldd	r24, Y+4	; 0x04
    1ffa:	9d 81       	ldd	r25, Y+5	; 0x05
    1ffc:	00 97       	sbiw	r24, 0x00	; 0
    1ffe:	69 f0       	breq	.+26     	; 0x201a <DIO_voidSetPinValue+0x158>
    2000:	5f c0       	rjmp	.+190    	; 0x20c0 <DIO_voidSetPinValue+0x1fe>
    2002:	2c 81       	ldd	r18, Y+4	; 0x04
    2004:	3d 81       	ldd	r19, Y+5	; 0x05
    2006:	22 30       	cpi	r18, 0x02	; 2
    2008:	31 05       	cpc	r19, r1
    200a:	89 f1       	breq	.+98     	; 0x206e <DIO_voidSetPinValue+0x1ac>
    200c:	8c 81       	ldd	r24, Y+4	; 0x04
    200e:	9d 81       	ldd	r25, Y+5	; 0x05
    2010:	83 30       	cpi	r24, 0x03	; 3
    2012:	91 05       	cpc	r25, r1
    2014:	09 f4       	brne	.+2      	; 0x2018 <DIO_voidSetPinValue+0x156>
    2016:	40 c0       	rjmp	.+128    	; 0x2098 <DIO_voidSetPinValue+0x1d6>
    2018:	53 c0       	rjmp	.+166    	; 0x20c0 <DIO_voidSetPinValue+0x1fe>
			{
			case DIO_PORTA :
				CLR_BIT(PORTA_REG, Copy_u8PinID);
    201a:	ab e3       	ldi	r26, 0x3B	; 59
    201c:	b0 e0       	ldi	r27, 0x00	; 0
    201e:	eb e3       	ldi	r30, 0x3B	; 59
    2020:	f0 e0       	ldi	r31, 0x00	; 0
    2022:	80 81       	ld	r24, Z
    2024:	48 2f       	mov	r20, r24
    2026:	8a 81       	ldd	r24, Y+2	; 0x02
    2028:	28 2f       	mov	r18, r24
    202a:	30 e0       	ldi	r19, 0x00	; 0
    202c:	81 e0       	ldi	r24, 0x01	; 1
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	02 2e       	mov	r0, r18
    2032:	02 c0       	rjmp	.+4      	; 0x2038 <DIO_voidSetPinValue+0x176>
    2034:	88 0f       	add	r24, r24
    2036:	99 1f       	adc	r25, r25
    2038:	0a 94       	dec	r0
    203a:	e2 f7       	brpl	.-8      	; 0x2034 <DIO_voidSetPinValue+0x172>
    203c:	80 95       	com	r24
    203e:	84 23       	and	r24, r20
    2040:	8c 93       	st	X, r24
    2042:	3e c0       	rjmp	.+124    	; 0x20c0 <DIO_voidSetPinValue+0x1fe>
				break ;
			case DIO_PORTB :
				CLR_BIT(PORTB_REG, Copy_u8PinID);
    2044:	a8 e3       	ldi	r26, 0x38	; 56
    2046:	b0 e0       	ldi	r27, 0x00	; 0
    2048:	e8 e3       	ldi	r30, 0x38	; 56
    204a:	f0 e0       	ldi	r31, 0x00	; 0
    204c:	80 81       	ld	r24, Z
    204e:	48 2f       	mov	r20, r24
    2050:	8a 81       	ldd	r24, Y+2	; 0x02
    2052:	28 2f       	mov	r18, r24
    2054:	30 e0       	ldi	r19, 0x00	; 0
    2056:	81 e0       	ldi	r24, 0x01	; 1
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	02 2e       	mov	r0, r18
    205c:	02 c0       	rjmp	.+4      	; 0x2062 <DIO_voidSetPinValue+0x1a0>
    205e:	88 0f       	add	r24, r24
    2060:	99 1f       	adc	r25, r25
    2062:	0a 94       	dec	r0
    2064:	e2 f7       	brpl	.-8      	; 0x205e <DIO_voidSetPinValue+0x19c>
    2066:	80 95       	com	r24
    2068:	84 23       	and	r24, r20
    206a:	8c 93       	st	X, r24
    206c:	29 c0       	rjmp	.+82     	; 0x20c0 <DIO_voidSetPinValue+0x1fe>
				break;
			case DIO_PORTC :
				CLR_BIT(PORTC_REG, Copy_u8PinID);
    206e:	a5 e3       	ldi	r26, 0x35	; 53
    2070:	b0 e0       	ldi	r27, 0x00	; 0
    2072:	e5 e3       	ldi	r30, 0x35	; 53
    2074:	f0 e0       	ldi	r31, 0x00	; 0
    2076:	80 81       	ld	r24, Z
    2078:	48 2f       	mov	r20, r24
    207a:	8a 81       	ldd	r24, Y+2	; 0x02
    207c:	28 2f       	mov	r18, r24
    207e:	30 e0       	ldi	r19, 0x00	; 0
    2080:	81 e0       	ldi	r24, 0x01	; 1
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	02 2e       	mov	r0, r18
    2086:	02 c0       	rjmp	.+4      	; 0x208c <DIO_voidSetPinValue+0x1ca>
    2088:	88 0f       	add	r24, r24
    208a:	99 1f       	adc	r25, r25
    208c:	0a 94       	dec	r0
    208e:	e2 f7       	brpl	.-8      	; 0x2088 <DIO_voidSetPinValue+0x1c6>
    2090:	80 95       	com	r24
    2092:	84 23       	and	r24, r20
    2094:	8c 93       	st	X, r24
    2096:	14 c0       	rjmp	.+40     	; 0x20c0 <DIO_voidSetPinValue+0x1fe>
				break ;
			case DIO_PORTD :
				CLR_BIT(PORTD_REG, Copy_u8PinID);
    2098:	a2 e3       	ldi	r26, 0x32	; 50
    209a:	b0 e0       	ldi	r27, 0x00	; 0
    209c:	e2 e3       	ldi	r30, 0x32	; 50
    209e:	f0 e0       	ldi	r31, 0x00	; 0
    20a0:	80 81       	ld	r24, Z
    20a2:	48 2f       	mov	r20, r24
    20a4:	8a 81       	ldd	r24, Y+2	; 0x02
    20a6:	28 2f       	mov	r18, r24
    20a8:	30 e0       	ldi	r19, 0x00	; 0
    20aa:	81 e0       	ldi	r24, 0x01	; 1
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	02 2e       	mov	r0, r18
    20b0:	02 c0       	rjmp	.+4      	; 0x20b6 <DIO_voidSetPinValue+0x1f4>
    20b2:	88 0f       	add	r24, r24
    20b4:	99 1f       	adc	r25, r25
    20b6:	0a 94       	dec	r0
    20b8:	e2 f7       	brpl	.-8      	; 0x20b2 <DIO_voidSetPinValue+0x1f0>
    20ba:	80 95       	com	r24
    20bc:	84 23       	and	r24, r20
    20be:	8c 93       	st	X, r24
				break;
			}
			break ;
	}
}
    20c0:	29 96       	adiw	r28, 0x09	; 9
    20c2:	0f b6       	in	r0, 0x3f	; 63
    20c4:	f8 94       	cli
    20c6:	de bf       	out	0x3e, r29	; 62
    20c8:	0f be       	out	0x3f, r0	; 63
    20ca:	cd bf       	out	0x3d, r28	; 61
    20cc:	cf 91       	pop	r28
    20ce:	df 91       	pop	r29
    20d0:	08 95       	ret

000020d2 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PortID, u8 Copy_u8PinID){
    20d2:	df 93       	push	r29
    20d4:	cf 93       	push	r28
    20d6:	00 d0       	rcall	.+0      	; 0x20d8 <DIO_u8GetPinValue+0x6>
    20d8:	00 d0       	rcall	.+0      	; 0x20da <DIO_u8GetPinValue+0x8>
    20da:	0f 92       	push	r0
    20dc:	cd b7       	in	r28, 0x3d	; 61
    20de:	de b7       	in	r29, 0x3e	; 62
    20e0:	8a 83       	std	Y+2, r24	; 0x02
    20e2:	6b 83       	std	Y+3, r22	; 0x03

	u8 Local_u8ReturnedValue = 255; // check error state
    20e4:	8f ef       	ldi	r24, 0xFF	; 255
    20e6:	89 83       	std	Y+1, r24	; 0x01

	switch (Copy_u8PortID)
    20e8:	8a 81       	ldd	r24, Y+2	; 0x02
    20ea:	28 2f       	mov	r18, r24
    20ec:	30 e0       	ldi	r19, 0x00	; 0
    20ee:	3d 83       	std	Y+5, r19	; 0x05
    20f0:	2c 83       	std	Y+4, r18	; 0x04
    20f2:	4c 81       	ldd	r20, Y+4	; 0x04
    20f4:	5d 81       	ldd	r21, Y+5	; 0x05
    20f6:	41 30       	cpi	r20, 0x01	; 1
    20f8:	51 05       	cpc	r21, r1
    20fa:	b1 f1       	breq	.+108    	; 0x2168 <DIO_u8GetPinValue+0x96>
    20fc:	8c 81       	ldd	r24, Y+4	; 0x04
    20fe:	9d 81       	ldd	r25, Y+5	; 0x05
    2100:	82 30       	cpi	r24, 0x02	; 2
    2102:	91 05       	cpc	r25, r1
    2104:	34 f4       	brge	.+12     	; 0x2112 <DIO_u8GetPinValue+0x40>
    2106:	2c 81       	ldd	r18, Y+4	; 0x04
    2108:	3d 81       	ldd	r19, Y+5	; 0x05
    210a:	21 15       	cp	r18, r1
    210c:	31 05       	cpc	r19, r1
    210e:	71 f0       	breq	.+28     	; 0x212c <DIO_u8GetPinValue+0x5a>
    2110:	84 c0       	rjmp	.+264    	; 0x221a <DIO_u8GetPinValue+0x148>
    2112:	4c 81       	ldd	r20, Y+4	; 0x04
    2114:	5d 81       	ldd	r21, Y+5	; 0x05
    2116:	42 30       	cpi	r20, 0x02	; 2
    2118:	51 05       	cpc	r21, r1
    211a:	09 f4       	brne	.+2      	; 0x211e <DIO_u8GetPinValue+0x4c>
    211c:	43 c0       	rjmp	.+134    	; 0x21a4 <DIO_u8GetPinValue+0xd2>
    211e:	8c 81       	ldd	r24, Y+4	; 0x04
    2120:	9d 81       	ldd	r25, Y+5	; 0x05
    2122:	83 30       	cpi	r24, 0x03	; 3
    2124:	91 05       	cpc	r25, r1
    2126:	09 f4       	brne	.+2      	; 0x212a <DIO_u8GetPinValue+0x58>
    2128:	5b c0       	rjmp	.+182    	; 0x21e0 <DIO_u8GetPinValue+0x10e>
    212a:	77 c0       	rjmp	.+238    	; 0x221a <DIO_u8GetPinValue+0x148>
	{
	case DIO_PORTA:
		Local_u8ReturnedValue = GET_BIT(PINA_REG, Copy_u8PinID);
    212c:	e9 e3       	ldi	r30, 0x39	; 57
    212e:	f0 e0       	ldi	r31, 0x00	; 0
    2130:	80 81       	ld	r24, Z
    2132:	48 2f       	mov	r20, r24
    2134:	50 e0       	ldi	r21, 0x00	; 0
    2136:	8b 81       	ldd	r24, Y+3	; 0x03
    2138:	28 2f       	mov	r18, r24
    213a:	30 e0       	ldi	r19, 0x00	; 0
    213c:	81 e0       	ldi	r24, 0x01	; 1
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	02 c0       	rjmp	.+4      	; 0x2146 <DIO_u8GetPinValue+0x74>
    2142:	88 0f       	add	r24, r24
    2144:	99 1f       	adc	r25, r25
    2146:	2a 95       	dec	r18
    2148:	e2 f7       	brpl	.-8      	; 0x2142 <DIO_u8GetPinValue+0x70>
    214a:	9a 01       	movw	r18, r20
    214c:	28 23       	and	r18, r24
    214e:	39 23       	and	r19, r25
    2150:	8b 81       	ldd	r24, Y+3	; 0x03
    2152:	88 2f       	mov	r24, r24
    2154:	90 e0       	ldi	r25, 0x00	; 0
    2156:	a9 01       	movw	r20, r18
    2158:	02 c0       	rjmp	.+4      	; 0x215e <DIO_u8GetPinValue+0x8c>
    215a:	55 95       	asr	r21
    215c:	47 95       	ror	r20
    215e:	8a 95       	dec	r24
    2160:	e2 f7       	brpl	.-8      	; 0x215a <DIO_u8GetPinValue+0x88>
    2162:	ca 01       	movw	r24, r20
    2164:	89 83       	std	Y+1, r24	; 0x01
    2166:	59 c0       	rjmp	.+178    	; 0x221a <DIO_u8GetPinValue+0x148>
		break;
	case DIO_PORTB:
		Local_u8ReturnedValue = GET_BIT(PINB_REG, Copy_u8PinID);
    2168:	e6 e3       	ldi	r30, 0x36	; 54
    216a:	f0 e0       	ldi	r31, 0x00	; 0
    216c:	80 81       	ld	r24, Z
    216e:	48 2f       	mov	r20, r24
    2170:	50 e0       	ldi	r21, 0x00	; 0
    2172:	8b 81       	ldd	r24, Y+3	; 0x03
    2174:	28 2f       	mov	r18, r24
    2176:	30 e0       	ldi	r19, 0x00	; 0
    2178:	81 e0       	ldi	r24, 0x01	; 1
    217a:	90 e0       	ldi	r25, 0x00	; 0
    217c:	02 c0       	rjmp	.+4      	; 0x2182 <DIO_u8GetPinValue+0xb0>
    217e:	88 0f       	add	r24, r24
    2180:	99 1f       	adc	r25, r25
    2182:	2a 95       	dec	r18
    2184:	e2 f7       	brpl	.-8      	; 0x217e <DIO_u8GetPinValue+0xac>
    2186:	9a 01       	movw	r18, r20
    2188:	28 23       	and	r18, r24
    218a:	39 23       	and	r19, r25
    218c:	8b 81       	ldd	r24, Y+3	; 0x03
    218e:	88 2f       	mov	r24, r24
    2190:	90 e0       	ldi	r25, 0x00	; 0
    2192:	a9 01       	movw	r20, r18
    2194:	02 c0       	rjmp	.+4      	; 0x219a <DIO_u8GetPinValue+0xc8>
    2196:	55 95       	asr	r21
    2198:	47 95       	ror	r20
    219a:	8a 95       	dec	r24
    219c:	e2 f7       	brpl	.-8      	; 0x2196 <DIO_u8GetPinValue+0xc4>
    219e:	ca 01       	movw	r24, r20
    21a0:	89 83       	std	Y+1, r24	; 0x01
    21a2:	3b c0       	rjmp	.+118    	; 0x221a <DIO_u8GetPinValue+0x148>
		break;
	case DIO_PORTC:
		Local_u8ReturnedValue = GET_BIT(PINC_REG, Copy_u8PinID);
    21a4:	e3 e3       	ldi	r30, 0x33	; 51
    21a6:	f0 e0       	ldi	r31, 0x00	; 0
    21a8:	80 81       	ld	r24, Z
    21aa:	48 2f       	mov	r20, r24
    21ac:	50 e0       	ldi	r21, 0x00	; 0
    21ae:	8b 81       	ldd	r24, Y+3	; 0x03
    21b0:	28 2f       	mov	r18, r24
    21b2:	30 e0       	ldi	r19, 0x00	; 0
    21b4:	81 e0       	ldi	r24, 0x01	; 1
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	02 c0       	rjmp	.+4      	; 0x21be <DIO_u8GetPinValue+0xec>
    21ba:	88 0f       	add	r24, r24
    21bc:	99 1f       	adc	r25, r25
    21be:	2a 95       	dec	r18
    21c0:	e2 f7       	brpl	.-8      	; 0x21ba <DIO_u8GetPinValue+0xe8>
    21c2:	9a 01       	movw	r18, r20
    21c4:	28 23       	and	r18, r24
    21c6:	39 23       	and	r19, r25
    21c8:	8b 81       	ldd	r24, Y+3	; 0x03
    21ca:	88 2f       	mov	r24, r24
    21cc:	90 e0       	ldi	r25, 0x00	; 0
    21ce:	a9 01       	movw	r20, r18
    21d0:	02 c0       	rjmp	.+4      	; 0x21d6 <DIO_u8GetPinValue+0x104>
    21d2:	55 95       	asr	r21
    21d4:	47 95       	ror	r20
    21d6:	8a 95       	dec	r24
    21d8:	e2 f7       	brpl	.-8      	; 0x21d2 <DIO_u8GetPinValue+0x100>
    21da:	ca 01       	movw	r24, r20
    21dc:	89 83       	std	Y+1, r24	; 0x01
    21de:	1d c0       	rjmp	.+58     	; 0x221a <DIO_u8GetPinValue+0x148>
		break;
	case DIO_PORTD:
		Local_u8ReturnedValue = GET_BIT(PIND_REG, Copy_u8PinID);
    21e0:	e0 e3       	ldi	r30, 0x30	; 48
    21e2:	f0 e0       	ldi	r31, 0x00	; 0
    21e4:	80 81       	ld	r24, Z
    21e6:	48 2f       	mov	r20, r24
    21e8:	50 e0       	ldi	r21, 0x00	; 0
    21ea:	8b 81       	ldd	r24, Y+3	; 0x03
    21ec:	28 2f       	mov	r18, r24
    21ee:	30 e0       	ldi	r19, 0x00	; 0
    21f0:	81 e0       	ldi	r24, 0x01	; 1
    21f2:	90 e0       	ldi	r25, 0x00	; 0
    21f4:	02 c0       	rjmp	.+4      	; 0x21fa <DIO_u8GetPinValue+0x128>
    21f6:	88 0f       	add	r24, r24
    21f8:	99 1f       	adc	r25, r25
    21fa:	2a 95       	dec	r18
    21fc:	e2 f7       	brpl	.-8      	; 0x21f6 <DIO_u8GetPinValue+0x124>
    21fe:	9a 01       	movw	r18, r20
    2200:	28 23       	and	r18, r24
    2202:	39 23       	and	r19, r25
    2204:	8b 81       	ldd	r24, Y+3	; 0x03
    2206:	88 2f       	mov	r24, r24
    2208:	90 e0       	ldi	r25, 0x00	; 0
    220a:	a9 01       	movw	r20, r18
    220c:	02 c0       	rjmp	.+4      	; 0x2212 <DIO_u8GetPinValue+0x140>
    220e:	55 95       	asr	r21
    2210:	47 95       	ror	r20
    2212:	8a 95       	dec	r24
    2214:	e2 f7       	brpl	.-8      	; 0x220e <DIO_u8GetPinValue+0x13c>
    2216:	ca 01       	movw	r24, r20
    2218:	89 83       	std	Y+1, r24	; 0x01
		break;

	default:
		break;
	}
	return Local_u8ReturnedValue;
    221a:	89 81       	ldd	r24, Y+1	; 0x01
}
    221c:	0f 90       	pop	r0
    221e:	0f 90       	pop	r0
    2220:	0f 90       	pop	r0
    2222:	0f 90       	pop	r0
    2224:	0f 90       	pop	r0
    2226:	cf 91       	pop	r28
    2228:	df 91       	pop	r29
    222a:	08 95       	ret

0000222c <DIO_voidSetPortDirection>:


void DIO_voidSetPortDirection(u8 Copy_u8PortID, u8 Copy_u8Direction ){
    222c:	df 93       	push	r29
    222e:	cf 93       	push	r28
    2230:	cd b7       	in	r28, 0x3d	; 61
    2232:	de b7       	in	r29, 0x3e	; 62
    2234:	28 97       	sbiw	r28, 0x08	; 8
    2236:	0f b6       	in	r0, 0x3f	; 63
    2238:	f8 94       	cli
    223a:	de bf       	out	0x3e, r29	; 62
    223c:	0f be       	out	0x3f, r0	; 63
    223e:	cd bf       	out	0x3d, r28	; 61
    2240:	89 83       	std	Y+1, r24	; 0x01
    2242:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Direction)
    2244:	8a 81       	ldd	r24, Y+2	; 0x02
    2246:	28 2f       	mov	r18, r24
    2248:	30 e0       	ldi	r19, 0x00	; 0
    224a:	38 87       	std	Y+8, r19	; 0x08
    224c:	2f 83       	std	Y+7, r18	; 0x07
    224e:	8f 81       	ldd	r24, Y+7	; 0x07
    2250:	98 85       	ldd	r25, Y+8	; 0x08
    2252:	00 97       	sbiw	r24, 0x00	; 0
    2254:	c9 f1       	breq	.+114    	; 0x22c8 <DIO_voidSetPortDirection+0x9c>
    2256:	2f 81       	ldd	r18, Y+7	; 0x07
    2258:	38 85       	ldd	r19, Y+8	; 0x08
    225a:	21 30       	cpi	r18, 0x01	; 1
    225c:	31 05       	cpc	r19, r1
    225e:	09 f0       	breq	.+2      	; 0x2262 <DIO_voidSetPortDirection+0x36>
    2260:	61 c0       	rjmp	.+194    	; 0x2324 <DIO_voidSetPortDirection+0xf8>
	{
	case DIO_OUTPUT :
		switch(Copy_u8PortID)
    2262:	89 81       	ldd	r24, Y+1	; 0x01
    2264:	28 2f       	mov	r18, r24
    2266:	30 e0       	ldi	r19, 0x00	; 0
    2268:	3e 83       	std	Y+6, r19	; 0x06
    226a:	2d 83       	std	Y+5, r18	; 0x05
    226c:	8d 81       	ldd	r24, Y+5	; 0x05
    226e:	9e 81       	ldd	r25, Y+6	; 0x06
    2270:	81 30       	cpi	r24, 0x01	; 1
    2272:	91 05       	cpc	r25, r1
    2274:	d1 f0       	breq	.+52     	; 0x22aa <DIO_voidSetPortDirection+0x7e>
    2276:	2d 81       	ldd	r18, Y+5	; 0x05
    2278:	3e 81       	ldd	r19, Y+6	; 0x06
    227a:	22 30       	cpi	r18, 0x02	; 2
    227c:	31 05       	cpc	r19, r1
    227e:	2c f4       	brge	.+10     	; 0x228a <DIO_voidSetPortDirection+0x5e>
    2280:	8d 81       	ldd	r24, Y+5	; 0x05
    2282:	9e 81       	ldd	r25, Y+6	; 0x06
    2284:	00 97       	sbiw	r24, 0x00	; 0
    2286:	61 f0       	breq	.+24     	; 0x22a0 <DIO_voidSetPortDirection+0x74>
    2288:	4d c0       	rjmp	.+154    	; 0x2324 <DIO_voidSetPortDirection+0xf8>
    228a:	2d 81       	ldd	r18, Y+5	; 0x05
    228c:	3e 81       	ldd	r19, Y+6	; 0x06
    228e:	22 30       	cpi	r18, 0x02	; 2
    2290:	31 05       	cpc	r19, r1
    2292:	81 f0       	breq	.+32     	; 0x22b4 <DIO_voidSetPortDirection+0x88>
    2294:	8d 81       	ldd	r24, Y+5	; 0x05
    2296:	9e 81       	ldd	r25, Y+6	; 0x06
    2298:	83 30       	cpi	r24, 0x03	; 3
    229a:	91 05       	cpc	r25, r1
    229c:	81 f0       	breq	.+32     	; 0x22be <DIO_voidSetPortDirection+0x92>
    229e:	42 c0       	rjmp	.+132    	; 0x2324 <DIO_voidSetPortDirection+0xf8>
		{
		case DIO_PORTA :
			DDRA_REG = 0xff;
    22a0:	ea e3       	ldi	r30, 0x3A	; 58
    22a2:	f0 e0       	ldi	r31, 0x00	; 0
    22a4:	8f ef       	ldi	r24, 0xFF	; 255
    22a6:	80 83       	st	Z, r24
    22a8:	3d c0       	rjmp	.+122    	; 0x2324 <DIO_voidSetPortDirection+0xf8>
			break;
		case DIO_PORTB :
			DDRB_REG = 0xff;
    22aa:	e7 e3       	ldi	r30, 0x37	; 55
    22ac:	f0 e0       	ldi	r31, 0x00	; 0
    22ae:	8f ef       	ldi	r24, 0xFF	; 255
    22b0:	80 83       	st	Z, r24
    22b2:	38 c0       	rjmp	.+112    	; 0x2324 <DIO_voidSetPortDirection+0xf8>
			break;
		case DIO_PORTC :
			DDRC_REG = 0xff;
    22b4:	e4 e3       	ldi	r30, 0x34	; 52
    22b6:	f0 e0       	ldi	r31, 0x00	; 0
    22b8:	8f ef       	ldi	r24, 0xFF	; 255
    22ba:	80 83       	st	Z, r24
    22bc:	33 c0       	rjmp	.+102    	; 0x2324 <DIO_voidSetPortDirection+0xf8>

			break;
		case DIO_PORTD :
			DDRD_REG = 0xff;
    22be:	e1 e3       	ldi	r30, 0x31	; 49
    22c0:	f0 e0       	ldi	r31, 0x00	; 0
    22c2:	8f ef       	ldi	r24, 0xFF	; 255
    22c4:	80 83       	st	Z, r24
    22c6:	2e c0       	rjmp	.+92     	; 0x2324 <DIO_voidSetPortDirection+0xf8>
		default:
			break;
		}
		break ;
		case DIO_INPUT :
			switch(Copy_u8PortID)
    22c8:	89 81       	ldd	r24, Y+1	; 0x01
    22ca:	28 2f       	mov	r18, r24
    22cc:	30 e0       	ldi	r19, 0x00	; 0
    22ce:	3c 83       	std	Y+4, r19	; 0x04
    22d0:	2b 83       	std	Y+3, r18	; 0x03
    22d2:	8b 81       	ldd	r24, Y+3	; 0x03
    22d4:	9c 81       	ldd	r25, Y+4	; 0x04
    22d6:	81 30       	cpi	r24, 0x01	; 1
    22d8:	91 05       	cpc	r25, r1
    22da:	c9 f0       	breq	.+50     	; 0x230e <DIO_voidSetPortDirection+0xe2>
    22dc:	2b 81       	ldd	r18, Y+3	; 0x03
    22de:	3c 81       	ldd	r19, Y+4	; 0x04
    22e0:	22 30       	cpi	r18, 0x02	; 2
    22e2:	31 05       	cpc	r19, r1
    22e4:	2c f4       	brge	.+10     	; 0x22f0 <DIO_voidSetPortDirection+0xc4>
    22e6:	8b 81       	ldd	r24, Y+3	; 0x03
    22e8:	9c 81       	ldd	r25, Y+4	; 0x04
    22ea:	00 97       	sbiw	r24, 0x00	; 0
    22ec:	61 f0       	breq	.+24     	; 0x2306 <DIO_voidSetPortDirection+0xda>
    22ee:	1a c0       	rjmp	.+52     	; 0x2324 <DIO_voidSetPortDirection+0xf8>
    22f0:	2b 81       	ldd	r18, Y+3	; 0x03
    22f2:	3c 81       	ldd	r19, Y+4	; 0x04
    22f4:	22 30       	cpi	r18, 0x02	; 2
    22f6:	31 05       	cpc	r19, r1
    22f8:	71 f0       	breq	.+28     	; 0x2316 <DIO_voidSetPortDirection+0xea>
    22fa:	8b 81       	ldd	r24, Y+3	; 0x03
    22fc:	9c 81       	ldd	r25, Y+4	; 0x04
    22fe:	83 30       	cpi	r24, 0x03	; 3
    2300:	91 05       	cpc	r25, r1
    2302:	69 f0       	breq	.+26     	; 0x231e <DIO_voidSetPortDirection+0xf2>
    2304:	0f c0       	rjmp	.+30     	; 0x2324 <DIO_voidSetPortDirection+0xf8>
			{
			case DIO_PORTA :
				DDRA_REG = 0x00;
    2306:	ea e3       	ldi	r30, 0x3A	; 58
    2308:	f0 e0       	ldi	r31, 0x00	; 0
    230a:	10 82       	st	Z, r1
    230c:	0b c0       	rjmp	.+22     	; 0x2324 <DIO_voidSetPortDirection+0xf8>
				break;
			case DIO_PORTB :
				DDRB_REG = 0;
    230e:	e7 e3       	ldi	r30, 0x37	; 55
    2310:	f0 e0       	ldi	r31, 0x00	; 0
    2312:	10 82       	st	Z, r1
    2314:	07 c0       	rjmp	.+14     	; 0x2324 <DIO_voidSetPortDirection+0xf8>
				break;
			case DIO_PORTC :
				DDRC_REG = 0x00;
    2316:	e4 e3       	ldi	r30, 0x34	; 52
    2318:	f0 e0       	ldi	r31, 0x00	; 0
    231a:	10 82       	st	Z, r1
    231c:	03 c0       	rjmp	.+6      	; 0x2324 <DIO_voidSetPortDirection+0xf8>

				break;
			case DIO_PORTD :
				DDRD_REG = 0x00;
    231e:	e1 e3       	ldi	r30, 0x31	; 49
    2320:	f0 e0       	ldi	r31, 0x00	; 0
    2322:	10 82       	st	Z, r1
			default:
				break;
			}
			break;
	}
}
    2324:	28 96       	adiw	r28, 0x08	; 8
    2326:	0f b6       	in	r0, 0x3f	; 63
    2328:	f8 94       	cli
    232a:	de bf       	out	0x3e, r29	; 62
    232c:	0f be       	out	0x3f, r0	; 63
    232e:	cd bf       	out	0x3d, r28	; 61
    2330:	cf 91       	pop	r28
    2332:	df 91       	pop	r29
    2334:	08 95       	ret

00002336 <DIO_voidSetPortValue>:

void DIO_voidSetPortValue(u8 Copy_u8PortID, u8 Copy_u8Value)
{
    2336:	df 93       	push	r29
    2338:	cf 93       	push	r28
    233a:	00 d0       	rcall	.+0      	; 0x233c <DIO_voidSetPortValue+0x6>
    233c:	00 d0       	rcall	.+0      	; 0x233e <DIO_voidSetPortValue+0x8>
    233e:	cd b7       	in	r28, 0x3d	; 61
    2340:	de b7       	in	r29, 0x3e	; 62
    2342:	89 83       	std	Y+1, r24	; 0x01
    2344:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortID)
    2346:	89 81       	ldd	r24, Y+1	; 0x01
    2348:	28 2f       	mov	r18, r24
    234a:	30 e0       	ldi	r19, 0x00	; 0
    234c:	3c 83       	std	Y+4, r19	; 0x04
    234e:	2b 83       	std	Y+3, r18	; 0x03
    2350:	8b 81       	ldd	r24, Y+3	; 0x03
    2352:	9c 81       	ldd	r25, Y+4	; 0x04
    2354:	81 30       	cpi	r24, 0x01	; 1
    2356:	91 05       	cpc	r25, r1
    2358:	d1 f0       	breq	.+52     	; 0x238e <DIO_voidSetPortValue+0x58>
    235a:	2b 81       	ldd	r18, Y+3	; 0x03
    235c:	3c 81       	ldd	r19, Y+4	; 0x04
    235e:	22 30       	cpi	r18, 0x02	; 2
    2360:	31 05       	cpc	r19, r1
    2362:	2c f4       	brge	.+10     	; 0x236e <DIO_voidSetPortValue+0x38>
    2364:	8b 81       	ldd	r24, Y+3	; 0x03
    2366:	9c 81       	ldd	r25, Y+4	; 0x04
    2368:	00 97       	sbiw	r24, 0x00	; 0
    236a:	61 f0       	breq	.+24     	; 0x2384 <DIO_voidSetPortValue+0x4e>
    236c:	1e c0       	rjmp	.+60     	; 0x23aa <DIO_voidSetPortValue+0x74>
    236e:	2b 81       	ldd	r18, Y+3	; 0x03
    2370:	3c 81       	ldd	r19, Y+4	; 0x04
    2372:	22 30       	cpi	r18, 0x02	; 2
    2374:	31 05       	cpc	r19, r1
    2376:	81 f0       	breq	.+32     	; 0x2398 <DIO_voidSetPortValue+0x62>
    2378:	8b 81       	ldd	r24, Y+3	; 0x03
    237a:	9c 81       	ldd	r25, Y+4	; 0x04
    237c:	83 30       	cpi	r24, 0x03	; 3
    237e:	91 05       	cpc	r25, r1
    2380:	81 f0       	breq	.+32     	; 0x23a2 <DIO_voidSetPortValue+0x6c>
    2382:	13 c0       	rjmp	.+38     	; 0x23aa <DIO_voidSetPortValue+0x74>
	{
	case DIO_PORTA :
		PORTA_REG = Copy_u8Value;
    2384:	eb e3       	ldi	r30, 0x3B	; 59
    2386:	f0 e0       	ldi	r31, 0x00	; 0
    2388:	8a 81       	ldd	r24, Y+2	; 0x02
    238a:	80 83       	st	Z, r24
    238c:	0e c0       	rjmp	.+28     	; 0x23aa <DIO_voidSetPortValue+0x74>
		break;
	case DIO_PORTB :
		PORTB_REG = Copy_u8Value;
    238e:	e8 e3       	ldi	r30, 0x38	; 56
    2390:	f0 e0       	ldi	r31, 0x00	; 0
    2392:	8a 81       	ldd	r24, Y+2	; 0x02
    2394:	80 83       	st	Z, r24
    2396:	09 c0       	rjmp	.+18     	; 0x23aa <DIO_voidSetPortValue+0x74>
		break;
	case DIO_PORTC :
		PORTC_REG = Copy_u8Value;
    2398:	e5 e3       	ldi	r30, 0x35	; 53
    239a:	f0 e0       	ldi	r31, 0x00	; 0
    239c:	8a 81       	ldd	r24, Y+2	; 0x02
    239e:	80 83       	st	Z, r24
    23a0:	04 c0       	rjmp	.+8      	; 0x23aa <DIO_voidSetPortValue+0x74>

		break;
	case DIO_PORTD :
		PORTD_REG = Copy_u8Value;
    23a2:	e2 e3       	ldi	r30, 0x32	; 50
    23a4:	f0 e0       	ldi	r31, 0x00	; 0
    23a6:	8a 81       	ldd	r24, Y+2	; 0x02
    23a8:	80 83       	st	Z, r24

		break;
	default:
		break;
	}
}
    23aa:	0f 90       	pop	r0
    23ac:	0f 90       	pop	r0
    23ae:	0f 90       	pop	r0
    23b0:	0f 90       	pop	r0
    23b2:	cf 91       	pop	r28
    23b4:	df 91       	pop	r29
    23b6:	08 95       	ret

000023b8 <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 Copy_u8PortID){
    23b8:	df 93       	push	r29
    23ba:	cf 93       	push	r28
    23bc:	00 d0       	rcall	.+0      	; 0x23be <DIO_u8GetPortValue+0x6>
    23be:	00 d0       	rcall	.+0      	; 0x23c0 <DIO_u8GetPortValue+0x8>
    23c0:	cd b7       	in	r28, 0x3d	; 61
    23c2:	de b7       	in	r29, 0x3e	; 62
    23c4:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ReturnedValue = 255; // check error state
    23c6:	8f ef       	ldi	r24, 0xFF	; 255
    23c8:	89 83       	std	Y+1, r24	; 0x01

	switch (Copy_u8PortID)
    23ca:	8a 81       	ldd	r24, Y+2	; 0x02
    23cc:	28 2f       	mov	r18, r24
    23ce:	30 e0       	ldi	r19, 0x00	; 0
    23d0:	3c 83       	std	Y+4, r19	; 0x04
    23d2:	2b 83       	std	Y+3, r18	; 0x03
    23d4:	8b 81       	ldd	r24, Y+3	; 0x03
    23d6:	9c 81       	ldd	r25, Y+4	; 0x04
    23d8:	81 30       	cpi	r24, 0x01	; 1
    23da:	91 05       	cpc	r25, r1
    23dc:	d1 f0       	breq	.+52     	; 0x2412 <DIO_u8GetPortValue+0x5a>
    23de:	2b 81       	ldd	r18, Y+3	; 0x03
    23e0:	3c 81       	ldd	r19, Y+4	; 0x04
    23e2:	22 30       	cpi	r18, 0x02	; 2
    23e4:	31 05       	cpc	r19, r1
    23e6:	2c f4       	brge	.+10     	; 0x23f2 <DIO_u8GetPortValue+0x3a>
    23e8:	8b 81       	ldd	r24, Y+3	; 0x03
    23ea:	9c 81       	ldd	r25, Y+4	; 0x04
    23ec:	00 97       	sbiw	r24, 0x00	; 0
    23ee:	61 f0       	breq	.+24     	; 0x2408 <DIO_u8GetPortValue+0x50>
    23f0:	1e c0       	rjmp	.+60     	; 0x242e <DIO_u8GetPortValue+0x76>
    23f2:	2b 81       	ldd	r18, Y+3	; 0x03
    23f4:	3c 81       	ldd	r19, Y+4	; 0x04
    23f6:	22 30       	cpi	r18, 0x02	; 2
    23f8:	31 05       	cpc	r19, r1
    23fa:	81 f0       	breq	.+32     	; 0x241c <DIO_u8GetPortValue+0x64>
    23fc:	8b 81       	ldd	r24, Y+3	; 0x03
    23fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2400:	83 30       	cpi	r24, 0x03	; 3
    2402:	91 05       	cpc	r25, r1
    2404:	81 f0       	breq	.+32     	; 0x2426 <DIO_u8GetPortValue+0x6e>
    2406:	13 c0       	rjmp	.+38     	; 0x242e <DIO_u8GetPortValue+0x76>
	{
	case DIO_PORTA:
		Local_u8ReturnedValue = PINA_REG;
    2408:	e9 e3       	ldi	r30, 0x39	; 57
    240a:	f0 e0       	ldi	r31, 0x00	; 0
    240c:	80 81       	ld	r24, Z
    240e:	89 83       	std	Y+1, r24	; 0x01
    2410:	0e c0       	rjmp	.+28     	; 0x242e <DIO_u8GetPortValue+0x76>
		break;
	case DIO_PORTB:
		Local_u8ReturnedValue = PINB_REG;
    2412:	e6 e3       	ldi	r30, 0x36	; 54
    2414:	f0 e0       	ldi	r31, 0x00	; 0
    2416:	80 81       	ld	r24, Z
    2418:	89 83       	std	Y+1, r24	; 0x01
    241a:	09 c0       	rjmp	.+18     	; 0x242e <DIO_u8GetPortValue+0x76>
		break;
	case DIO_PORTC:
		Local_u8ReturnedValue = PINC_REG;
    241c:	e3 e3       	ldi	r30, 0x33	; 51
    241e:	f0 e0       	ldi	r31, 0x00	; 0
    2420:	80 81       	ld	r24, Z
    2422:	89 83       	std	Y+1, r24	; 0x01
    2424:	04 c0       	rjmp	.+8      	; 0x242e <DIO_u8GetPortValue+0x76>
		break;
	case DIO_PORTD:
		Local_u8ReturnedValue = PIND_REG;
    2426:	e0 e3       	ldi	r30, 0x30	; 48
    2428:	f0 e0       	ldi	r31, 0x00	; 0
    242a:	80 81       	ld	r24, Z
    242c:	89 83       	std	Y+1, r24	; 0x01
		break;

	default:
		break;
	}
	return Local_u8ReturnedValue;
    242e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2430:	0f 90       	pop	r0
    2432:	0f 90       	pop	r0
    2434:	0f 90       	pop	r0
    2436:	0f 90       	pop	r0
    2438:	cf 91       	pop	r28
    243a:	df 91       	pop	r29
    243c:	08 95       	ret

0000243e <KPAD_voidInit>:
#include "KPAD_private.h"
#include <util/delay.h>


void KPAD_voidInit(void)
{
    243e:	df 93       	push	r29
    2440:	cf 93       	push	r28
    2442:	cd b7       	in	r28, 0x3d	; 61
    2444:	de b7       	in	r29, 0x3e	; 62

    DIO_voidSetupPinDirection (KPAD_PORT , KPAD_R0 , DIO_INPUT);
    2446:	81 e0       	ldi	r24, 0x01	; 1
    2448:	60 e0       	ldi	r22, 0x00	; 0
    244a:	40 e0       	ldi	r20, 0x00	; 0
    244c:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <DIO_voidSetupPinDirection>
    DIO_voidSetupPinDirection (KPAD_PORT , KPAD_R1 , DIO_INPUT);
    2450:	81 e0       	ldi	r24, 0x01	; 1
    2452:	61 e0       	ldi	r22, 0x01	; 1
    2454:	40 e0       	ldi	r20, 0x00	; 0
    2456:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <DIO_voidSetupPinDirection>
    DIO_voidSetupPinDirection (KPAD_PORT , KPAD_R2 , DIO_INPUT);
    245a:	81 e0       	ldi	r24, 0x01	; 1
    245c:	62 e0       	ldi	r22, 0x02	; 2
    245e:	40 e0       	ldi	r20, 0x00	; 0
    2460:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <DIO_voidSetupPinDirection>
    DIO_voidSetupPinDirection (KPAD_PORT , KPAD_R3 , DIO_INPUT);
    2464:	81 e0       	ldi	r24, 0x01	; 1
    2466:	63 e0       	ldi	r22, 0x03	; 3
    2468:	40 e0       	ldi	r20, 0x00	; 0
    246a:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <DIO_voidSetupPinDirection>

    DIO_voidSetPinValue (KPAD_PORT , KPAD_R0 , DIO_HIGH);
    246e:	81 e0       	ldi	r24, 0x01	; 1
    2470:	60 e0       	ldi	r22, 0x00	; 0
    2472:	41 e0       	ldi	r20, 0x01	; 1
    2474:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <DIO_voidSetPinValue>
    DIO_voidSetPinValue (KPAD_PORT , KPAD_R1 , DIO_HIGH);
    2478:	81 e0       	ldi	r24, 0x01	; 1
    247a:	61 e0       	ldi	r22, 0x01	; 1
    247c:	41 e0       	ldi	r20, 0x01	; 1
    247e:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <DIO_voidSetPinValue>
    DIO_voidSetPinValue (KPAD_PORT , KPAD_R2 , DIO_HIGH);
    2482:	81 e0       	ldi	r24, 0x01	; 1
    2484:	62 e0       	ldi	r22, 0x02	; 2
    2486:	41 e0       	ldi	r20, 0x01	; 1
    2488:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <DIO_voidSetPinValue>
    DIO_voidSetPinValue (KPAD_PORT , KPAD_R3 , DIO_HIGH);
    248c:	81 e0       	ldi	r24, 0x01	; 1
    248e:	63 e0       	ldi	r22, 0x03	; 3
    2490:	41 e0       	ldi	r20, 0x01	; 1
    2492:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <DIO_voidSetPinValue>

    DIO_voidSetupPinDirection (KPAD_PORT , KPAD_C0 , DIO_OUTPUT);
    2496:	81 e0       	ldi	r24, 0x01	; 1
    2498:	64 e0       	ldi	r22, 0x04	; 4
    249a:	41 e0       	ldi	r20, 0x01	; 1
    249c:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <DIO_voidSetupPinDirection>
    DIO_voidSetupPinDirection (KPAD_PORT , KPAD_C1 , DIO_OUTPUT);
    24a0:	81 e0       	ldi	r24, 0x01	; 1
    24a2:	65 e0       	ldi	r22, 0x05	; 5
    24a4:	41 e0       	ldi	r20, 0x01	; 1
    24a6:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <DIO_voidSetupPinDirection>
    DIO_voidSetupPinDirection (KPAD_PORT , KPAD_C2 , DIO_OUTPUT);
    24aa:	81 e0       	ldi	r24, 0x01	; 1
    24ac:	66 e0       	ldi	r22, 0x06	; 6
    24ae:	41 e0       	ldi	r20, 0x01	; 1
    24b0:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <DIO_voidSetupPinDirection>
    DIO_voidSetupPinDirection (KPAD_PORT , KPAD_C3 , DIO_OUTPUT);
    24b4:	81 e0       	ldi	r24, 0x01	; 1
    24b6:	67 e0       	ldi	r22, 0x07	; 7
    24b8:	41 e0       	ldi	r20, 0x01	; 1
    24ba:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <DIO_voidSetupPinDirection>

    DIO_voidSetPinValue (KPAD_PORT , KPAD_C0 , DIO_HIGH);
    24be:	81 e0       	ldi	r24, 0x01	; 1
    24c0:	64 e0       	ldi	r22, 0x04	; 4
    24c2:	41 e0       	ldi	r20, 0x01	; 1
    24c4:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <DIO_voidSetPinValue>
    DIO_voidSetPinValue (KPAD_PORT , KPAD_C1 , DIO_HIGH);
    24c8:	81 e0       	ldi	r24, 0x01	; 1
    24ca:	65 e0       	ldi	r22, 0x05	; 5
    24cc:	41 e0       	ldi	r20, 0x01	; 1
    24ce:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <DIO_voidSetPinValue>
    DIO_voidSetPinValue (KPAD_PORT , KPAD_C2 , DIO_HIGH);
    24d2:	81 e0       	ldi	r24, 0x01	; 1
    24d4:	66 e0       	ldi	r22, 0x06	; 6
    24d6:	41 e0       	ldi	r20, 0x01	; 1
    24d8:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <DIO_voidSetPinValue>
    DIO_voidSetPinValue (KPAD_PORT , KPAD_C3 , DIO_HIGH);
    24dc:	81 e0       	ldi	r24, 0x01	; 1
    24de:	67 e0       	ldi	r22, 0x07	; 7
    24e0:	41 e0       	ldi	r20, 0x01	; 1
    24e2:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <DIO_voidSetPinValue>
}
    24e6:	cf 91       	pop	r28
    24e8:	df 91       	pop	r29
    24ea:	08 95       	ret

000024ec <KPAD_u8GetPressed>:

u8 KPAD_u8GetPressed(void)
{
    24ec:	df 93       	push	r29
    24ee:	cf 93       	push	r28
    24f0:	cd b7       	in	r28, 0x3d	; 61
    24f2:	de b7       	in	r29, 0x3e	; 62
    24f4:	62 97       	sbiw	r28, 0x12	; 18
    24f6:	0f b6       	in	r0, 0x3f	; 63
    24f8:	f8 94       	cli
    24fa:	de bf       	out	0x3e, r29	; 62
    24fc:	0f be       	out	0x3f, r0	; 63
    24fe:	cd bf       	out	0x3d, r28	; 61
    u8 Local_u8RetrunedValue = 255;
    2500:	8f ef       	ldi	r24, 0xFF	; 255
    2502:	8a 8b       	std	Y+18, r24	; 0x12
    u8 Local_u8GetPressed;
    u8 Local_u8Col;
    u8 Local_u8Row;

    for(Local_u8Col = 0 + KPAD_COL_INIT; Local_u8Col < KPAD_COL_END + 1; Local_u8Col++ )
    2504:	84 e0       	ldi	r24, 0x04	; 4
    2506:	88 8b       	std	Y+16, r24	; 0x10
    2508:	b7 c0       	rjmp	.+366    	; 0x2678 <KPAD_u8GetPressed+0x18c>
    {
        DIO_voidSetPinValue(KPAD_PORT , Local_u8Col , DIO_LOW);
    250a:	81 e0       	ldi	r24, 0x01	; 1
    250c:	68 89       	ldd	r22, Y+16	; 0x10
    250e:	40 e0       	ldi	r20, 0x00	; 0
    2510:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <DIO_voidSetPinValue>
        for(Local_u8Row = 0 + KPAD_ROW_INIT; Local_u8Row < KPAD_ROW_END + 1; Local_u8Row++)
    2514:	1f 86       	std	Y+15, r1	; 0x0f
    2516:	a4 c0       	rjmp	.+328    	; 0x2660 <KPAD_u8GetPressed+0x174>
        {
           Local_u8GetPressed = DIO_u8GetPinValue(KPAD_PORT, Local_u8Row);
    2518:	81 e0       	ldi	r24, 0x01	; 1
    251a:	6f 85       	ldd	r22, Y+15	; 0x0f
    251c:	0e 94 69 10 	call	0x20d2	; 0x20d2 <DIO_u8GetPinValue>
    2520:	89 8b       	std	Y+17, r24	; 0x11
           if(Local_u8GetPressed == 0)
    2522:	89 89       	ldd	r24, Y+17	; 0x11
    2524:	88 23       	and	r24, r24
    2526:	09 f0       	breq	.+2      	; 0x252a <KPAD_u8GetPressed+0x3e>
    2528:	98 c0       	rjmp	.+304    	; 0x265a <KPAD_u8GetPressed+0x16e>
    252a:	80 e0       	ldi	r24, 0x00	; 0
    252c:	90 e0       	ldi	r25, 0x00	; 0
    252e:	a8 e4       	ldi	r26, 0x48	; 72
    2530:	b2 e4       	ldi	r27, 0x42	; 66
    2532:	8b 87       	std	Y+11, r24	; 0x0b
    2534:	9c 87       	std	Y+12, r25	; 0x0c
    2536:	ad 87       	std	Y+13, r26	; 0x0d
    2538:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    253a:	6b 85       	ldd	r22, Y+11	; 0x0b
    253c:	7c 85       	ldd	r23, Y+12	; 0x0c
    253e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2540:	9e 85       	ldd	r25, Y+14	; 0x0e
    2542:	20 e0       	ldi	r18, 0x00	; 0
    2544:	30 e0       	ldi	r19, 0x00	; 0
    2546:	4a ef       	ldi	r20, 0xFA	; 250
    2548:	54 e4       	ldi	r21, 0x44	; 68
    254a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    254e:	dc 01       	movw	r26, r24
    2550:	cb 01       	movw	r24, r22
    2552:	8f 83       	std	Y+7, r24	; 0x07
    2554:	98 87       	std	Y+8, r25	; 0x08
    2556:	a9 87       	std	Y+9, r26	; 0x09
    2558:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    255a:	6f 81       	ldd	r22, Y+7	; 0x07
    255c:	78 85       	ldd	r23, Y+8	; 0x08
    255e:	89 85       	ldd	r24, Y+9	; 0x09
    2560:	9a 85       	ldd	r25, Y+10	; 0x0a
    2562:	20 e0       	ldi	r18, 0x00	; 0
    2564:	30 e0       	ldi	r19, 0x00	; 0
    2566:	40 e8       	ldi	r20, 0x80	; 128
    2568:	5f e3       	ldi	r21, 0x3F	; 63
    256a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    256e:	88 23       	and	r24, r24
    2570:	2c f4       	brge	.+10     	; 0x257c <KPAD_u8GetPressed+0x90>
		__ticks = 1;
    2572:	81 e0       	ldi	r24, 0x01	; 1
    2574:	90 e0       	ldi	r25, 0x00	; 0
    2576:	9e 83       	std	Y+6, r25	; 0x06
    2578:	8d 83       	std	Y+5, r24	; 0x05
    257a:	3f c0       	rjmp	.+126    	; 0x25fa <KPAD_u8GetPressed+0x10e>
	else if (__tmp > 65535)
    257c:	6f 81       	ldd	r22, Y+7	; 0x07
    257e:	78 85       	ldd	r23, Y+8	; 0x08
    2580:	89 85       	ldd	r24, Y+9	; 0x09
    2582:	9a 85       	ldd	r25, Y+10	; 0x0a
    2584:	20 e0       	ldi	r18, 0x00	; 0
    2586:	3f ef       	ldi	r19, 0xFF	; 255
    2588:	4f e7       	ldi	r20, 0x7F	; 127
    258a:	57 e4       	ldi	r21, 0x47	; 71
    258c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2590:	18 16       	cp	r1, r24
    2592:	4c f5       	brge	.+82     	; 0x25e6 <KPAD_u8GetPressed+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2594:	6b 85       	ldd	r22, Y+11	; 0x0b
    2596:	7c 85       	ldd	r23, Y+12	; 0x0c
    2598:	8d 85       	ldd	r24, Y+13	; 0x0d
    259a:	9e 85       	ldd	r25, Y+14	; 0x0e
    259c:	20 e0       	ldi	r18, 0x00	; 0
    259e:	30 e0       	ldi	r19, 0x00	; 0
    25a0:	40 e2       	ldi	r20, 0x20	; 32
    25a2:	51 e4       	ldi	r21, 0x41	; 65
    25a4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25a8:	dc 01       	movw	r26, r24
    25aa:	cb 01       	movw	r24, r22
    25ac:	bc 01       	movw	r22, r24
    25ae:	cd 01       	movw	r24, r26
    25b0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25b4:	dc 01       	movw	r26, r24
    25b6:	cb 01       	movw	r24, r22
    25b8:	9e 83       	std	Y+6, r25	; 0x06
    25ba:	8d 83       	std	Y+5, r24	; 0x05
    25bc:	0f c0       	rjmp	.+30     	; 0x25dc <KPAD_u8GetPressed+0xf0>
    25be:	88 ec       	ldi	r24, 0xC8	; 200
    25c0:	90 e0       	ldi	r25, 0x00	; 0
    25c2:	9c 83       	std	Y+4, r25	; 0x04
    25c4:	8b 83       	std	Y+3, r24	; 0x03
    25c6:	8b 81       	ldd	r24, Y+3	; 0x03
    25c8:	9c 81       	ldd	r25, Y+4	; 0x04
    25ca:	01 97       	sbiw	r24, 0x01	; 1
    25cc:	f1 f7       	brne	.-4      	; 0x25ca <KPAD_u8GetPressed+0xde>
    25ce:	9c 83       	std	Y+4, r25	; 0x04
    25d0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25d2:	8d 81       	ldd	r24, Y+5	; 0x05
    25d4:	9e 81       	ldd	r25, Y+6	; 0x06
    25d6:	01 97       	sbiw	r24, 0x01	; 1
    25d8:	9e 83       	std	Y+6, r25	; 0x06
    25da:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25dc:	8d 81       	ldd	r24, Y+5	; 0x05
    25de:	9e 81       	ldd	r25, Y+6	; 0x06
    25e0:	00 97       	sbiw	r24, 0x00	; 0
    25e2:	69 f7       	brne	.-38     	; 0x25be <KPAD_u8GetPressed+0xd2>
    25e4:	14 c0       	rjmp	.+40     	; 0x260e <KPAD_u8GetPressed+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25e6:	6f 81       	ldd	r22, Y+7	; 0x07
    25e8:	78 85       	ldd	r23, Y+8	; 0x08
    25ea:	89 85       	ldd	r24, Y+9	; 0x09
    25ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    25ee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25f2:	dc 01       	movw	r26, r24
    25f4:	cb 01       	movw	r24, r22
    25f6:	9e 83       	std	Y+6, r25	; 0x06
    25f8:	8d 83       	std	Y+5, r24	; 0x05
    25fa:	8d 81       	ldd	r24, Y+5	; 0x05
    25fc:	9e 81       	ldd	r25, Y+6	; 0x06
    25fe:	9a 83       	std	Y+2, r25	; 0x02
    2600:	89 83       	std	Y+1, r24	; 0x01
    2602:	89 81       	ldd	r24, Y+1	; 0x01
    2604:	9a 81       	ldd	r25, Y+2	; 0x02
    2606:	01 97       	sbiw	r24, 0x01	; 1
    2608:	f1 f7       	brne	.-4      	; 0x2606 <KPAD_u8GetPressed+0x11a>
    260a:	9a 83       	std	Y+2, r25	; 0x02
    260c:	89 83       	std	Y+1, r24	; 0x01
           {
            /*  Debouncing */
            _delay_ms(50);
            Local_u8GetPressed = DIO_u8GetPinValue(KPAD_PORT, Local_u8Row);
    260e:	81 e0       	ldi	r24, 0x01	; 1
    2610:	6f 85       	ldd	r22, Y+15	; 0x0f
    2612:	0e 94 69 10 	call	0x20d2	; 0x20d2 <DIO_u8GetPinValue>
    2616:	89 8b       	std	Y+17, r24	; 0x11
            if(Local_u8GetPressed == 0)
    2618:	89 89       	ldd	r24, Y+17	; 0x11
    261a:	88 23       	and	r24, r24
    261c:	d9 f4       	brne	.+54     	; 0x2654 <KPAD_u8GetPressed+0x168>
            {
                Local_u8RetrunedValue = KPAD_Au8Values[Local_u8Row - KPAD_ROW_INIT][Local_u8Col - KPAD_COL_INIT];
    261e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2620:	48 2f       	mov	r20, r24
    2622:	50 e0       	ldi	r21, 0x00	; 0
    2624:	88 89       	ldd	r24, Y+16	; 0x10
    2626:	88 2f       	mov	r24, r24
    2628:	90 e0       	ldi	r25, 0x00	; 0
    262a:	9c 01       	movw	r18, r24
    262c:	24 50       	subi	r18, 0x04	; 4
    262e:	30 40       	sbci	r19, 0x00	; 0
    2630:	ca 01       	movw	r24, r20
    2632:	88 0f       	add	r24, r24
    2634:	99 1f       	adc	r25, r25
    2636:	88 0f       	add	r24, r24
    2638:	99 1f       	adc	r25, r25
    263a:	82 0f       	add	r24, r18
    263c:	93 1f       	adc	r25, r19
    263e:	fc 01       	movw	r30, r24
    2640:	ef 55       	subi	r30, 0x5F	; 95
    2642:	ff 4f       	sbci	r31, 0xFF	; 255
    2644:	80 81       	ld	r24, Z
    2646:	8a 8b       	std	Y+18, r24	; 0x12
    2648:	05 c0       	rjmp	.+10     	; 0x2654 <KPAD_u8GetPressed+0x168>
            }
            while(Local_u8GetPressed ==0)
            {
                Local_u8GetPressed = DIO_u8GetPinValue(KPAD_PORT , Local_u8Row);
    264a:	81 e0       	ldi	r24, 0x01	; 1
    264c:	6f 85       	ldd	r22, Y+15	; 0x0f
    264e:	0e 94 69 10 	call	0x20d2	; 0x20d2 <DIO_u8GetPinValue>
    2652:	89 8b       	std	Y+17, r24	; 0x11
            Local_u8GetPressed = DIO_u8GetPinValue(KPAD_PORT, Local_u8Row);
            if(Local_u8GetPressed == 0)
            {
                Local_u8RetrunedValue = KPAD_Au8Values[Local_u8Row - KPAD_ROW_INIT][Local_u8Col - KPAD_COL_INIT];
            }
            while(Local_u8GetPressed ==0)
    2654:	89 89       	ldd	r24, Y+17	; 0x11
    2656:	88 23       	and	r24, r24
    2658:	c1 f3       	breq	.-16     	; 0x264a <KPAD_u8GetPressed+0x15e>
    u8 Local_u8Row;

    for(Local_u8Col = 0 + KPAD_COL_INIT; Local_u8Col < KPAD_COL_END + 1; Local_u8Col++ )
    {
        DIO_voidSetPinValue(KPAD_PORT , Local_u8Col , DIO_LOW);
        for(Local_u8Row = 0 + KPAD_ROW_INIT; Local_u8Row < KPAD_ROW_END + 1; Local_u8Row++)
    265a:	8f 85       	ldd	r24, Y+15	; 0x0f
    265c:	8f 5f       	subi	r24, 0xFF	; 255
    265e:	8f 87       	std	Y+15, r24	; 0x0f
    2660:	8f 85       	ldd	r24, Y+15	; 0x0f
    2662:	84 30       	cpi	r24, 0x04	; 4
    2664:	08 f4       	brcc	.+2      	; 0x2668 <KPAD_u8GetPressed+0x17c>
    2666:	58 cf       	rjmp	.-336    	; 0x2518 <KPAD_u8GetPressed+0x2c>
            {
                Local_u8GetPressed = DIO_u8GetPinValue(KPAD_PORT , Local_u8Row);
            }
           }
        }
        DIO_voidSetPinValue(KPAD_PORT , Local_u8Col , DIO_HIGH);
    2668:	81 e0       	ldi	r24, 0x01	; 1
    266a:	68 89       	ldd	r22, Y+16	; 0x10
    266c:	41 e0       	ldi	r20, 0x01	; 1
    266e:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <DIO_voidSetPinValue>
    u8 Local_u8RetrunedValue = 255;
    u8 Local_u8GetPressed;
    u8 Local_u8Col;
    u8 Local_u8Row;

    for(Local_u8Col = 0 + KPAD_COL_INIT; Local_u8Col < KPAD_COL_END + 1; Local_u8Col++ )
    2672:	88 89       	ldd	r24, Y+16	; 0x10
    2674:	8f 5f       	subi	r24, 0xFF	; 255
    2676:	88 8b       	std	Y+16, r24	; 0x10
    2678:	88 89       	ldd	r24, Y+16	; 0x10
    267a:	88 30       	cpi	r24, 0x08	; 8
    267c:	08 f4       	brcc	.+2      	; 0x2680 <KPAD_u8GetPressed+0x194>
    267e:	45 cf       	rjmp	.-374    	; 0x250a <KPAD_u8GetPressed+0x1e>
            }
           }
        }
        DIO_voidSetPinValue(KPAD_PORT , Local_u8Col , DIO_HIGH);
    }
    return Local_u8RetrunedValue ;
    2680:	8a 89       	ldd	r24, Y+18	; 0x12
}
    2682:	62 96       	adiw	r28, 0x12	; 18
    2684:	0f b6       	in	r0, 0x3f	; 63
    2686:	f8 94       	cli
    2688:	de bf       	out	0x3e, r29	; 62
    268a:	0f be       	out	0x3f, r0	; 63
    268c:	cd bf       	out	0x3d, r28	; 61
    268e:	cf 91       	pop	r28
    2690:	df 91       	pop	r29
    2692:	08 95       	ret

00002694 <main>:
#define F_CPU		8000000UL
#include <util/delay.h>


int main()
{
    2694:	df 93       	push	r29
    2696:	cf 93       	push	r28
    2698:	cd b7       	in	r28, 0x3d	; 61
    269a:	de b7       	in	r29, 0x3e	; 62
    269c:	cd 54       	subi	r28, 0x4D	; 77
    269e:	d0 40       	sbci	r29, 0x00	; 0
    26a0:	0f b6       	in	r0, 0x3f	; 63
    26a2:	f8 94       	cli
    26a4:	de bf       	out	0x3e, r29	; 62
    26a6:	0f be       	out	0x3f, r0	; 63
    26a8:	cd bf       	out	0x3d, r28	; 61
	CLCD_voidInit();
    26aa:	0e 94 47 06 	call	0xc8e	; 0xc8e <CLCD_voidInit>
	KPAD_voidInit();
    26ae:	0e 94 1f 12 	call	0x243e	; 0x243e <KPAD_voidInit>

	u8 Equation[20]={0};
    26b2:	84 e1       	ldi	r24, 0x14	; 20
    26b4:	fe 01       	movw	r30, r28
    26b6:	f8 96       	adiw	r30, 0x38	; 56
    26b8:	df 01       	movw	r26, r30
    26ba:	28 2f       	mov	r18, r24
    26bc:	1d 92       	st	X+, r1
    26be:	2a 95       	dec	r18
    26c0:	e9 f7       	brne	.-6      	; 0x26bc <main+0x28>
	u8 EquationSize = 0;
    26c2:	1f aa       	std	Y+55, r1	; 0x37
	u32 Result = 0;
    26c4:	1e aa       	std	Y+54, r1	; 0x36
    26c6:	1d aa       	std	Y+53, r1	; 0x35
	u32 Op1=0;
    26c8:	1c aa       	std	Y+52, r1	; 0x34
    26ca:	1b aa       	std	Y+51, r1	; 0x33
	u32 Op2=0;
    26cc:	1a aa       	std	Y+50, r1	; 0x32
    26ce:	19 aa       	std	Y+49, r1	; 0x31
	u8 Operator;
	CLCD_voidSetPosition(1,1);
    26d0:	81 e0       	ldi	r24, 0x01	; 1
    26d2:	61 e0       	ldi	r22, 0x01	; 1
    26d4:	0e 94 6d 0c 	call	0x18da	; 0x18da <CLCD_voidSetPosition>
	CLCD_voidSendString((u8 *)"Simple_Cal");
    26d8:	80 e6       	ldi	r24, 0x60	; 96
    26da:	90 e0       	ldi	r25, 0x00	; 0
    26dc:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <CLCD_voidSendString>
    26e0:	80 e0       	ldi	r24, 0x00	; 0
    26e2:	90 e0       	ldi	r25, 0x00	; 0
    26e4:	aa e7       	ldi	r26, 0x7A	; 122
    26e6:	b4 e4       	ldi	r27, 0x44	; 68
    26e8:	8f a3       	std	Y+39, r24	; 0x27
    26ea:	98 a7       	std	Y+40, r25	; 0x28
    26ec:	a9 a7       	std	Y+41, r26	; 0x29
    26ee:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26f0:	6f a1       	ldd	r22, Y+39	; 0x27
    26f2:	78 a5       	ldd	r23, Y+40	; 0x28
    26f4:	89 a5       	ldd	r24, Y+41	; 0x29
    26f6:	9a a5       	ldd	r25, Y+42	; 0x2a
    26f8:	20 e0       	ldi	r18, 0x00	; 0
    26fa:	30 e0       	ldi	r19, 0x00	; 0
    26fc:	4a ef       	ldi	r20, 0xFA	; 250
    26fe:	54 e4       	ldi	r21, 0x44	; 68
    2700:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2704:	dc 01       	movw	r26, r24
    2706:	cb 01       	movw	r24, r22
    2708:	8b a3       	std	Y+35, r24	; 0x23
    270a:	9c a3       	std	Y+36, r25	; 0x24
    270c:	ad a3       	std	Y+37, r26	; 0x25
    270e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2710:	6b a1       	ldd	r22, Y+35	; 0x23
    2712:	7c a1       	ldd	r23, Y+36	; 0x24
    2714:	8d a1       	ldd	r24, Y+37	; 0x25
    2716:	9e a1       	ldd	r25, Y+38	; 0x26
    2718:	20 e0       	ldi	r18, 0x00	; 0
    271a:	30 e0       	ldi	r19, 0x00	; 0
    271c:	40 e8       	ldi	r20, 0x80	; 128
    271e:	5f e3       	ldi	r21, 0x3F	; 63
    2720:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2724:	88 23       	and	r24, r24
    2726:	2c f4       	brge	.+10     	; 0x2732 <main+0x9e>
		__ticks = 1;
    2728:	81 e0       	ldi	r24, 0x01	; 1
    272a:	90 e0       	ldi	r25, 0x00	; 0
    272c:	9a a3       	std	Y+34, r25	; 0x22
    272e:	89 a3       	std	Y+33, r24	; 0x21
    2730:	3f c0       	rjmp	.+126    	; 0x27b0 <main+0x11c>
	else if (__tmp > 65535)
    2732:	6b a1       	ldd	r22, Y+35	; 0x23
    2734:	7c a1       	ldd	r23, Y+36	; 0x24
    2736:	8d a1       	ldd	r24, Y+37	; 0x25
    2738:	9e a1       	ldd	r25, Y+38	; 0x26
    273a:	20 e0       	ldi	r18, 0x00	; 0
    273c:	3f ef       	ldi	r19, 0xFF	; 255
    273e:	4f e7       	ldi	r20, 0x7F	; 127
    2740:	57 e4       	ldi	r21, 0x47	; 71
    2742:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2746:	18 16       	cp	r1, r24
    2748:	4c f5       	brge	.+82     	; 0x279c <main+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    274a:	6f a1       	ldd	r22, Y+39	; 0x27
    274c:	78 a5       	ldd	r23, Y+40	; 0x28
    274e:	89 a5       	ldd	r24, Y+41	; 0x29
    2750:	9a a5       	ldd	r25, Y+42	; 0x2a
    2752:	20 e0       	ldi	r18, 0x00	; 0
    2754:	30 e0       	ldi	r19, 0x00	; 0
    2756:	40 e2       	ldi	r20, 0x20	; 32
    2758:	51 e4       	ldi	r21, 0x41	; 65
    275a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    275e:	dc 01       	movw	r26, r24
    2760:	cb 01       	movw	r24, r22
    2762:	bc 01       	movw	r22, r24
    2764:	cd 01       	movw	r24, r26
    2766:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    276a:	dc 01       	movw	r26, r24
    276c:	cb 01       	movw	r24, r22
    276e:	9a a3       	std	Y+34, r25	; 0x22
    2770:	89 a3       	std	Y+33, r24	; 0x21
    2772:	0f c0       	rjmp	.+30     	; 0x2792 <main+0xfe>
    2774:	88 ec       	ldi	r24, 0xC8	; 200
    2776:	90 e0       	ldi	r25, 0x00	; 0
    2778:	98 a3       	std	Y+32, r25	; 0x20
    277a:	8f 8f       	std	Y+31, r24	; 0x1f
    277c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    277e:	98 a1       	ldd	r25, Y+32	; 0x20
    2780:	01 97       	sbiw	r24, 0x01	; 1
    2782:	f1 f7       	brne	.-4      	; 0x2780 <main+0xec>
    2784:	98 a3       	std	Y+32, r25	; 0x20
    2786:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2788:	89 a1       	ldd	r24, Y+33	; 0x21
    278a:	9a a1       	ldd	r25, Y+34	; 0x22
    278c:	01 97       	sbiw	r24, 0x01	; 1
    278e:	9a a3       	std	Y+34, r25	; 0x22
    2790:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2792:	89 a1       	ldd	r24, Y+33	; 0x21
    2794:	9a a1       	ldd	r25, Y+34	; 0x22
    2796:	00 97       	sbiw	r24, 0x00	; 0
    2798:	69 f7       	brne	.-38     	; 0x2774 <main+0xe0>
    279a:	14 c0       	rjmp	.+40     	; 0x27c4 <main+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    279c:	6b a1       	ldd	r22, Y+35	; 0x23
    279e:	7c a1       	ldd	r23, Y+36	; 0x24
    27a0:	8d a1       	ldd	r24, Y+37	; 0x25
    27a2:	9e a1       	ldd	r25, Y+38	; 0x26
    27a4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27a8:	dc 01       	movw	r26, r24
    27aa:	cb 01       	movw	r24, r22
    27ac:	9a a3       	std	Y+34, r25	; 0x22
    27ae:	89 a3       	std	Y+33, r24	; 0x21
    27b0:	89 a1       	ldd	r24, Y+33	; 0x21
    27b2:	9a a1       	ldd	r25, Y+34	; 0x22
    27b4:	9e 8f       	std	Y+30, r25	; 0x1e
    27b6:	8d 8f       	std	Y+29, r24	; 0x1d
    27b8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27ba:	9e 8d       	ldd	r25, Y+30	; 0x1e
    27bc:	01 97       	sbiw	r24, 0x01	; 1
    27be:	f1 f7       	brne	.-4      	; 0x27bc <main+0x128>
    27c0:	9e 8f       	std	Y+30, r25	; 0x1e
    27c2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1000);
	CLCD_voidCLearDisplay();
    27c4:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <CLCD_voidCLearDisplay>

	while (1)
	{
		u8 key = KPAD_u8GetPressed();
    27c8:	0e 94 76 12 	call	0x24ec	; 0x24ec <KPAD_u8GetPressed>
    27cc:	8f a7       	std	Y+47, r24	; 0x2f

		if (key != 0xff)
    27ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    27d0:	8f 3f       	cpi	r24, 0xFF	; 255
    27d2:	d1 f3       	breq	.-12     	; 0x27c8 <main+0x134>
		{

			if(key != 'C'){
    27d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    27d6:	83 34       	cpi	r24, 0x43	; 67
    27d8:	81 f0       	breq	.+32     	; 0x27fa <main+0x166>
				Equation[EquationSize] = key;
    27da:	8f a9       	ldd	r24, Y+55	; 0x37
    27dc:	28 2f       	mov	r18, r24
    27de:	30 e0       	ldi	r19, 0x00	; 0
    27e0:	ce 01       	movw	r24, r28
    27e2:	c8 96       	adiw	r24, 0x38	; 56
    27e4:	fc 01       	movw	r30, r24
    27e6:	e2 0f       	add	r30, r18
    27e8:	f3 1f       	adc	r31, r19
    27ea:	8f a5       	ldd	r24, Y+47	; 0x2f
    27ec:	80 83       	st	Z, r24
				EquationSize++;
    27ee:	8f a9       	ldd	r24, Y+55	; 0x37
    27f0:	8f 5f       	subi	r24, 0xFF	; 255
    27f2:	8f ab       	std	Y+55, r24	; 0x37
				CLCD_voidSendData(key);
    27f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    27f6:	0e 94 c5 0a 	call	0x158a	; 0x158a <CLCD_voidSendData>
			}
			if (key == '=')
    27fa:	8f a5       	ldd	r24, Y+47	; 0x2f
    27fc:	8d 33       	cpi	r24, 0x3D	; 61
    27fe:	09 f0       	breq	.+2      	; 0x2802 <main+0x16e>
    2800:	f1 c1       	rjmp	.+994    	; 0x2be4 <main+0x550>
    2802:	80 e0       	ldi	r24, 0x00	; 0
    2804:	90 e0       	ldi	r25, 0x00	; 0
    2806:	aa ef       	ldi	r26, 0xFA	; 250
    2808:	b3 e4       	ldi	r27, 0x43	; 67
    280a:	89 8f       	std	Y+25, r24	; 0x19
    280c:	9a 8f       	std	Y+26, r25	; 0x1a
    280e:	ab 8f       	std	Y+27, r26	; 0x1b
    2810:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2812:	69 8d       	ldd	r22, Y+25	; 0x19
    2814:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2816:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2818:	9c 8d       	ldd	r25, Y+28	; 0x1c
    281a:	20 e0       	ldi	r18, 0x00	; 0
    281c:	30 e0       	ldi	r19, 0x00	; 0
    281e:	4a ef       	ldi	r20, 0xFA	; 250
    2820:	54 e4       	ldi	r21, 0x44	; 68
    2822:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2826:	dc 01       	movw	r26, r24
    2828:	cb 01       	movw	r24, r22
    282a:	8d 8b       	std	Y+21, r24	; 0x15
    282c:	9e 8b       	std	Y+22, r25	; 0x16
    282e:	af 8b       	std	Y+23, r26	; 0x17
    2830:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2832:	6d 89       	ldd	r22, Y+21	; 0x15
    2834:	7e 89       	ldd	r23, Y+22	; 0x16
    2836:	8f 89       	ldd	r24, Y+23	; 0x17
    2838:	98 8d       	ldd	r25, Y+24	; 0x18
    283a:	20 e0       	ldi	r18, 0x00	; 0
    283c:	30 e0       	ldi	r19, 0x00	; 0
    283e:	40 e8       	ldi	r20, 0x80	; 128
    2840:	5f e3       	ldi	r21, 0x3F	; 63
    2842:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2846:	88 23       	and	r24, r24
    2848:	2c f4       	brge	.+10     	; 0x2854 <main+0x1c0>
		__ticks = 1;
    284a:	81 e0       	ldi	r24, 0x01	; 1
    284c:	90 e0       	ldi	r25, 0x00	; 0
    284e:	9c 8b       	std	Y+20, r25	; 0x14
    2850:	8b 8b       	std	Y+19, r24	; 0x13
    2852:	3f c0       	rjmp	.+126    	; 0x28d2 <main+0x23e>
	else if (__tmp > 65535)
    2854:	6d 89       	ldd	r22, Y+21	; 0x15
    2856:	7e 89       	ldd	r23, Y+22	; 0x16
    2858:	8f 89       	ldd	r24, Y+23	; 0x17
    285a:	98 8d       	ldd	r25, Y+24	; 0x18
    285c:	20 e0       	ldi	r18, 0x00	; 0
    285e:	3f ef       	ldi	r19, 0xFF	; 255
    2860:	4f e7       	ldi	r20, 0x7F	; 127
    2862:	57 e4       	ldi	r21, 0x47	; 71
    2864:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2868:	18 16       	cp	r1, r24
    286a:	4c f5       	brge	.+82     	; 0x28be <main+0x22a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    286c:	69 8d       	ldd	r22, Y+25	; 0x19
    286e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2870:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2872:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2874:	20 e0       	ldi	r18, 0x00	; 0
    2876:	30 e0       	ldi	r19, 0x00	; 0
    2878:	40 e2       	ldi	r20, 0x20	; 32
    287a:	51 e4       	ldi	r21, 0x41	; 65
    287c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2880:	dc 01       	movw	r26, r24
    2882:	cb 01       	movw	r24, r22
    2884:	bc 01       	movw	r22, r24
    2886:	cd 01       	movw	r24, r26
    2888:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    288c:	dc 01       	movw	r26, r24
    288e:	cb 01       	movw	r24, r22
    2890:	9c 8b       	std	Y+20, r25	; 0x14
    2892:	8b 8b       	std	Y+19, r24	; 0x13
    2894:	0f c0       	rjmp	.+30     	; 0x28b4 <main+0x220>
    2896:	88 ec       	ldi	r24, 0xC8	; 200
    2898:	90 e0       	ldi	r25, 0x00	; 0
    289a:	9a 8b       	std	Y+18, r25	; 0x12
    289c:	89 8b       	std	Y+17, r24	; 0x11
    289e:	89 89       	ldd	r24, Y+17	; 0x11
    28a0:	9a 89       	ldd	r25, Y+18	; 0x12
    28a2:	01 97       	sbiw	r24, 0x01	; 1
    28a4:	f1 f7       	brne	.-4      	; 0x28a2 <main+0x20e>
    28a6:	9a 8b       	std	Y+18, r25	; 0x12
    28a8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28aa:	8b 89       	ldd	r24, Y+19	; 0x13
    28ac:	9c 89       	ldd	r25, Y+20	; 0x14
    28ae:	01 97       	sbiw	r24, 0x01	; 1
    28b0:	9c 8b       	std	Y+20, r25	; 0x14
    28b2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28b4:	8b 89       	ldd	r24, Y+19	; 0x13
    28b6:	9c 89       	ldd	r25, Y+20	; 0x14
    28b8:	00 97       	sbiw	r24, 0x00	; 0
    28ba:	69 f7       	brne	.-38     	; 0x2896 <main+0x202>
    28bc:	14 c0       	rjmp	.+40     	; 0x28e6 <main+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28be:	6d 89       	ldd	r22, Y+21	; 0x15
    28c0:	7e 89       	ldd	r23, Y+22	; 0x16
    28c2:	8f 89       	ldd	r24, Y+23	; 0x17
    28c4:	98 8d       	ldd	r25, Y+24	; 0x18
    28c6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28ca:	dc 01       	movw	r26, r24
    28cc:	cb 01       	movw	r24, r22
    28ce:	9c 8b       	std	Y+20, r25	; 0x14
    28d0:	8b 8b       	std	Y+19, r24	; 0x13
    28d2:	8b 89       	ldd	r24, Y+19	; 0x13
    28d4:	9c 89       	ldd	r25, Y+20	; 0x14
    28d6:	98 8b       	std	Y+16, r25	; 0x10
    28d8:	8f 87       	std	Y+15, r24	; 0x0f
    28da:	8f 85       	ldd	r24, Y+15	; 0x0f
    28dc:	98 89       	ldd	r25, Y+16	; 0x10
    28de:	01 97       	sbiw	r24, 0x01	; 1
    28e0:	f1 f7       	brne	.-4      	; 0x28de <main+0x24a>
    28e2:	98 8b       	std	Y+16, r25	; 0x10
    28e4:	8f 87       	std	Y+15, r24	; 0x0f
			{
				_delay_ms(500);
				if(EquationSize == 1){
    28e6:	8f a9       	ldd	r24, Y+55	; 0x37
    28e8:	81 30       	cpi	r24, 0x01	; 1
    28ea:	a1 f4       	brne	.+40     	; 0x2914 <main+0x280>
					CLCD_voidSetPosition(2,1);
    28ec:	82 e0       	ldi	r24, 0x02	; 2
    28ee:	61 e0       	ldi	r22, 0x01	; 1
    28f0:	0e 94 6d 0c 	call	0x18da	; 0x18da <CLCD_voidSetPosition>
					CLCD_voidSendString((u8 *)"Invalid Equ!!");
    28f4:	8b e6       	ldi	r24, 0x6B	; 107
    28f6:	90 e0       	ldi	r25, 0x00	; 0
    28f8:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <CLCD_voidSendString>
					return 1;
    28fc:	81 e0       	ldi	r24, 0x01	; 1
    28fe:	90 e0       	ldi	r25, 0x00	; 0
					Equation[init]=0;
			}
		}
	}
	return 0;
}
    2900:	c3 5b       	subi	r28, 0xB3	; 179
    2902:	df 4f       	sbci	r29, 0xFF	; 255
    2904:	0f b6       	in	r0, 0x3f	; 63
    2906:	f8 94       	cli
    2908:	de bf       	out	0x3e, r29	; 62
    290a:	0f be       	out	0x3f, r0	; 63
    290c:	cd bf       	out	0x3d, r28	; 61
    290e:	cf 91       	pop	r28
    2910:	df 91       	pop	r29
    2912:	08 95       	ret
				if(EquationSize == 1){
					CLCD_voidSetPosition(2,1);
					CLCD_voidSendString((u8 *)"Invalid Equ!!");
					return 1;
				}
				for (u8 OperatorSize = 0; OperatorSize < EquationSize; OperatorSize++){
    2914:	1e a6       	std	Y+46, r1	; 0x2e
    2916:	60 c1       	rjmp	.+704    	; 0x2bd8 <main+0x544>
					if(Equation[OperatorSize]=='+' || Equation[OperatorSize]=='-'|| Equation[OperatorSize]=='*' || Equation[OperatorSize]=='/'){
    2918:	8e a5       	ldd	r24, Y+46	; 0x2e
    291a:	28 2f       	mov	r18, r24
    291c:	30 e0       	ldi	r19, 0x00	; 0
    291e:	ce 01       	movw	r24, r28
    2920:	c8 96       	adiw	r24, 0x38	; 56
    2922:	fc 01       	movw	r30, r24
    2924:	e2 0f       	add	r30, r18
    2926:	f3 1f       	adc	r31, r19
    2928:	80 81       	ld	r24, Z
    292a:	8b 32       	cpi	r24, 0x2B	; 43
    292c:	11 f1       	breq	.+68     	; 0x2972 <main+0x2de>
    292e:	8e a5       	ldd	r24, Y+46	; 0x2e
    2930:	28 2f       	mov	r18, r24
    2932:	30 e0       	ldi	r19, 0x00	; 0
    2934:	ce 01       	movw	r24, r28
    2936:	c8 96       	adiw	r24, 0x38	; 56
    2938:	fc 01       	movw	r30, r24
    293a:	e2 0f       	add	r30, r18
    293c:	f3 1f       	adc	r31, r19
    293e:	80 81       	ld	r24, Z
    2940:	8d 32       	cpi	r24, 0x2D	; 45
    2942:	b9 f0       	breq	.+46     	; 0x2972 <main+0x2de>
    2944:	8e a5       	ldd	r24, Y+46	; 0x2e
    2946:	28 2f       	mov	r18, r24
    2948:	30 e0       	ldi	r19, 0x00	; 0
    294a:	ce 01       	movw	r24, r28
    294c:	c8 96       	adiw	r24, 0x38	; 56
    294e:	fc 01       	movw	r30, r24
    2950:	e2 0f       	add	r30, r18
    2952:	f3 1f       	adc	r31, r19
    2954:	80 81       	ld	r24, Z
    2956:	8a 32       	cpi	r24, 0x2A	; 42
    2958:	61 f0       	breq	.+24     	; 0x2972 <main+0x2de>
    295a:	8e a5       	ldd	r24, Y+46	; 0x2e
    295c:	28 2f       	mov	r18, r24
    295e:	30 e0       	ldi	r19, 0x00	; 0
    2960:	ce 01       	movw	r24, r28
    2962:	c8 96       	adiw	r24, 0x38	; 56
    2964:	fc 01       	movw	r30, r24
    2966:	e2 0f       	add	r30, r18
    2968:	f3 1f       	adc	r31, r19
    296a:	80 81       	ld	r24, Z
    296c:	8f 32       	cpi	r24, 0x2F	; 47
    296e:	09 f0       	breq	.+2      	; 0x2972 <main+0x2de>
    2970:	30 c1       	rjmp	.+608    	; 0x2bd2 <main+0x53e>
						Operator = Equation[OperatorSize];
    2972:	8e a5       	ldd	r24, Y+46	; 0x2e
    2974:	28 2f       	mov	r18, r24
    2976:	30 e0       	ldi	r19, 0x00	; 0
    2978:	ce 01       	movw	r24, r28
    297a:	c8 96       	adiw	r24, 0x38	; 56
    297c:	fc 01       	movw	r30, r24
    297e:	e2 0f       	add	r30, r18
    2980:	f3 1f       	adc	r31, r19
    2982:	80 81       	ld	r24, Z
    2984:	88 ab       	std	Y+48, r24	; 0x30
						for(u8 Digits=0; Digits<OperatorSize; Digits++){
    2986:	1d a6       	std	Y+45, r1	; 0x2d
    2988:	20 c0       	rjmp	.+64     	; 0x29ca <main+0x336>
							Op1 = (Op1 * 10) + ( Equation[Digits] - 48 );
    298a:	8b a9       	ldd	r24, Y+51	; 0x33
    298c:	9c a9       	ldd	r25, Y+52	; 0x34
    298e:	9c 01       	movw	r18, r24
    2990:	22 0f       	add	r18, r18
    2992:	33 1f       	adc	r19, r19
    2994:	c9 01       	movw	r24, r18
    2996:	88 0f       	add	r24, r24
    2998:	99 1f       	adc	r25, r25
    299a:	88 0f       	add	r24, r24
    299c:	99 1f       	adc	r25, r25
    299e:	a9 01       	movw	r20, r18
    29a0:	48 0f       	add	r20, r24
    29a2:	59 1f       	adc	r21, r25
    29a4:	8d a5       	ldd	r24, Y+45	; 0x2d
    29a6:	28 2f       	mov	r18, r24
    29a8:	30 e0       	ldi	r19, 0x00	; 0
    29aa:	ce 01       	movw	r24, r28
    29ac:	c8 96       	adiw	r24, 0x38	; 56
    29ae:	fc 01       	movw	r30, r24
    29b0:	e2 0f       	add	r30, r18
    29b2:	f3 1f       	adc	r31, r19
    29b4:	80 81       	ld	r24, Z
    29b6:	88 2f       	mov	r24, r24
    29b8:	90 e0       	ldi	r25, 0x00	; 0
    29ba:	84 0f       	add	r24, r20
    29bc:	95 1f       	adc	r25, r21
    29be:	c0 97       	sbiw	r24, 0x30	; 48
    29c0:	9c ab       	std	Y+52, r25	; 0x34
    29c2:	8b ab       	std	Y+51, r24	; 0x33
					return 1;
				}
				for (u8 OperatorSize = 0; OperatorSize < EquationSize; OperatorSize++){
					if(Equation[OperatorSize]=='+' || Equation[OperatorSize]=='-'|| Equation[OperatorSize]=='*' || Equation[OperatorSize]=='/'){
						Operator = Equation[OperatorSize];
						for(u8 Digits=0; Digits<OperatorSize; Digits++){
    29c4:	8d a5       	ldd	r24, Y+45	; 0x2d
    29c6:	8f 5f       	subi	r24, 0xFF	; 255
    29c8:	8d a7       	std	Y+45, r24	; 0x2d
    29ca:	9d a5       	ldd	r25, Y+45	; 0x2d
    29cc:	8e a5       	ldd	r24, Y+46	; 0x2e
    29ce:	98 17       	cp	r25, r24
    29d0:	e0 f2       	brcs	.-72     	; 0x298a <main+0x2f6>
							Op1 = (Op1 * 10) + ( Equation[Digits] - 48 );
						}
						for(u8 Ind2=OperatorSize+1; Ind2<EquationSize-1; Ind2++){
    29d2:	8e a5       	ldd	r24, Y+46	; 0x2e
    29d4:	8f 5f       	subi	r24, 0xFF	; 255
    29d6:	8c a7       	std	Y+44, r24	; 0x2c
    29d8:	20 c0       	rjmp	.+64     	; 0x2a1a <main+0x386>
							Op2 = (Op2 * 10) + ( Equation[Ind2] - 48);
    29da:	89 a9       	ldd	r24, Y+49	; 0x31
    29dc:	9a a9       	ldd	r25, Y+50	; 0x32
    29de:	9c 01       	movw	r18, r24
    29e0:	22 0f       	add	r18, r18
    29e2:	33 1f       	adc	r19, r19
    29e4:	c9 01       	movw	r24, r18
    29e6:	88 0f       	add	r24, r24
    29e8:	99 1f       	adc	r25, r25
    29ea:	88 0f       	add	r24, r24
    29ec:	99 1f       	adc	r25, r25
    29ee:	a9 01       	movw	r20, r18
    29f0:	48 0f       	add	r20, r24
    29f2:	59 1f       	adc	r21, r25
    29f4:	8c a5       	ldd	r24, Y+44	; 0x2c
    29f6:	28 2f       	mov	r18, r24
    29f8:	30 e0       	ldi	r19, 0x00	; 0
    29fa:	ce 01       	movw	r24, r28
    29fc:	c8 96       	adiw	r24, 0x38	; 56
    29fe:	fc 01       	movw	r30, r24
    2a00:	e2 0f       	add	r30, r18
    2a02:	f3 1f       	adc	r31, r19
    2a04:	80 81       	ld	r24, Z
    2a06:	88 2f       	mov	r24, r24
    2a08:	90 e0       	ldi	r25, 0x00	; 0
    2a0a:	84 0f       	add	r24, r20
    2a0c:	95 1f       	adc	r25, r21
    2a0e:	c0 97       	sbiw	r24, 0x30	; 48
    2a10:	9a ab       	std	Y+50, r25	; 0x32
    2a12:	89 ab       	std	Y+49, r24	; 0x31
					if(Equation[OperatorSize]=='+' || Equation[OperatorSize]=='-'|| Equation[OperatorSize]=='*' || Equation[OperatorSize]=='/'){
						Operator = Equation[OperatorSize];
						for(u8 Digits=0; Digits<OperatorSize; Digits++){
							Op1 = (Op1 * 10) + ( Equation[Digits] - 48 );
						}
						for(u8 Ind2=OperatorSize+1; Ind2<EquationSize-1; Ind2++){
    2a14:	8c a5       	ldd	r24, Y+44	; 0x2c
    2a16:	8f 5f       	subi	r24, 0xFF	; 255
    2a18:	8c a7       	std	Y+44, r24	; 0x2c
    2a1a:	8c a5       	ldd	r24, Y+44	; 0x2c
    2a1c:	28 2f       	mov	r18, r24
    2a1e:	30 e0       	ldi	r19, 0x00	; 0
    2a20:	8f a9       	ldd	r24, Y+55	; 0x37
    2a22:	88 2f       	mov	r24, r24
    2a24:	90 e0       	ldi	r25, 0x00	; 0
    2a26:	01 97       	sbiw	r24, 0x01	; 1
    2a28:	28 17       	cp	r18, r24
    2a2a:	39 07       	cpc	r19, r25
    2a2c:	b4 f2       	brlt	.-84     	; 0x29da <main+0x346>
							Op2 = (Op2 * 10) + ( Equation[Ind2] - 48);
						}

						CLCD_voidCLearDisplay();
    2a2e:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <CLCD_voidCLearDisplay>

						switch(Operator){
    2a32:	88 a9       	ldd	r24, Y+48	; 0x30
    2a34:	48 2f       	mov	r20, r24
    2a36:	50 e0       	ldi	r21, 0x00	; 0
    2a38:	2e 96       	adiw	r28, 0x0e	; 14
    2a3a:	5f af       	std	Y+63, r21	; 0x3f
    2a3c:	4e af       	std	Y+62, r20	; 0x3e
    2a3e:	2e 97       	sbiw	r28, 0x0e	; 14
    2a40:	2e 96       	adiw	r28, 0x0e	; 14
    2a42:	8e ad       	ldd	r24, Y+62	; 0x3e
    2a44:	9f ad       	ldd	r25, Y+63	; 0x3f
    2a46:	2e 97       	sbiw	r28, 0x0e	; 14
    2a48:	8b 32       	cpi	r24, 0x2B	; 43
    2a4a:	91 05       	cpc	r25, r1
    2a4c:	01 f1       	breq	.+64     	; 0x2a8e <main+0x3fa>
    2a4e:	2e 96       	adiw	r28, 0x0e	; 14
    2a50:	ae ad       	ldd	r26, Y+62	; 0x3e
    2a52:	bf ad       	ldd	r27, Y+63	; 0x3f
    2a54:	2e 97       	sbiw	r28, 0x0e	; 14
    2a56:	ac 32       	cpi	r26, 0x2C	; 44
    2a58:	b1 05       	cpc	r27, r1
    2a5a:	4c f4       	brge	.+18     	; 0x2a6e <main+0x3da>
    2a5c:	2e 96       	adiw	r28, 0x0e	; 14
    2a5e:	2e ad       	ldd	r18, Y+62	; 0x3e
    2a60:	3f ad       	ldd	r19, Y+63	; 0x3f
    2a62:	2e 97       	sbiw	r28, 0x0e	; 14
    2a64:	2a 32       	cpi	r18, 0x2A	; 42
    2a66:	31 05       	cpc	r19, r1
    2a68:	09 f4       	brne	.+2      	; 0x2a6c <main+0x3d8>
    2a6a:	55 c0       	rjmp	.+170    	; 0x2b16 <main+0x482>
    2a6c:	a9 c0       	rjmp	.+338    	; 0x2bc0 <main+0x52c>
    2a6e:	2e 96       	adiw	r28, 0x0e	; 14
    2a70:	4e ad       	ldd	r20, Y+62	; 0x3e
    2a72:	5f ad       	ldd	r21, Y+63	; 0x3f
    2a74:	2e 97       	sbiw	r28, 0x0e	; 14
    2a76:	4d 32       	cpi	r20, 0x2D	; 45
    2a78:	51 05       	cpc	r21, r1
    2a7a:	59 f1       	breq	.+86     	; 0x2ad2 <main+0x43e>
    2a7c:	2e 96       	adiw	r28, 0x0e	; 14
    2a7e:	8e ad       	ldd	r24, Y+62	; 0x3e
    2a80:	9f ad       	ldd	r25, Y+63	; 0x3f
    2a82:	2e 97       	sbiw	r28, 0x0e	; 14
    2a84:	8f 32       	cpi	r24, 0x2F	; 47
    2a86:	91 05       	cpc	r25, r1
    2a88:	09 f4       	brne	.+2      	; 0x2a8c <main+0x3f8>
    2a8a:	6b c0       	rjmp	.+214    	; 0x2b62 <main+0x4ce>
    2a8c:	99 c0       	rjmp	.+306    	; 0x2bc0 <main+0x52c>
						case '+':
							Result=0;
    2a8e:	1e aa       	std	Y+54, r1	; 0x36
    2a90:	1d aa       	std	Y+53, r1	; 0x35
							Result = Op1 + Op2;
    2a92:	2b a9       	ldd	r18, Y+51	; 0x33
    2a94:	3c a9       	ldd	r19, Y+52	; 0x34
    2a96:	89 a9       	ldd	r24, Y+49	; 0x31
    2a98:	9a a9       	ldd	r25, Y+50	; 0x32
    2a9a:	82 0f       	add	r24, r18
    2a9c:	93 1f       	adc	r25, r19
    2a9e:	9e ab       	std	Y+54, r25	; 0x36
    2aa0:	8d ab       	std	Y+53, r24	; 0x35
							CLCD_voidCLearDisplay();
    2aa2:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <CLCD_voidCLearDisplay>
							CLCD_voidSetPosition(1,1);
    2aa6:	81 e0       	ldi	r24, 0x01	; 1
    2aa8:	61 e0       	ldi	r22, 0x01	; 1
    2aaa:	0e 94 6d 0c 	call	0x18da	; 0x18da <CLCD_voidSetPosition>
							CLCD_voidSendString((u8 *)"Result =");
    2aae:	89 e7       	ldi	r24, 0x79	; 121
    2ab0:	90 e0       	ldi	r25, 0x00	; 0
    2ab2:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <CLCD_voidSendString>
							CLCD_voidSetPosition(2,1);
    2ab6:	82 e0       	ldi	r24, 0x02	; 2
    2ab8:	61 e0       	ldi	r22, 0x01	; 1
    2aba:	0e 94 6d 0c 	call	0x18da	; 0x18da <CLCD_voidSetPosition>
							CLCD_voidSendu32Number(Result);
    2abe:	8d a9       	ldd	r24, Y+53	; 0x35
    2ac0:	9e a9       	ldd	r25, Y+54	; 0x36
    2ac2:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <CLCD_voidSendu32Number>
							EquationSize =0;
    2ac6:	1f aa       	std	Y+55, r1	; 0x37
							Op1 = 0;
    2ac8:	1c aa       	std	Y+52, r1	; 0x34
    2aca:	1b aa       	std	Y+51, r1	; 0x33
							Op2 = 0;
    2acc:	1a aa       	std	Y+50, r1	; 0x32
    2ace:	19 aa       	std	Y+49, r1	; 0x31
    2ad0:	7b ce       	rjmp	.-778    	; 0x27c8 <main+0x134>
							break;
						case '-':
							Result=0;
    2ad2:	1e aa       	std	Y+54, r1	; 0x36
    2ad4:	1d aa       	std	Y+53, r1	; 0x35
							Result = Op1 - Op2;
    2ad6:	2b a9       	ldd	r18, Y+51	; 0x33
    2ad8:	3c a9       	ldd	r19, Y+52	; 0x34
    2ada:	89 a9       	ldd	r24, Y+49	; 0x31
    2adc:	9a a9       	ldd	r25, Y+50	; 0x32
    2ade:	d9 01       	movw	r26, r18
    2ae0:	a8 1b       	sub	r26, r24
    2ae2:	b9 0b       	sbc	r27, r25
    2ae4:	cd 01       	movw	r24, r26
    2ae6:	9e ab       	std	Y+54, r25	; 0x36
    2ae8:	8d ab       	std	Y+53, r24	; 0x35
							CLCD_voidSetPosition(1,1);
    2aea:	81 e0       	ldi	r24, 0x01	; 1
    2aec:	61 e0       	ldi	r22, 0x01	; 1
    2aee:	0e 94 6d 0c 	call	0x18da	; 0x18da <CLCD_voidSetPosition>
							CLCD_voidSendString((u8 *)"Result =");
    2af2:	89 e7       	ldi	r24, 0x79	; 121
    2af4:	90 e0       	ldi	r25, 0x00	; 0
    2af6:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <CLCD_voidSendString>
							CLCD_voidSetPosition(2,1);
    2afa:	82 e0       	ldi	r24, 0x02	; 2
    2afc:	61 e0       	ldi	r22, 0x01	; 1
    2afe:	0e 94 6d 0c 	call	0x18da	; 0x18da <CLCD_voidSetPosition>
							CLCD_voidSendu32Number(Result);
    2b02:	8d a9       	ldd	r24, Y+53	; 0x35
    2b04:	9e a9       	ldd	r25, Y+54	; 0x36
    2b06:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <CLCD_voidSendu32Number>
							EquationSize = 0;
    2b0a:	1f aa       	std	Y+55, r1	; 0x37
							Op1 = 0;
    2b0c:	1c aa       	std	Y+52, r1	; 0x34
    2b0e:	1b aa       	std	Y+51, r1	; 0x33
							Op2 = 0;
    2b10:	1a aa       	std	Y+50, r1	; 0x32
    2b12:	19 aa       	std	Y+49, r1	; 0x31
    2b14:	59 ce       	rjmp	.-846    	; 0x27c8 <main+0x134>
							break;
						case '*':
							Result = 0;
    2b16:	1e aa       	std	Y+54, r1	; 0x36
    2b18:	1d aa       	std	Y+53, r1	; 0x35
							Result = Op1 * Op2;
    2b1a:	2b a9       	ldd	r18, Y+51	; 0x33
    2b1c:	3c a9       	ldd	r19, Y+52	; 0x34
    2b1e:	89 a9       	ldd	r24, Y+49	; 0x31
    2b20:	9a a9       	ldd	r25, Y+50	; 0x32
    2b22:	ac 01       	movw	r20, r24
    2b24:	24 9f       	mul	r18, r20
    2b26:	c0 01       	movw	r24, r0
    2b28:	25 9f       	mul	r18, r21
    2b2a:	90 0d       	add	r25, r0
    2b2c:	34 9f       	mul	r19, r20
    2b2e:	90 0d       	add	r25, r0
    2b30:	11 24       	eor	r1, r1
    2b32:	9e ab       	std	Y+54, r25	; 0x36
    2b34:	8d ab       	std	Y+53, r24	; 0x35
							CLCD_voidSetPosition(1,1);
    2b36:	81 e0       	ldi	r24, 0x01	; 1
    2b38:	61 e0       	ldi	r22, 0x01	; 1
    2b3a:	0e 94 6d 0c 	call	0x18da	; 0x18da <CLCD_voidSetPosition>
							CLCD_voidSendString((u8 *)"Result =");
    2b3e:	89 e7       	ldi	r24, 0x79	; 121
    2b40:	90 e0       	ldi	r25, 0x00	; 0
    2b42:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <CLCD_voidSendString>
							CLCD_voidSetPosition(2,1);
    2b46:	82 e0       	ldi	r24, 0x02	; 2
    2b48:	61 e0       	ldi	r22, 0x01	; 1
    2b4a:	0e 94 6d 0c 	call	0x18da	; 0x18da <CLCD_voidSetPosition>
							CLCD_voidSendu32Number(Result);
    2b4e:	8d a9       	ldd	r24, Y+53	; 0x35
    2b50:	9e a9       	ldd	r25, Y+54	; 0x36
    2b52:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <CLCD_voidSendu32Number>
							EquationSize =0;
    2b56:	1f aa       	std	Y+55, r1	; 0x37
							Op1 = 0;
    2b58:	1c aa       	std	Y+52, r1	; 0x34
    2b5a:	1b aa       	std	Y+51, r1	; 0x33
							Op2 = 0;
    2b5c:	1a aa       	std	Y+50, r1	; 0x32
    2b5e:	19 aa       	std	Y+49, r1	; 0x31
    2b60:	33 ce       	rjmp	.-922    	; 0x27c8 <main+0x134>
							break;
						case '/':
							Result = 0;
    2b62:	1e aa       	std	Y+54, r1	; 0x36
    2b64:	1d aa       	std	Y+53, r1	; 0x35
							if(Op2 == 0){
    2b66:	89 a9       	ldd	r24, Y+49	; 0x31
    2b68:	9a a9       	ldd	r25, Y+50	; 0x32
    2b6a:	00 97       	sbiw	r24, 0x00	; 0
    2b6c:	49 f4       	brne	.+18     	; 0x2b80 <main+0x4ec>
								CLCD_voidSetPosition(2,1);
    2b6e:	82 e0       	ldi	r24, 0x02	; 2
    2b70:	61 e0       	ldi	r22, 0x01	; 1
    2b72:	0e 94 6d 0c 	call	0x18da	; 0x18da <CLCD_voidSetPosition>
								CLCD_voidSendString((u8 *)"Undefined!");
    2b76:	82 e8       	ldi	r24, 0x82	; 130
    2b78:	90 e0       	ldi	r25, 0x00	; 0
    2b7a:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <CLCD_voidSendString>
    2b7e:	1a c0       	rjmp	.+52     	; 0x2bb4 <main+0x520>
							}
							else{
								Result = Op1 / Op2;
    2b80:	8b a9       	ldd	r24, Y+51	; 0x33
    2b82:	9c a9       	ldd	r25, Y+52	; 0x34
    2b84:	29 a9       	ldd	r18, Y+49	; 0x31
    2b86:	3a a9       	ldd	r19, Y+50	; 0x32
    2b88:	b9 01       	movw	r22, r18
    2b8a:	0e 94 89 16 	call	0x2d12	; 0x2d12 <__udivmodhi4>
    2b8e:	cb 01       	movw	r24, r22
    2b90:	9e ab       	std	Y+54, r25	; 0x36
    2b92:	8d ab       	std	Y+53, r24	; 0x35
								CLCD_voidSetPosition(1,1);
    2b94:	81 e0       	ldi	r24, 0x01	; 1
    2b96:	61 e0       	ldi	r22, 0x01	; 1
    2b98:	0e 94 6d 0c 	call	0x18da	; 0x18da <CLCD_voidSetPosition>
								CLCD_voidSendString((u8 *)"Result =");
    2b9c:	89 e7       	ldi	r24, 0x79	; 121
    2b9e:	90 e0       	ldi	r25, 0x00	; 0
    2ba0:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <CLCD_voidSendString>
								CLCD_voidSetPosition(2,1);
    2ba4:	82 e0       	ldi	r24, 0x02	; 2
    2ba6:	61 e0       	ldi	r22, 0x01	; 1
    2ba8:	0e 94 6d 0c 	call	0x18da	; 0x18da <CLCD_voidSetPosition>
								CLCD_voidSendu32Number(Result);
    2bac:	8d a9       	ldd	r24, Y+53	; 0x35
    2bae:	9e a9       	ldd	r25, Y+54	; 0x36
    2bb0:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <CLCD_voidSendu32Number>
							}
							EquationSize = 0;
    2bb4:	1f aa       	std	Y+55, r1	; 0x37
							Op1 = 0;
    2bb6:	1c aa       	std	Y+52, r1	; 0x34
    2bb8:	1b aa       	std	Y+51, r1	; 0x33
							Op2 = 0;
    2bba:	1a aa       	std	Y+50, r1	; 0x32
    2bbc:	19 aa       	std	Y+49, r1	; 0x31
    2bbe:	04 ce       	rjmp	.-1016   	; 0x27c8 <main+0x134>
							break;
						default:
							CLCD_voidSetPosition(2,1);
    2bc0:	82 e0       	ldi	r24, 0x02	; 2
    2bc2:	61 e0       	ldi	r22, 0x01	; 1
    2bc4:	0e 94 6d 0c 	call	0x18da	; 0x18da <CLCD_voidSetPosition>
							CLCD_voidSendString((u8 *)"Invalid Op!");
    2bc8:	8d e8       	ldi	r24, 0x8D	; 141
    2bca:	90 e0       	ldi	r25, 0x00	; 0
    2bcc:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <CLCD_voidSendString>
    2bd0:	fb cd       	rjmp	.-1034   	; 0x27c8 <main+0x134>
				if(EquationSize == 1){
					CLCD_voidSetPosition(2,1);
					CLCD_voidSendString((u8 *)"Invalid Equ!!");
					return 1;
				}
				for (u8 OperatorSize = 0; OperatorSize < EquationSize; OperatorSize++){
    2bd2:	8e a5       	ldd	r24, Y+46	; 0x2e
    2bd4:	8f 5f       	subi	r24, 0xFF	; 255
    2bd6:	8e a7       	std	Y+46, r24	; 0x2e
    2bd8:	9e a5       	ldd	r25, Y+46	; 0x2e
    2bda:	8f a9       	ldd	r24, Y+55	; 0x37
    2bdc:	98 17       	cp	r25, r24
    2bde:	08 f4       	brcc	.+2      	; 0x2be2 <main+0x54e>
    2be0:	9b ce       	rjmp	.-714    	; 0x2918 <main+0x284>
    2be2:	f2 cd       	rjmp	.-1052   	; 0x27c8 <main+0x134>
						}
						break;
					}
				}
			}
			else if(key == 'C'){
    2be4:	8f a5       	ldd	r24, Y+47	; 0x2f
    2be6:	83 34       	cpi	r24, 0x43	; 67
    2be8:	09 f0       	breq	.+2      	; 0x2bec <main+0x558>
    2bea:	ee cd       	rjmp	.-1060   	; 0x27c8 <main+0x134>
				CLCD_voidSetPosition(1,1);
    2bec:	81 e0       	ldi	r24, 0x01	; 1
    2bee:	61 e0       	ldi	r22, 0x01	; 1
    2bf0:	0e 94 6d 0c 	call	0x18da	; 0x18da <CLCD_voidSetPosition>
				CLCD_voidCLearDisplay();
    2bf4:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <CLCD_voidCLearDisplay>
    2bf8:	80 e0       	ldi	r24, 0x00	; 0
    2bfa:	90 e0       	ldi	r25, 0x00	; 0
    2bfc:	aa ef       	ldi	r26, 0xFA	; 250
    2bfe:	b3 e4       	ldi	r27, 0x43	; 67
    2c00:	8b 87       	std	Y+11, r24	; 0x0b
    2c02:	9c 87       	std	Y+12, r25	; 0x0c
    2c04:	ad 87       	std	Y+13, r26	; 0x0d
    2c06:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c08:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c0a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c10:	20 e0       	ldi	r18, 0x00	; 0
    2c12:	30 e0       	ldi	r19, 0x00	; 0
    2c14:	4a ef       	ldi	r20, 0xFA	; 250
    2c16:	54 e4       	ldi	r21, 0x44	; 68
    2c18:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c1c:	dc 01       	movw	r26, r24
    2c1e:	cb 01       	movw	r24, r22
    2c20:	8f 83       	std	Y+7, r24	; 0x07
    2c22:	98 87       	std	Y+8, r25	; 0x08
    2c24:	a9 87       	std	Y+9, r26	; 0x09
    2c26:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c28:	6f 81       	ldd	r22, Y+7	; 0x07
    2c2a:	78 85       	ldd	r23, Y+8	; 0x08
    2c2c:	89 85       	ldd	r24, Y+9	; 0x09
    2c2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c30:	20 e0       	ldi	r18, 0x00	; 0
    2c32:	30 e0       	ldi	r19, 0x00	; 0
    2c34:	40 e8       	ldi	r20, 0x80	; 128
    2c36:	5f e3       	ldi	r21, 0x3F	; 63
    2c38:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2c3c:	88 23       	and	r24, r24
    2c3e:	2c f4       	brge	.+10     	; 0x2c4a <main+0x5b6>
		__ticks = 1;
    2c40:	81 e0       	ldi	r24, 0x01	; 1
    2c42:	90 e0       	ldi	r25, 0x00	; 0
    2c44:	9e 83       	std	Y+6, r25	; 0x06
    2c46:	8d 83       	std	Y+5, r24	; 0x05
    2c48:	3f c0       	rjmp	.+126    	; 0x2cc8 <main+0x634>
	else if (__tmp > 65535)
    2c4a:	6f 81       	ldd	r22, Y+7	; 0x07
    2c4c:	78 85       	ldd	r23, Y+8	; 0x08
    2c4e:	89 85       	ldd	r24, Y+9	; 0x09
    2c50:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c52:	20 e0       	ldi	r18, 0x00	; 0
    2c54:	3f ef       	ldi	r19, 0xFF	; 255
    2c56:	4f e7       	ldi	r20, 0x7F	; 127
    2c58:	57 e4       	ldi	r21, 0x47	; 71
    2c5a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2c5e:	18 16       	cp	r1, r24
    2c60:	4c f5       	brge	.+82     	; 0x2cb4 <main+0x620>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c62:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c64:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c66:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c68:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c6a:	20 e0       	ldi	r18, 0x00	; 0
    2c6c:	30 e0       	ldi	r19, 0x00	; 0
    2c6e:	40 e2       	ldi	r20, 0x20	; 32
    2c70:	51 e4       	ldi	r21, 0x41	; 65
    2c72:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c76:	dc 01       	movw	r26, r24
    2c78:	cb 01       	movw	r24, r22
    2c7a:	bc 01       	movw	r22, r24
    2c7c:	cd 01       	movw	r24, r26
    2c7e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c82:	dc 01       	movw	r26, r24
    2c84:	cb 01       	movw	r24, r22
    2c86:	9e 83       	std	Y+6, r25	; 0x06
    2c88:	8d 83       	std	Y+5, r24	; 0x05
    2c8a:	0f c0       	rjmp	.+30     	; 0x2caa <main+0x616>
    2c8c:	88 ec       	ldi	r24, 0xC8	; 200
    2c8e:	90 e0       	ldi	r25, 0x00	; 0
    2c90:	9c 83       	std	Y+4, r25	; 0x04
    2c92:	8b 83       	std	Y+3, r24	; 0x03
    2c94:	8b 81       	ldd	r24, Y+3	; 0x03
    2c96:	9c 81       	ldd	r25, Y+4	; 0x04
    2c98:	01 97       	sbiw	r24, 0x01	; 1
    2c9a:	f1 f7       	brne	.-4      	; 0x2c98 <main+0x604>
    2c9c:	9c 83       	std	Y+4, r25	; 0x04
    2c9e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ca0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ca2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ca4:	01 97       	sbiw	r24, 0x01	; 1
    2ca6:	9e 83       	std	Y+6, r25	; 0x06
    2ca8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2caa:	8d 81       	ldd	r24, Y+5	; 0x05
    2cac:	9e 81       	ldd	r25, Y+6	; 0x06
    2cae:	00 97       	sbiw	r24, 0x00	; 0
    2cb0:	69 f7       	brne	.-38     	; 0x2c8c <main+0x5f8>
    2cb2:	14 c0       	rjmp	.+40     	; 0x2cdc <main+0x648>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cb4:	6f 81       	ldd	r22, Y+7	; 0x07
    2cb6:	78 85       	ldd	r23, Y+8	; 0x08
    2cb8:	89 85       	ldd	r24, Y+9	; 0x09
    2cba:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cbc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2cc0:	dc 01       	movw	r26, r24
    2cc2:	cb 01       	movw	r24, r22
    2cc4:	9e 83       	std	Y+6, r25	; 0x06
    2cc6:	8d 83       	std	Y+5, r24	; 0x05
    2cc8:	8d 81       	ldd	r24, Y+5	; 0x05
    2cca:	9e 81       	ldd	r25, Y+6	; 0x06
    2ccc:	9a 83       	std	Y+2, r25	; 0x02
    2cce:	89 83       	std	Y+1, r24	; 0x01
    2cd0:	89 81       	ldd	r24, Y+1	; 0x01
    2cd2:	9a 81       	ldd	r25, Y+2	; 0x02
    2cd4:	01 97       	sbiw	r24, 0x01	; 1
    2cd6:	f1 f7       	brne	.-4      	; 0x2cd4 <main+0x640>
    2cd8:	9a 83       	std	Y+2, r25	; 0x02
    2cda:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(500);
				CLCD_voidCLearDisplay();
    2cdc:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <CLCD_voidCLearDisplay>
				Result =0;
    2ce0:	1e aa       	std	Y+54, r1	; 0x36
    2ce2:	1d aa       	std	Y+53, r1	; 0x35
				Op1 = 0;
    2ce4:	1c aa       	std	Y+52, r1	; 0x34
    2ce6:	1b aa       	std	Y+51, r1	; 0x33
				Op2 = 0;
    2ce8:	1a aa       	std	Y+50, r1	; 0x32
    2cea:	19 aa       	std	Y+49, r1	; 0x31
				EquationSize = 0;
    2cec:	1f aa       	std	Y+55, r1	; 0x37
				for(u8 init=0; init<20; init++)
    2cee:	1b a6       	std	Y+43, r1	; 0x2b
    2cf0:	0c c0       	rjmp	.+24     	; 0x2d0a <main+0x676>
					Equation[init]=0;
    2cf2:	8b a5       	ldd	r24, Y+43	; 0x2b
    2cf4:	28 2f       	mov	r18, r24
    2cf6:	30 e0       	ldi	r19, 0x00	; 0
    2cf8:	ce 01       	movw	r24, r28
    2cfa:	c8 96       	adiw	r24, 0x38	; 56
    2cfc:	fc 01       	movw	r30, r24
    2cfe:	e2 0f       	add	r30, r18
    2d00:	f3 1f       	adc	r31, r19
    2d02:	10 82       	st	Z, r1
				CLCD_voidCLearDisplay();
				Result =0;
				Op1 = 0;
				Op2 = 0;
				EquationSize = 0;
				for(u8 init=0; init<20; init++)
    2d04:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d06:	8f 5f       	subi	r24, 0xFF	; 255
    2d08:	8b a7       	std	Y+43, r24	; 0x2b
    2d0a:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d0c:	84 31       	cpi	r24, 0x14	; 20
    2d0e:	88 f3       	brcs	.-30     	; 0x2cf2 <main+0x65e>
    2d10:	5b cd       	rjmp	.-1354   	; 0x27c8 <main+0x134>

00002d12 <__udivmodhi4>:
    2d12:	aa 1b       	sub	r26, r26
    2d14:	bb 1b       	sub	r27, r27
    2d16:	51 e1       	ldi	r21, 0x11	; 17
    2d18:	07 c0       	rjmp	.+14     	; 0x2d28 <__udivmodhi4_ep>

00002d1a <__udivmodhi4_loop>:
    2d1a:	aa 1f       	adc	r26, r26
    2d1c:	bb 1f       	adc	r27, r27
    2d1e:	a6 17       	cp	r26, r22
    2d20:	b7 07       	cpc	r27, r23
    2d22:	10 f0       	brcs	.+4      	; 0x2d28 <__udivmodhi4_ep>
    2d24:	a6 1b       	sub	r26, r22
    2d26:	b7 0b       	sbc	r27, r23

00002d28 <__udivmodhi4_ep>:
    2d28:	88 1f       	adc	r24, r24
    2d2a:	99 1f       	adc	r25, r25
    2d2c:	5a 95       	dec	r21
    2d2e:	a9 f7       	brne	.-22     	; 0x2d1a <__udivmodhi4_loop>
    2d30:	80 95       	com	r24
    2d32:	90 95       	com	r25
    2d34:	bc 01       	movw	r22, r24
    2d36:	cd 01       	movw	r24, r26
    2d38:	08 95       	ret

00002d3a <__prologue_saves__>:
    2d3a:	2f 92       	push	r2
    2d3c:	3f 92       	push	r3
    2d3e:	4f 92       	push	r4
    2d40:	5f 92       	push	r5
    2d42:	6f 92       	push	r6
    2d44:	7f 92       	push	r7
    2d46:	8f 92       	push	r8
    2d48:	9f 92       	push	r9
    2d4a:	af 92       	push	r10
    2d4c:	bf 92       	push	r11
    2d4e:	cf 92       	push	r12
    2d50:	df 92       	push	r13
    2d52:	ef 92       	push	r14
    2d54:	ff 92       	push	r15
    2d56:	0f 93       	push	r16
    2d58:	1f 93       	push	r17
    2d5a:	cf 93       	push	r28
    2d5c:	df 93       	push	r29
    2d5e:	cd b7       	in	r28, 0x3d	; 61
    2d60:	de b7       	in	r29, 0x3e	; 62
    2d62:	ca 1b       	sub	r28, r26
    2d64:	db 0b       	sbc	r29, r27
    2d66:	0f b6       	in	r0, 0x3f	; 63
    2d68:	f8 94       	cli
    2d6a:	de bf       	out	0x3e, r29	; 62
    2d6c:	0f be       	out	0x3f, r0	; 63
    2d6e:	cd bf       	out	0x3d, r28	; 61
    2d70:	09 94       	ijmp

00002d72 <__epilogue_restores__>:
    2d72:	2a 88       	ldd	r2, Y+18	; 0x12
    2d74:	39 88       	ldd	r3, Y+17	; 0x11
    2d76:	48 88       	ldd	r4, Y+16	; 0x10
    2d78:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d7a:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d7c:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d7e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d80:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d82:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d84:	b9 84       	ldd	r11, Y+9	; 0x09
    2d86:	c8 84       	ldd	r12, Y+8	; 0x08
    2d88:	df 80       	ldd	r13, Y+7	; 0x07
    2d8a:	ee 80       	ldd	r14, Y+6	; 0x06
    2d8c:	fd 80       	ldd	r15, Y+5	; 0x05
    2d8e:	0c 81       	ldd	r16, Y+4	; 0x04
    2d90:	1b 81       	ldd	r17, Y+3	; 0x03
    2d92:	aa 81       	ldd	r26, Y+2	; 0x02
    2d94:	b9 81       	ldd	r27, Y+1	; 0x01
    2d96:	ce 0f       	add	r28, r30
    2d98:	d1 1d       	adc	r29, r1
    2d9a:	0f b6       	in	r0, 0x3f	; 63
    2d9c:	f8 94       	cli
    2d9e:	de bf       	out	0x3e, r29	; 62
    2da0:	0f be       	out	0x3f, r0	; 63
    2da2:	cd bf       	out	0x3d, r28	; 61
    2da4:	ed 01       	movw	r28, r26
    2da6:	08 95       	ret

00002da8 <_exit>:
    2da8:	f8 94       	cli

00002daa <__stop_program>:
    2daa:	ff cf       	rjmp	.-2      	; 0x2daa <__stop_program>
