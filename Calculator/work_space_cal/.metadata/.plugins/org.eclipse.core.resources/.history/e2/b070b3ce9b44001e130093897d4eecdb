/***************************************************************************************************************
*                                          Module:  Digital Input/Output Program                               *
*                                          File Name: MDIO_program.h                                           *
*                                          Created on: May 5, 2023                                             *
*                                          Author: Abdel-Hamid Tarek                                           *
****************************************************************************************************************/

#include "std_types.h"
#include "common_macros.h"

#include "MDIO_config.h"
#include "MDIO_private.h"
#include "MDIO_interface.h"
#include "MDIO_register.h"


void PORT_voidInit(void)
{
	/*SET THE PORT Direction*/
	DDRA = PORTA_DIR;
	DDRB = PORTB_DIR;
	DDRC = PORTC_DIR;
	DDRD = PORTD_DIR;

	/*SET THE PORT Value*/
	PORTA = PORTA_INT;
	PORTB = PORTB_INT;
	PORTC = PORTC_INT;
	PORTD = PORTD_INT;
}
/*==============================================================================================================================================
 * Direction modules
 *==============================================================================================================================================*/
u8 DIO_u8SetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
	u8 Local_u8ErrorState=0;

	if(Copy_u8Pin<= DIO_u8PIN7)
	{
		if(Copy_u8Direction==DIO_u8PIN_INPUT)
		{
			switch(Copy_u8Port)
			{
			case DIO_u8PORTA: CLEAR_BIT(DDRA,Copy_u8Pin);break;
			case DIO_u8PORTB: CLEAR_BIT(DDRB,Copy_u8Pin);break;
			case DIO_u8PORTC: CLEAR_BIT(DDRC,Copy_u8Pin);break;
			case DIO_u8PORTD: CLEAR_BIT(DDRD,Copy_u8Pin);break;
			default: Local_u8ErrorState=1;
			}
		}
		else if(Copy_u8Direction==DIO_u8PIN_OUTPUT)
		{
			switch(Copy_u8Port)
			{
			case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin);break;
			case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin);break;
			case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin);break;
			case DIO_u8PORTD: SET_BIT(DDRD,Copy_u8Pin);break;
			default: Local_u8ErrorState=1;
			}
		}
		else
		{
			Local_u8ErrorState=1;
		}
	}
	else
	{
		Local_u8ErrorState=1;
	}
	return Local_u8ErrorState;
}

u8 DIO_u8SetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
	u8 Local_u8ErrorState=0;
	switch(Copy_u8Port)
	{
	case DIO_u8PORTA: DDRA=Copy_u8Direction;break;
	case DIO_u8PORTB: DDRB=Copy_u8Direction;break;
	case DIO_u8PORTC: DDRC=Copy_u8Direction;break;
	case DIO_u8PORTD: DDRD=Copy_u8Direction;break;
	default: Local_u8ErrorState=1;
	}
	return Local_u8ErrorState;
}

/*==============================================================================================================================================
 * Write modules
 *==============================================================================================================================================*/
u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState=0;
	if(Copy_u8Pin<= DIO_u8PIN7)
	{
		if(Copy_u8Value==DIO_u8PIN_LOW)
		{
			switch(Copy_u8Port)
			{
			case DIO_u8PORTA: CLEAR_BIT(PORTA,Copy_u8Pin);break;
			case DIO_u8PORTB: CLEAR_BIT(PORTB,Copy_u8Pin);break;
			case DIO_u8PORTC: CLEAR_BIT(PORTC,Copy_u8Pin);break;
			case DIO_u8PORTD: CLEAR_BIT(PORTD,Copy_u8Pin);break;
			default: Local_u8ErrorState=1;
			}
		}
		else if(Copy_u8Value==DIO_u8PIN_HIGH)
		{
			switch(Copy_u8Port)
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin);break;
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin);break;
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin);break;
			case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin);break;
			default: Local_u8ErrorState=1;
			}
		}
		else
		{
			Local_u8ErrorState=1;
		}
	}
	else
	{
		Local_u8ErrorState=1;
	}
	return Local_u8ErrorState;
}

u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState=0;
	switch(Copy_u8Port)
	{
	case DIO_u8PORTA: PORTA=Copy_u8Value;break;
	case DIO_u8PORTB: PORTB=Copy_u8Value;break;
	case DIO_u8PORTC: PORTC=Copy_u8Value;break;
	case DIO_u8PORTD: PORTD=Copy_u8Value;break;
	default: Local_u8ErrorState=1;
	}

	return Local_u8ErrorState;
}
/*==============================================================================================================================================
 * Read modules
 *==============================================================================================================================================*/

u8 DIO_u8GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8* Copy_pu8Value)
{
	u8 Local_u8ErrorState=0;
	if((Copy_pu8Value!=0) && (Copy_u8Pin<=DIO_u8PIN7))
		{
			switch(Copy_u8Port)
			{
			case DIO_u8PORTA: *Copy_pu8Value=GET_BIT(PINA,Copy_u8Pin);break;
			case DIO_u8PORTB: *Copy_pu8Value=GET_BIT(PINB,Copy_u8Pin);break;
			case DIO_u8PORTC: *Copy_pu8Value=GET_BIT(PINC,Copy_u8Pin);break;
			case DIO_u8PORTD: *Copy_pu8Value=GET_BIT(PIND,Copy_u8Pin);break;
			default: Local_u8ErrorState=1;
			}
		}
	else
	{
		Local_u8ErrorState=1;
	}
		return Local_u8ErrorState;
}

/***************************************************************************************************************/
